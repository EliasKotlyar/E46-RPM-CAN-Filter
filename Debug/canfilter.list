
canfilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b70  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002d58  08002d58  00012d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002d88  08002d88  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002d88  08002d88  00012d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002d90  08002d90  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002d90  08002d90  00012d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002d94  08002d94  00012d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08002da4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08002da4  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006405  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001344  00000000  00000000  0002643a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000558  00000000  00000000  00027780  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004b0  00000000  00000000  00027cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a099  00000000  00000000  00028188  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004e1e  00000000  00000000  00042221  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092460  00000000  00000000  0004703f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d949f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001534  00000000  00000000  000d951c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000000c 	.word	0x2000000c
 8000204:	00000000 	.word	0x00000000
 8000208:	08002d40 	.word	0x08002d40

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000010 	.word	0x20000010
 8000224:	08002d40 	.word	0x08002d40

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a18:	f000 b974 	b.w	8000d04 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	468c      	mov	ip, r1
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	9e08      	ldr	r6, [sp, #32]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14b      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4615      	mov	r5, r2
 8000a46:	d967      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0720 	rsb	r7, r2, #32
 8000a52:	fa01 f302 	lsl.w	r3, r1, r2
 8000a56:	fa20 f707 	lsr.w	r7, r0, r7
 8000a5a:	4095      	lsls	r5, r2
 8000a5c:	ea47 0c03 	orr.w	ip, r7, r3
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a66:	fbbc f7fe 	udiv	r7, ip, lr
 8000a6a:	fa1f f885 	uxth.w	r8, r5
 8000a6e:	fb0e c317 	mls	r3, lr, r7, ip
 8000a72:	fb07 f908 	mul.w	r9, r7, r8
 8000a76:	0c21      	lsrs	r1, r4, #16
 8000a78:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a7c:	4599      	cmp	r9, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18eb      	adds	r3, r5, r3
 8000a82:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000a86:	f080 811c 	bcs.w	8000cc2 <__udivmoddi4+0x28e>
 8000a8a:	4599      	cmp	r9, r3
 8000a8c:	f240 8119 	bls.w	8000cc2 <__udivmoddi4+0x28e>
 8000a90:	3f02      	subs	r7, #2
 8000a92:	442b      	add	r3, r5
 8000a94:	eba3 0309 	sub.w	r3, r3, r9
 8000a98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa0:	fb00 f108 	mul.w	r1, r0, r8
 8000aa4:	b2a4      	uxth	r4, r4
 8000aa6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aaa:	42a1      	cmp	r1, r4
 8000aac:	d909      	bls.n	8000ac2 <__udivmoddi4+0x8e>
 8000aae:	192c      	adds	r4, r5, r4
 8000ab0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ab4:	f080 8107 	bcs.w	8000cc6 <__udivmoddi4+0x292>
 8000ab8:	42a1      	cmp	r1, r4
 8000aba:	f240 8104 	bls.w	8000cc6 <__udivmoddi4+0x292>
 8000abe:	3802      	subs	r0, #2
 8000ac0:	442c      	add	r4, r5
 8000ac2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ac6:	2700      	movs	r7, #0
 8000ac8:	1a64      	subs	r4, r4, r1
 8000aca:	b11e      	cbz	r6, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	2300      	movs	r3, #0
 8000ace:	40d4      	lsrs	r4, r2
 8000ad0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad4:	4639      	mov	r1, r7
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d909      	bls.n	8000af2 <__udivmoddi4+0xbe>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80ec 	beq.w	8000cbc <__udivmoddi4+0x288>
 8000ae4:	2700      	movs	r7, #0
 8000ae6:	e9c6 0100 	strd	r0, r1, [r6]
 8000aea:	4638      	mov	r0, r7
 8000aec:	4639      	mov	r1, r7
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	fab3 f783 	clz	r7, r3
 8000af6:	2f00      	cmp	r7, #0
 8000af8:	d148      	bne.n	8000b8c <__udivmoddi4+0x158>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d302      	bcc.n	8000b04 <__udivmoddi4+0xd0>
 8000afe:	4282      	cmp	r2, r0
 8000b00:	f200 80fb 	bhi.w	8000cfa <__udivmoddi4+0x2c6>
 8000b04:	1a84      	subs	r4, r0, r2
 8000b06:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	469c      	mov	ip, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d0e0      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b12:	e9c6 4c00 	strd	r4, ip, [r6]
 8000b16:	e7dd      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b18:	b902      	cbnz	r2, 8000b1c <__udivmoddi4+0xe8>
 8000b1a:	deff      	udf	#255	; 0xff
 8000b1c:	fab2 f282 	clz	r2, r2
 8000b20:	2a00      	cmp	r2, #0
 8000b22:	f040 808f 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b26:	2701      	movs	r7, #1
 8000b28:	1b49      	subs	r1, r1, r5
 8000b2a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000b2e:	fa1f f985 	uxth.w	r9, r5
 8000b32:	fbb1 fef8 	udiv	lr, r1, r8
 8000b36:	fb08 111e 	mls	r1, r8, lr, r1
 8000b3a:	fb09 f00e 	mul.w	r0, r9, lr
 8000b3e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000b42:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000b46:	4298      	cmp	r0, r3
 8000b48:	d907      	bls.n	8000b5a <__udivmoddi4+0x126>
 8000b4a:	18eb      	adds	r3, r5, r3
 8000b4c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000b50:	d202      	bcs.n	8000b58 <__udivmoddi4+0x124>
 8000b52:	4298      	cmp	r0, r3
 8000b54:	f200 80cd 	bhi.w	8000cf2 <__udivmoddi4+0x2be>
 8000b58:	468e      	mov	lr, r1
 8000b5a:	1a1b      	subs	r3, r3, r0
 8000b5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b60:	fb08 3310 	mls	r3, r8, r0, r3
 8000b64:	fb09 f900 	mul.w	r9, r9, r0
 8000b68:	b2a4      	uxth	r4, r4
 8000b6a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b6e:	45a1      	cmp	r9, r4
 8000b70:	d907      	bls.n	8000b82 <__udivmoddi4+0x14e>
 8000b72:	192c      	adds	r4, r5, r4
 8000b74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b78:	d202      	bcs.n	8000b80 <__udivmoddi4+0x14c>
 8000b7a:	45a1      	cmp	r9, r4
 8000b7c:	f200 80b6 	bhi.w	8000cec <__udivmoddi4+0x2b8>
 8000b80:	4618      	mov	r0, r3
 8000b82:	eba4 0409 	sub.w	r4, r4, r9
 8000b86:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000b8a:	e79e      	b.n	8000aca <__udivmoddi4+0x96>
 8000b8c:	f1c7 0520 	rsb	r5, r7, #32
 8000b90:	40bb      	lsls	r3, r7
 8000b92:	fa22 fc05 	lsr.w	ip, r2, r5
 8000b96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b9a:	fa21 f405 	lsr.w	r4, r1, r5
 8000b9e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ba2:	fbb4 f9fe 	udiv	r9, r4, lr
 8000ba6:	fa1f f88c 	uxth.w	r8, ip
 8000baa:	fb0e 4419 	mls	r4, lr, r9, r4
 8000bae:	fa20 f305 	lsr.w	r3, r0, r5
 8000bb2:	40b9      	lsls	r1, r7
 8000bb4:	fb09 fa08 	mul.w	sl, r9, r8
 8000bb8:	4319      	orrs	r1, r3
 8000bba:	0c0b      	lsrs	r3, r1, #16
 8000bbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc0:	45a2      	cmp	sl, r4
 8000bc2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bc6:	fa00 f307 	lsl.w	r3, r0, r7
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bd4:	f080 8088 	bcs.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bd8:	45a2      	cmp	sl, r4
 8000bda:	f240 8085 	bls.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bde:	f1a9 0902 	sub.w	r9, r9, #2
 8000be2:	4464      	add	r4, ip
 8000be4:	eba4 040a 	sub.w	r4, r4, sl
 8000be8:	fbb4 f0fe 	udiv	r0, r4, lr
 8000bec:	fb0e 4410 	mls	r4, lr, r0, r4
 8000bf0:	fb00 fa08 	mul.w	sl, r0, r8
 8000bf4:	b289      	uxth	r1, r1
 8000bf6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000bfa:	45a2      	cmp	sl, r4
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x1dc>
 8000bfe:	eb1c 0404 	adds.w	r4, ip, r4
 8000c02:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c06:	d26b      	bcs.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c08:	45a2      	cmp	sl, r4
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	4464      	add	r4, ip
 8000c10:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c14:	fba0 8902 	umull	r8, r9, r0, r2
 8000c18:	eba4 040a 	sub.w	r4, r4, sl
 8000c1c:	454c      	cmp	r4, r9
 8000c1e:	4641      	mov	r1, r8
 8000c20:	46ce      	mov	lr, r9
 8000c22:	d354      	bcc.n	8000cce <__udivmoddi4+0x29a>
 8000c24:	d051      	beq.n	8000cca <__udivmoddi4+0x296>
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d069      	beq.n	8000cfe <__udivmoddi4+0x2ca>
 8000c2a:	1a5a      	subs	r2, r3, r1
 8000c2c:	eb64 040e 	sbc.w	r4, r4, lr
 8000c30:	fa04 f505 	lsl.w	r5, r4, r5
 8000c34:	fa22 f307 	lsr.w	r3, r2, r7
 8000c38:	40fc      	lsrs	r4, r7
 8000c3a:	431d      	orrs	r5, r3
 8000c3c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c40:	2700      	movs	r7, #0
 8000c42:	e747      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000c44:	4095      	lsls	r5, r2
 8000c46:	f1c2 0320 	rsb	r3, r2, #32
 8000c4a:	fa21 f003 	lsr.w	r0, r1, r3
 8000c4e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000c52:	fbb0 f7f8 	udiv	r7, r0, r8
 8000c56:	fa1f f985 	uxth.w	r9, r5
 8000c5a:	fb08 0017 	mls	r0, r8, r7, r0
 8000c5e:	fa24 f303 	lsr.w	r3, r4, r3
 8000c62:	4091      	lsls	r1, r2
 8000c64:	fb07 fc09 	mul.w	ip, r7, r9
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	0c19      	lsrs	r1, r3, #16
 8000c6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c70:	458c      	cmp	ip, r1
 8000c72:	fa04 f402 	lsl.w	r4, r4, r2
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x254>
 8000c78:	1869      	adds	r1, r5, r1
 8000c7a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c7e:	d231      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c80:	458c      	cmp	ip, r1
 8000c82:	d92f      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c84:	3f02      	subs	r7, #2
 8000c86:	4429      	add	r1, r5
 8000c88:	eba1 010c 	sub.w	r1, r1, ip
 8000c8c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000c90:	fb08 1c10 	mls	ip, r8, r0, r1
 8000c94:	fb00 fe09 	mul.w	lr, r0, r9
 8000c98:	b299      	uxth	r1, r3
 8000c9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c9e:	458e      	cmp	lr, r1
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x27e>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ca8:	d218      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000caa:	458e      	cmp	lr, r1
 8000cac:	d916      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000cae:	3802      	subs	r0, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	eba1 010e 	sub.w	r1, r1, lr
 8000cb6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cba:	e73a      	b.n	8000b32 <__udivmoddi4+0xfe>
 8000cbc:	4637      	mov	r7, r6
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	e708      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	e6e6      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	e6fb      	b.n	8000ac2 <__udivmoddi4+0x8e>
 8000cca:	4543      	cmp	r3, r8
 8000ccc:	d2ab      	bcs.n	8000c26 <__udivmoddi4+0x1f2>
 8000cce:	ebb8 0102 	subs.w	r1, r8, r2
 8000cd2:	eb69 020c 	sbc.w	r2, r9, ip
 8000cd6:	3801      	subs	r0, #1
 8000cd8:	4696      	mov	lr, r2
 8000cda:	e7a4      	b.n	8000c26 <__udivmoddi4+0x1f2>
 8000cdc:	4618      	mov	r0, r3
 8000cde:	e7e8      	b.n	8000cb2 <__udivmoddi4+0x27e>
 8000ce0:	4608      	mov	r0, r1
 8000ce2:	e795      	b.n	8000c10 <__udivmoddi4+0x1dc>
 8000ce4:	4607      	mov	r7, r0
 8000ce6:	e7cf      	b.n	8000c88 <__udivmoddi4+0x254>
 8000ce8:	4681      	mov	r9, r0
 8000cea:	e77b      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cec:	3802      	subs	r0, #2
 8000cee:	442c      	add	r4, r5
 8000cf0:	e747      	b.n	8000b82 <__udivmoddi4+0x14e>
 8000cf2:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	e72f      	b.n	8000b5a <__udivmoddi4+0x126>
 8000cfa:	4638      	mov	r0, r7
 8000cfc:	e707      	b.n	8000b0e <__udivmoddi4+0xda>
 8000cfe:	4637      	mov	r7, r6
 8000d00:	e6e8      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000d02:	bf00      	nop

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <canloop>:

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include "canfilter.h"
void canloop(CAN_HandleTypeDef *can1, CAN_HandleTypeDef *can2) {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	6039      	str	r1, [r7, #0]
	while (1) {
		// Receive Message from Can1 & send to CAN2:
		if (HAL_CAN_GetRxFifoFillLevel(can1, CAN_RX_FIFO0) != 0) {
 8000d12:	2100      	movs	r1, #0
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f001 f892 	bl	8001e3e <HAL_CAN_GetRxFifoFillLevel>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d01e      	beq.n	8000d5e <canloop+0x56>
			if (HAL_CAN_GetRxMessage(can1, CAN_RX_FIFO0, &RxHeader, RxData)
 8000d20:	4b22      	ldr	r3, [pc, #136]	; (8000dac <canloop+0xa4>)
 8000d22:	4a23      	ldr	r2, [pc, #140]	; (8000db0 <canloop+0xa8>)
 8000d24:	2100      	movs	r1, #0
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f000 ff78 	bl	8001c1c <HAL_CAN_GetRxMessage>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <canloop+0x2e>
					!= HAL_OK) {
				/* Reception Error */
				Error_Handler();
 8000d32:	f000 fa67 	bl	8001204 <Error_Handler>
			}
			copyData();
 8000d36:	f000 f843 	bl	8000dc0 <copyData>
			if (HAL_CAN_GetTxMailboxesFreeLevel(can2) != 0) {
 8000d3a:	6838      	ldr	r0, [r7, #0]
 8000d3c:	f000 ff3a 	bl	8001bb4 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d00b      	beq.n	8000d5e <canloop+0x56>
				if (HAL_CAN_AddTxMessage(can2, &TxHeader, TxData, &TxMailbox)
 8000d46:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <canloop+0xac>)
 8000d48:	4a1b      	ldr	r2, [pc, #108]	; (8000db8 <canloop+0xb0>)
 8000d4a:	491c      	ldr	r1, [pc, #112]	; (8000dbc <canloop+0xb4>)
 8000d4c:	6838      	ldr	r0, [r7, #0]
 8000d4e:	f000 fe57 	bl	8001a00 <HAL_CAN_AddTxMessage>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d002      	beq.n	8000d5e <canloop+0x56>
						!= HAL_OK) {
					/* Transmission request Error */
					HAL_CAN_ResetError(can2);
 8000d58:	6838      	ldr	r0, [r7, #0]
 8000d5a:	f001 f897 	bl	8001e8c <HAL_CAN_ResetError>
				}
			}

		}
		// Do same on Can2:
		if (HAL_CAN_GetRxFifoFillLevel(can2, CAN_RX_FIFO1) != 0) {
 8000d5e:	2101      	movs	r1, #1
 8000d60:	6838      	ldr	r0, [r7, #0]
 8000d62:	f001 f86c 	bl	8001e3e <HAL_CAN_GetRxFifoFillLevel>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d0d2      	beq.n	8000d12 <canloop+0xa>
			if (HAL_CAN_GetRxMessage(can2, CAN_RX_FIFO1, &RxHeader, RxData)
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <canloop+0xa4>)
 8000d6e:	4a10      	ldr	r2, [pc, #64]	; (8000db0 <canloop+0xa8>)
 8000d70:	2101      	movs	r1, #1
 8000d72:	6838      	ldr	r0, [r7, #0]
 8000d74:	f000 ff52 	bl	8001c1c <HAL_CAN_GetRxMessage>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <canloop+0x7a>
					!= HAL_OK) {
				/* Reception Error */
				Error_Handler();
 8000d7e:	f000 fa41 	bl	8001204 <Error_Handler>
			}
			copyData();
 8000d82:	f000 f81d 	bl	8000dc0 <copyData>
			if (HAL_CAN_GetTxMailboxesFreeLevel(can1) != 0) {
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f000 ff14 	bl	8001bb4 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0bf      	beq.n	8000d12 <canloop+0xa>
				if (HAL_CAN_AddTxMessage(can1, &TxHeader, TxData, &TxMailbox)
 8000d92:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <canloop+0xac>)
 8000d94:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <canloop+0xb0>)
 8000d96:	4909      	ldr	r1, [pc, #36]	; (8000dbc <canloop+0xb4>)
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f000 fe31 	bl	8001a00 <HAL_CAN_AddTxMessage>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d0b6      	beq.n	8000d12 <canloop+0xa>
						!= HAL_OK) {
					/* Transmission request Error */
					HAL_CAN_ResetError(can1);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f001 f871 	bl	8001e8c <HAL_CAN_ResetError>
		if (HAL_CAN_GetRxFifoFillLevel(can1, CAN_RX_FIFO0) != 0) {
 8000daa:	e7b2      	b.n	8000d12 <canloop+0xa>
 8000dac:	2000003c 	.word	0x2000003c
 8000db0:	2000005c 	.word	0x2000005c
 8000db4:	20000038 	.word	0x20000038
 8000db8:	20000030 	.word	0x20000030
 8000dbc:	20000044 	.word	0x20000044

08000dc0 <copyData>:

		}

	}
}
void copyData() {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
	memcpy(TxData, RxData, 8);
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <copyData+0x3c>)
 8000dc6:	4a0e      	ldr	r2, [pc, #56]	; (8000e00 <copyData+0x40>)
 8000dc8:	6811      	ldr	r1, [r2, #0]
 8000dca:	6852      	ldr	r2, [r2, #4]
 8000dcc:	6019      	str	r1, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
	TxHeader.DLC = RxHeader.DLC;
 8000dd0:	4b0c      	ldr	r3, [pc, #48]	; (8000e04 <copyData+0x44>)
 8000dd2:	691b      	ldr	r3, [r3, #16]
 8000dd4:	4a0c      	ldr	r2, [pc, #48]	; (8000e08 <copyData+0x48>)
 8000dd6:	6113      	str	r3, [r2, #16]
	TxHeader.StdId = RxHeader.StdId;
 8000dd8:	4b0a      	ldr	r3, [pc, #40]	; (8000e04 <copyData+0x44>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <copyData+0x48>)
 8000dde:	6013      	str	r3, [r2, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8000de0:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <copyData+0x48>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 8000de6:	4b08      	ldr	r3, [pc, #32]	; (8000e08 <copyData+0x48>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	609a      	str	r2, [r3, #8]
	filtercan(RxHeader.StdId);
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <copyData+0x44>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4618      	mov	r0, r3
 8000df2:	f000 f80d 	bl	8000e10 <filtercan>

}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000030 	.word	0x20000030
 8000e00:	2000003c 	.word	0x2000003c
 8000e04:	2000005c 	.word	0x2000005c
 8000e08:	20000044 	.word	0x20000044
 8000e0c:	00000000 	.word	0x00000000

08000e10 <filtercan>:
void filtercan(int airbid) {
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b087      	sub	sp, #28
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	if (airbid == 0x316) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f240 3216 	movw	r2, #790	; 0x316
 8000e1e:	4293      	cmp	r3, r2
 8000e20:	d123      	bne.n	8000e6a <filtercan+0x5a>
		uint8_t d1 = TxData[2];
 8000e22:	4b33      	ldr	r3, [pc, #204]	; (8000ef0 <filtercan+0xe0>)
 8000e24:	789b      	ldrb	r3, [r3, #2]
 8000e26:	74fb      	strb	r3, [r7, #19]
		uint8_t d2 = TxData[3];
 8000e28:	4b31      	ldr	r3, [pc, #196]	; (8000ef0 <filtercan+0xe0>)
 8000e2a:	78db      	ldrb	r3, [r3, #3]
 8000e2c:	74bb      	strb	r3, [r7, #18]
		rpm = ((uint16_t) d2 << 8) | d1;
 8000e2e:	7cbb      	ldrb	r3, [r7, #18]
 8000e30:	021b      	lsls	r3, r3, #8
 8000e32:	b21a      	sxth	r2, r3
 8000e34:	7cfb      	ldrb	r3, [r7, #19]
 8000e36:	b21b      	sxth	r3, r3
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	b21b      	sxth	r3, r3
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	4b2d      	ldr	r3, [pc, #180]	; (8000ef4 <filtercan+0xe4>)
 8000e40:	801a      	strh	r2, [r3, #0]
		rpm = rpm / 6.4;
 8000e42:	4b2c      	ldr	r3, [pc, #176]	; (8000ef4 <filtercan+0xe4>)
 8000e44:	881b      	ldrh	r3, [r3, #0]
 8000e46:	4618      	mov	r0, r3
 8000e48:	f7ff fb40 	bl	80004cc <__aeabi_i2d>
 8000e4c:	a326      	add	r3, pc, #152	; (adr r3, 8000ee8 <filtercan+0xd8>)
 8000e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e52:	f7ff fccf 	bl	80007f4 <__aeabi_ddiv>
 8000e56:	4603      	mov	r3, r0
 8000e58:	460c      	mov	r4, r1
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	4621      	mov	r1, r4
 8000e5e:	f7ff fdb1 	bl	80009c4 <__aeabi_d2uiz>
 8000e62:	4603      	mov	r3, r0
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	4b23      	ldr	r3, [pc, #140]	; (8000ef4 <filtercan+0xe4>)
 8000e68:	801a      	strh	r2, [r3, #0]
	}
	if(airbid == 0x545){
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	f240 5245 	movw	r2, #1349	; 0x545
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d132      	bne.n	8000eda <filtercan+0xca>
		//rpm = 7000;
		int number = rpm / 1000;
 8000e74:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <filtercan+0xe4>)
 8000e76:	881b      	ldrh	r3, [r3, #0]
 8000e78:	4a1f      	ldr	r2, [pc, #124]	; (8000ef8 <filtercan+0xe8>)
 8000e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e7e:	099b      	lsrs	r3, r3, #6
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	60fb      	str	r3, [r7, #12]
		number = number * 16;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	60fb      	str	r3, [r7, #12]

		for(int n = 4; n < 7; n++){
 8000e8a:	2304      	movs	r3, #4
 8000e8c:	617b      	str	r3, [r7, #20]
 8000e8e:	e021      	b.n	8000ed4 <filtercan+0xc4>
			int bit = (number >> n) & 1U;
 8000e90:	68fa      	ldr	r2, [r7, #12]
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	fa42 f303 	asr.w	r3, r2, r3
 8000e98:	f003 0301 	and.w	r3, r3, #1
 8000e9c:	60bb      	str	r3, [r7, #8]
			TxData[3] ^= (-bit ^ TxData[3]) & (1UL << n);
 8000e9e:	4b14      	ldr	r3, [pc, #80]	; (8000ef0 <filtercan+0xe0>)
 8000ea0:	78da      	ldrb	r2, [r3, #3]
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	b2db      	uxtb	r3, r3
 8000ea6:	425b      	negs	r3, r3
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	b259      	sxtb	r1, r3
 8000eac:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <filtercan+0xe0>)
 8000eae:	78db      	ldrb	r3, [r3, #3]
 8000eb0:	b25b      	sxtb	r3, r3
 8000eb2:	404b      	eors	r3, r1
 8000eb4:	b25b      	sxtb	r3, r3
 8000eb6:	b2d9      	uxtb	r1, r3
 8000eb8:	2001      	movs	r0, #1
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	fa00 f303 	lsl.w	r3, r0, r3
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	400b      	ands	r3, r1
 8000ec4:	b2db      	uxtb	r3, r3
 8000ec6:	4053      	eors	r3, r2
 8000ec8:	b2da      	uxtb	r2, r3
 8000eca:	4b09      	ldr	r3, [pc, #36]	; (8000ef0 <filtercan+0xe0>)
 8000ecc:	70da      	strb	r2, [r3, #3]
		for(int n = 4; n < 7; n++){
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	617b      	str	r3, [r7, #20]
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	2b06      	cmp	r3, #6
 8000ed8:	ddda      	ble.n	8000e90 <filtercan+0x80>

		//TxData[3] = TxData[3] + number;


	}
}
 8000eda:	bf00      	nop
 8000edc:	371c      	adds	r7, #28
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd90      	pop	{r4, r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	f3af 8000 	nop.w
 8000ee8:	9999999a 	.word	0x9999999a
 8000eec:	40199999 	.word	0x40199999
 8000ef0:	20000030 	.word	0x20000030
 8000ef4:	2000002c 	.word	0x2000002c
 8000ef8:	10624dd3 	.word	0x10624dd3

08000efc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f00:	f000 fafc 	bl	80014fc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f04:	f000 f812 	bl	8000f2c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f08:	f000 f924 	bl	8001154 <MX_GPIO_Init>
	MX_CAN1_Init();
 8000f0c:	f000 f862 	bl	8000fd4 <MX_CAN1_Init>
	MX_CAN2_Init();
 8000f10:	f000 f8c0 	bl	8001094 <MX_CAN2_Init>
	/* USER CODE BEGIN 2 */
	canloop(&hcan1, &hcan2);
 8000f14:	4903      	ldr	r1, [pc, #12]	; (8000f24 <main+0x28>)
 8000f16:	4804      	ldr	r0, [pc, #16]	; (8000f28 <main+0x2c>)
 8000f18:	f7ff fef6 	bl	8000d08 <canloop>
 8000f1c:	2300      	movs	r3, #0

	/* USER CODE END 2 */

	/* USER CODE END 3 */
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	20000078 	.word	0x20000078
 8000f28:	200000a0 	.word	0x200000a0

08000f2c <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b094      	sub	sp, #80	; 0x50
 8000f30:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000f32:	f107 0318 	add.w	r3, r7, #24
 8000f36:	2238      	movs	r2, #56	; 0x38
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f001 fef8 	bl	8002d30 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000f40:	1d3b      	adds	r3, r7, #4
 8000f42:	2200      	movs	r2, #0
 8000f44:	601a      	str	r2, [r3, #0]
 8000f46:	605a      	str	r2, [r3, #4]
 8000f48:	609a      	str	r2, [r3, #8]
 8000f4a:	60da      	str	r2, [r3, #12]
 8000f4c:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f56:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000f58:	2304      	movs	r3, #4
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8000f60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f64:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f66:	2302      	movs	r3, #2
 8000f68:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f6e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000f70:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000f74:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 8000f76:	2302      	movs	r3, #2
 8000f78:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8000f7a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f7e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8000f80:	2340      	movs	r3, #64	; 0x40
 8000f82:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000f84:	f107 0318 	add.w	r3, r7, #24
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f001 f9f7 	bl	800237c <HAL_RCC_OscConfig>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <SystemClock_Config+0x6c>
		Error_Handler();
 8000f94:	f000 f936 	bl	8001204 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000f98:	230f      	movs	r3, #15
 8000f9a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f9c:	2302      	movs	r3, #2
 8000f9e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fa4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2102      	movs	r1, #2
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f001 fcf8 	bl	80029a8 <HAL_RCC_ClockConfig>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <SystemClock_Config+0x96>
		Error_Handler();
 8000fbe:	f000 f921 	bl	8001204 <Error_Handler>
	}
	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 8000fc2:	4b03      	ldr	r3, [pc, #12]	; (8000fd0 <SystemClock_Config+0xa4>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	601a      	str	r2, [r3, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	3750      	adds	r7, #80	; 0x50
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	42420070 	.word	0x42420070

08000fd4 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */
	CAN_FilterTypeDef sFilterConfig;
	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8000fda:	4b2c      	ldr	r3, [pc, #176]	; (800108c <MX_CAN1_Init+0xb8>)
 8000fdc:	4a2c      	ldr	r2, [pc, #176]	; (8001090 <MX_CAN1_Init+0xbc>)
 8000fde:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 6;
 8000fe0:	4b2a      	ldr	r3, [pc, #168]	; (800108c <MX_CAN1_Init+0xb8>)
 8000fe2:	2206      	movs	r2, #6
 8000fe4:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000fe6:	4b29      	ldr	r3, [pc, #164]	; (800108c <MX_CAN1_Init+0xb8>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000fec:	4b27      	ldr	r3, [pc, #156]	; (800108c <MX_CAN1_Init+0xb8>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000ff2:	4b26      	ldr	r3, [pc, #152]	; (800108c <MX_CAN1_Init+0xb8>)
 8000ff4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8000ff8:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000ffa:	4b24      	ldr	r3, [pc, #144]	; (800108c <MX_CAN1_Init+0xb8>)
 8000ffc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001000:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001002:	4b22      	ldr	r3, [pc, #136]	; (800108c <MX_CAN1_Init+0xb8>)
 8001004:	2200      	movs	r2, #0
 8001006:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8001008:	4b20      	ldr	r3, [pc, #128]	; (800108c <MX_CAN1_Init+0xb8>)
 800100a:	2200      	movs	r2, #0
 800100c:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 800100e:	4b1f      	ldr	r3, [pc, #124]	; (800108c <MX_CAN1_Init+0xb8>)
 8001010:	2200      	movs	r2, #0
 8001012:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8001014:	4b1d      	ldr	r3, [pc, #116]	; (800108c <MX_CAN1_Init+0xb8>)
 8001016:	2200      	movs	r2, #0
 8001018:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800101a:	4b1c      	ldr	r3, [pc, #112]	; (800108c <MX_CAN1_Init+0xb8>)
 800101c:	2200      	movs	r2, #0
 800101e:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8001020:	4b1a      	ldr	r3, [pc, #104]	; (800108c <MX_CAN1_Init+0xb8>)
 8001022:	2200      	movs	r2, #0
 8001024:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8001026:	4819      	ldr	r0, [pc, #100]	; (800108c <MX_CAN1_Init+0xb8>)
 8001028:	f000 faca 	bl	80015c0 <HAL_CAN_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_CAN1_Init+0x62>
		Error_Handler();
 8001032:	f000 f8e7 	bl	8001204 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/*##-2- Configure the CAN Filter ###########################################*/

	sFilterConfig.FilterBank = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800103a:	2300      	movs	r3, #0
 800103c:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 800103e:	2301      	movs	r3, #1
 8001040:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8001042:	2300      	movs	r3, #0
 8001044:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800104a:	2300      	movs	r3, #0
 800104c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001052:	2300      	movs	r3, #0
 8001054:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001056:	2301      	movs	r3, #1
 8001058:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800105a:	230e      	movs	r3, #14
 800105c:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 800105e:	463b      	mov	r3, r7
 8001060:	4619      	mov	r1, r3
 8001062:	480a      	ldr	r0, [pc, #40]	; (800108c <MX_CAN1_Init+0xb8>)
 8001064:	f000 fba8 	bl	80017b8 <HAL_CAN_ConfigFilter>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <MX_CAN1_Init+0x9e>
		/* Filter configuration Error */
		Error_Handler();
 800106e:	f000 f8c9 	bl	8001204 <Error_Handler>
	}
	/*##-3- Start the CAN peripheral ###########################################*/
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8001072:	4806      	ldr	r0, [pc, #24]	; (800108c <MX_CAN1_Init+0xb8>)
 8001074:	f000 fc80 	bl	8001978 <HAL_CAN_Start>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_CAN1_Init+0xae>
		/* Start Error */
		Error_Handler();
 800107e:	f000 f8c1 	bl	8001204 <Error_Handler>
	}



}
 8001082:	bf00      	nop
 8001084:	3728      	adds	r7, #40	; 0x28
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	200000a0 	.word	0x200000a0
 8001090:	40006400 	.word	0x40006400

08001094 <MX_CAN2_Init>:
/**
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void) {
 8001094:	b580      	push	{r7, lr}
 8001096:	b08a      	sub	sp, #40	; 0x28
 8001098:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 800109a:	4b2c      	ldr	r3, [pc, #176]	; (800114c <MX_CAN2_Init+0xb8>)
 800109c:	4a2c      	ldr	r2, [pc, #176]	; (8001150 <MX_CAN2_Init+0xbc>)
 800109e:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 6;
 80010a0:	4b2a      	ldr	r3, [pc, #168]	; (800114c <MX_CAN2_Init+0xb8>)
 80010a2:	2206      	movs	r2, #6
 80010a4:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 80010a6:	4b29      	ldr	r3, [pc, #164]	; (800114c <MX_CAN2_Init+0xb8>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010ac:	4b27      	ldr	r3, [pc, #156]	; (800114c <MX_CAN2_Init+0xb8>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_8TQ;
 80010b2:	4b26      	ldr	r3, [pc, #152]	; (800114c <MX_CAN2_Init+0xb8>)
 80010b4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80010b8:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80010ba:	4b24      	ldr	r3, [pc, #144]	; (800114c <MX_CAN2_Init+0xb8>)
 80010bc:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80010c0:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 80010c2:	4b22      	ldr	r3, [pc, #136]	; (800114c <MX_CAN2_Init+0xb8>)
 80010c4:	2200      	movs	r2, #0
 80010c6:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 80010c8:	4b20      	ldr	r3, [pc, #128]	; (800114c <MX_CAN2_Init+0xb8>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 80010ce:	4b1f      	ldr	r3, [pc, #124]	; (800114c <MX_CAN2_Init+0xb8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_CAN2_Init+0xb8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <MX_CAN2_Init+0xb8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_CAN2_Init+0xb8>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 80010e6:	4819      	ldr	r0, [pc, #100]	; (800114c <MX_CAN2_Init+0xb8>)
 80010e8:	f000 fa6a 	bl	80015c0 <HAL_CAN_Init>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_CAN2_Init+0x62>
		Error_Handler();
 80010f2:	f000 f887 	bl	8001204 <Error_Handler>
	}

	sFilterConfig.FilterBank = 15;
 80010f6:	230f      	movs	r3, #15
 80010f8:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80010fe:	2301      	movs	r3, #1
 8001100:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8001102:	2300      	movs	r3, #0
 8001104:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 8001106:	2300      	movs	r3, #0
 8001108:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8001112:	2301      	movs	r3, #1
 8001114:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 8001116:	2301      	movs	r3, #1
 8001118:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 15;
 800111a:	230f      	movs	r3, #15
 800111c:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 800111e:	463b      	mov	r3, r7
 8001120:	4619      	mov	r1, r3
 8001122:	480a      	ldr	r0, [pc, #40]	; (800114c <MX_CAN2_Init+0xb8>)
 8001124:	f000 fb48 	bl	80017b8 <HAL_CAN_ConfigFilter>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_CAN2_Init+0x9e>
		/* Filter configuration Error */
		Error_Handler();
 800112e:	f000 f869 	bl	8001204 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */
	if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 8001132:	4806      	ldr	r0, [pc, #24]	; (800114c <MX_CAN2_Init+0xb8>)
 8001134:	f000 fc20 	bl	8001978 <HAL_CAN_Start>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_CAN2_Init+0xae>
		/* Start Error */
		Error_Handler();
 800113e:	f000 f861 	bl	8001204 <Error_Handler>
	}
	/* USER CODE END CAN2_Init 2 */

}
 8001142:	bf00      	nop
 8001144:	3728      	adds	r7, #40	; 0x28
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000078 	.word	0x20000078
 8001150:	40006800 	.word	0x40006800

08001154 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001154:	b580      	push	{r7, lr}
 8001156:	b088      	sub	sp, #32
 8001158:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	2200      	movs	r2, #0
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	605a      	str	r2, [r3, #4]
 8001164:	609a      	str	r2, [r3, #8]
 8001166:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <MX_GPIO_Init+0xa8>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	4a23      	ldr	r2, [pc, #140]	; (80011fc <MX_GPIO_Init+0xa8>)
 800116e:	f043 0320 	orr.w	r3, r3, #32
 8001172:	6193      	str	r3, [r2, #24]
 8001174:	4b21      	ldr	r3, [pc, #132]	; (80011fc <MX_GPIO_Init+0xa8>)
 8001176:	699b      	ldr	r3, [r3, #24]
 8001178:	f003 0320 	and.w	r3, r3, #32
 800117c:	60fb      	str	r3, [r7, #12]
 800117e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001180:	4b1e      	ldr	r3, [pc, #120]	; (80011fc <MX_GPIO_Init+0xa8>)
 8001182:	699b      	ldr	r3, [r3, #24]
 8001184:	4a1d      	ldr	r2, [pc, #116]	; (80011fc <MX_GPIO_Init+0xa8>)
 8001186:	f043 0304 	orr.w	r3, r3, #4
 800118a:	6193      	str	r3, [r2, #24]
 800118c:	4b1b      	ldr	r3, [pc, #108]	; (80011fc <MX_GPIO_Init+0xa8>)
 800118e:	699b      	ldr	r3, [r3, #24]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	60bb      	str	r3, [r7, #8]
 8001196:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001198:	4b18      	ldr	r3, [pc, #96]	; (80011fc <MX_GPIO_Init+0xa8>)
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	4a17      	ldr	r2, [pc, #92]	; (80011fc <MX_GPIO_Init+0xa8>)
 800119e:	f043 0310 	orr.w	r3, r3, #16
 80011a2:	6193      	str	r3, [r2, #24]
 80011a4:	4b15      	ldr	r3, [pc, #84]	; (80011fc <MX_GPIO_Init+0xa8>)
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0310 	and.w	r3, r3, #16
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <MX_GPIO_Init+0xa8>)
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	4a11      	ldr	r2, [pc, #68]	; (80011fc <MX_GPIO_Init+0xa8>)
 80011b6:	f043 0308 	orr.w	r3, r3, #8
 80011ba:	6193      	str	r3, [r2, #24]
 80011bc:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <MX_GPIO_Init+0xa8>)
 80011be:	699b      	ldr	r3, [r3, #24]
 80011c0:	f003 0308 	and.w	r3, r3, #8
 80011c4:	603b      	str	r3, [r7, #0]
 80011c6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80011c8:	2201      	movs	r2, #1
 80011ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011ce:	480c      	ldr	r0, [pc, #48]	; (8001200 <MX_GPIO_Init+0xac>)
 80011d0:	f001 f8bc 	bl	800234c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011d8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011da:	2301      	movs	r3, #1
 80011dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2302      	movs	r3, #2
 80011e4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011e6:	f107 0310 	add.w	r3, r7, #16
 80011ea:	4619      	mov	r1, r3
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <MX_GPIO_Init+0xac>)
 80011ee:	f000 ff53 	bl	8002098 <HAL_GPIO_Init>

}
 80011f2:	bf00      	nop
 80011f4:	3720      	adds	r7, #32
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000
 8001200:	40011000 	.word	0x40011000

08001204 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
	//HAL_Delay(300);
	/* USER CODE BEGIN 3 */
	//}
	/* USER CODE END Error_Handler_Debug */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	bc80      	pop	{r7}
 800120e:	4770      	bx	lr

08001210 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <HAL_MspInit+0x60>)
 8001218:	699b      	ldr	r3, [r3, #24]
 800121a:	4a15      	ldr	r2, [pc, #84]	; (8001270 <HAL_MspInit+0x60>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6193      	str	r3, [r2, #24]
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <HAL_MspInit+0x60>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60bb      	str	r3, [r7, #8]
 800122c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800122e:	4b10      	ldr	r3, [pc, #64]	; (8001270 <HAL_MspInit+0x60>)
 8001230:	69db      	ldr	r3, [r3, #28]
 8001232:	4a0f      	ldr	r2, [pc, #60]	; (8001270 <HAL_MspInit+0x60>)
 8001234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001238:	61d3      	str	r3, [r2, #28]
 800123a:	4b0d      	ldr	r3, [pc, #52]	; (8001270 <HAL_MspInit+0x60>)
 800123c:	69db      	ldr	r3, [r3, #28]
 800123e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001242:	607b      	str	r3, [r7, #4]
 8001244:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001246:	2007      	movs	r0, #7
 8001248:	f000 fef2 	bl	8002030 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800124c:	4b09      	ldr	r3, [pc, #36]	; (8001274 <HAL_MspInit+0x64>)
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	60fb      	str	r3, [r7, #12]
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	4a04      	ldr	r2, [pc, #16]	; (8001274 <HAL_MspInit+0x64>)
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001268:	bf00      	nop
 800126a:	3710      	adds	r7, #16
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40021000 	.word	0x40021000
 8001274:	40010000 	.word	0x40010000

08001278 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08c      	sub	sp, #48	; 0x30
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 031c 	add.w	r3, r7, #28
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a4d      	ldr	r2, [pc, #308]	; (80013c8 <HAL_CAN_MspInit+0x150>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d13b      	bne.n	8001310 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001298:	4b4c      	ldr	r3, [pc, #304]	; (80013cc <HAL_CAN_MspInit+0x154>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	3301      	adds	r3, #1
 800129e:	4a4b      	ldr	r2, [pc, #300]	; (80013cc <HAL_CAN_MspInit+0x154>)
 80012a0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80012a2:	4b4a      	ldr	r3, [pc, #296]	; (80013cc <HAL_CAN_MspInit+0x154>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b01      	cmp	r3, #1
 80012a8:	d10b      	bne.n	80012c2 <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80012aa:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <HAL_CAN_MspInit+0x158>)
 80012ac:	69db      	ldr	r3, [r3, #28]
 80012ae:	4a48      	ldr	r2, [pc, #288]	; (80013d0 <HAL_CAN_MspInit+0x158>)
 80012b0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012b4:	61d3      	str	r3, [r2, #28]
 80012b6:	4b46      	ldr	r3, [pc, #280]	; (80013d0 <HAL_CAN_MspInit+0x158>)
 80012b8:	69db      	ldr	r3, [r3, #28]
 80012ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012be:	61bb      	str	r3, [r7, #24]
 80012c0:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b43      	ldr	r3, [pc, #268]	; (80013d0 <HAL_CAN_MspInit+0x158>)
 80012c4:	699b      	ldr	r3, [r3, #24]
 80012c6:	4a42      	ldr	r2, [pc, #264]	; (80013d0 <HAL_CAN_MspInit+0x158>)
 80012c8:	f043 0304 	orr.w	r3, r3, #4
 80012cc:	6193      	str	r3, [r2, #24]
 80012ce:	4b40      	ldr	r3, [pc, #256]	; (80013d0 <HAL_CAN_MspInit+0x158>)
 80012d0:	699b      	ldr	r3, [r3, #24]
 80012d2:	f003 0304 	and.w	r3, r3, #4
 80012d6:	617b      	str	r3, [r7, #20]
 80012d8:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e0:	2300      	movs	r3, #0
 80012e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012e8:	f107 031c 	add.w	r3, r7, #28
 80012ec:	4619      	mov	r1, r3
 80012ee:	4839      	ldr	r0, [pc, #228]	; (80013d4 <HAL_CAN_MspInit+0x15c>)
 80012f0:	f000 fed2 	bl	8002098 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80012f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fa:	2302      	movs	r3, #2
 80012fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012fe:	2303      	movs	r3, #3
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001302:	f107 031c 	add.w	r3, r7, #28
 8001306:	4619      	mov	r1, r3
 8001308:	4832      	ldr	r0, [pc, #200]	; (80013d4 <HAL_CAN_MspInit+0x15c>)
 800130a:	f000 fec5 	bl	8002098 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800130e:	e057      	b.n	80013c0 <HAL_CAN_MspInit+0x148>
  else if(hcan->Instance==CAN2)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a30      	ldr	r2, [pc, #192]	; (80013d8 <HAL_CAN_MspInit+0x160>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d152      	bne.n	80013c0 <HAL_CAN_MspInit+0x148>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <HAL_CAN_MspInit+0x158>)
 800131c:	69db      	ldr	r3, [r3, #28]
 800131e:	4a2c      	ldr	r2, [pc, #176]	; (80013d0 <HAL_CAN_MspInit+0x158>)
 8001320:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001324:	61d3      	str	r3, [r2, #28]
 8001326:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <HAL_CAN_MspInit+0x158>)
 8001328:	69db      	ldr	r3, [r3, #28]
 800132a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001332:	4b26      	ldr	r3, [pc, #152]	; (80013cc <HAL_CAN_MspInit+0x154>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	3301      	adds	r3, #1
 8001338:	4a24      	ldr	r2, [pc, #144]	; (80013cc <HAL_CAN_MspInit+0x154>)
 800133a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800133c:	4b23      	ldr	r3, [pc, #140]	; (80013cc <HAL_CAN_MspInit+0x154>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d10b      	bne.n	800135c <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001344:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <HAL_CAN_MspInit+0x158>)
 8001346:	69db      	ldr	r3, [r3, #28]
 8001348:	4a21      	ldr	r2, [pc, #132]	; (80013d0 <HAL_CAN_MspInit+0x158>)
 800134a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800134e:	61d3      	str	r3, [r2, #28]
 8001350:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <HAL_CAN_MspInit+0x158>)
 8001352:	69db      	ldr	r3, [r3, #28]
 8001354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <HAL_CAN_MspInit+0x158>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a1b      	ldr	r2, [pc, #108]	; (80013d0 <HAL_CAN_MspInit+0x158>)
 8001362:	f043 0308 	orr.w	r3, r3, #8
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b19      	ldr	r3, [pc, #100]	; (80013d0 <HAL_CAN_MspInit+0x158>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0308 	and.w	r3, r3, #8
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001374:	2320      	movs	r3, #32
 8001376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	4815      	ldr	r0, [pc, #84]	; (80013dc <HAL_CAN_MspInit+0x164>)
 8001388:	f000 fe86 	bl	8002098 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800138c:	2340      	movs	r3, #64	; 0x40
 800138e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4619      	mov	r1, r3
 800139e:	480f      	ldr	r0, [pc, #60]	; (80013dc <HAL_CAN_MspInit+0x164>)
 80013a0:	f000 fe7a 	bl	8002098 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_CAN2_ENABLE();
 80013a4:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <HAL_CAN_MspInit+0x168>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ac:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ba:	4a09      	ldr	r2, [pc, #36]	; (80013e0 <HAL_CAN_MspInit+0x168>)
 80013bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013be:	6053      	str	r3, [r2, #4]
}
 80013c0:	bf00      	nop
 80013c2:	3730      	adds	r7, #48	; 0x30
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40006400 	.word	0x40006400
 80013cc:	20000028 	.word	0x20000028
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40010800 	.word	0x40010800
 80013d8:	40006800 	.word	0x40006800
 80013dc:	40010c00 	.word	0x40010c00
 80013e0:	40010000 	.word	0x40010000

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80013e8:	bf00      	nop
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <HardFault_Handler+0x4>

080013f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <MemManage_Handler+0x4>

080013fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <BusFault_Handler+0x4>

08001402 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001406:	e7fe      	b.n	8001406 <UsageFault_Handler+0x4>

08001408 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	bc80      	pop	{r7}
 8001412:	4770      	bx	lr

08001414 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001424:	bf00      	nop
 8001426:	46bd      	mov	sp, r7
 8001428:	bc80      	pop	{r7}
 800142a:	4770      	bx	lr

0800142c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001430:	f000 f8aa 	bl	8001588 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	bd80      	pop	{r7, pc}

08001438 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800143c:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <SystemInit+0x70>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a19      	ldr	r2, [pc, #100]	; (80014a8 <SystemInit+0x70>)
 8001442:	f043 0301 	orr.w	r3, r3, #1
 8001446:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8001448:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <SystemInit+0x70>)
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	4916      	ldr	r1, [pc, #88]	; (80014a8 <SystemInit+0x70>)
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <SystemInit+0x74>)
 8001450:	4013      	ands	r3, r2
 8001452:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001454:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <SystemInit+0x70>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <SystemInit+0x70>)
 800145a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800145e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001462:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001464:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <SystemInit+0x70>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a0f      	ldr	r2, [pc, #60]	; (80014a8 <SystemInit+0x70>)
 800146a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800146e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <SystemInit+0x70>)
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	4a0c      	ldr	r2, [pc, #48]	; (80014a8 <SystemInit+0x70>)
 8001476:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800147a:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <SystemInit+0x70>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a09      	ldr	r2, [pc, #36]	; (80014a8 <SystemInit+0x70>)
 8001482:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8001486:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <SystemInit+0x70>)
 800148a:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 800148e:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8001490:	4b05      	ldr	r3, [pc, #20]	; (80014a8 <SystemInit+0x70>)
 8001492:	2200      	movs	r2, #0
 8001494:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <SystemInit+0x78>)
 8001498:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800149c:	609a      	str	r2, [r3, #8]
#endif 
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bc80      	pop	{r7}
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40021000 	.word	0x40021000
 80014ac:	f0ff0000 	.word	0xf0ff0000
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80014b4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80014b6:	e003      	b.n	80014c0 <LoopCopyDataInit>

080014b8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80014b8:	4b0a      	ldr	r3, [pc, #40]	; (80014e4 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 80014ba:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80014bc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80014be:	3104      	adds	r1, #4

080014c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80014c0:	4809      	ldr	r0, [pc, #36]	; (80014e8 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 80014c2:	4b0a      	ldr	r3, [pc, #40]	; (80014ec <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 80014c4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80014c6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80014c8:	d3f6      	bcc.n	80014b8 <CopyDataInit>
  ldr r2, =_sbss
 80014ca:	4a09      	ldr	r2, [pc, #36]	; (80014f0 <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 80014cc:	e002      	b.n	80014d4 <LoopFillZerobss>

080014ce <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  str r3, [r2], #4
 80014d0:	f842 3b04 	str.w	r3, [r2], #4

080014d4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80014d4:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <LoopFillZerobss+0x20>)
  cmp r2, r3
 80014d6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014d8:	d3f9      	bcc.n	80014ce <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014da:	f7ff ffad 	bl	8001438 <SystemInit>
/* Call the application's entry point.*/
  bl main
 80014de:	f7ff fd0d 	bl	8000efc <main>
  bx lr
 80014e2:	4770      	bx	lr
  ldr r3, =_sidata
 80014e4:	08002d98 	.word	0x08002d98
  ldr r0, =_sdata
 80014e8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014ec:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 80014f0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 80014f4:	200000cc 	.word	0x200000cc

080014f8 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014f8:	e7fe      	b.n	80014f8 <ADC1_2_IRQHandler>
	...

080014fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001500:	4b08      	ldr	r3, [pc, #32]	; (8001524 <HAL_Init+0x28>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a07      	ldr	r2, [pc, #28]	; (8001524 <HAL_Init+0x28>)
 8001506:	f043 0310 	orr.w	r3, r3, #16
 800150a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800150c:	2003      	movs	r0, #3
 800150e:	f000 fd8f 	bl	8002030 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001512:	2000      	movs	r0, #0
 8001514:	f000 f808 	bl	8001528 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001518:	f7ff fe7a 	bl	8001210 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40022000 	.word	0x40022000

08001528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001530:	4b12      	ldr	r3, [pc, #72]	; (800157c <HAL_InitTick+0x54>)
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <HAL_InitTick+0x58>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	4619      	mov	r1, r3
 800153a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800153e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001542:	fbb2 f3f3 	udiv	r3, r2, r3
 8001546:	4618      	mov	r0, r3
 8001548:	f000 fd99 	bl	800207e <HAL_SYSTICK_Config>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e00e      	b.n	8001574 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b0f      	cmp	r3, #15
 800155a:	d80a      	bhi.n	8001572 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800155c:	2200      	movs	r2, #0
 800155e:	6879      	ldr	r1, [r7, #4]
 8001560:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001564:	f000 fd6f 	bl	8002046 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001568:	4a06      	ldr	r2, [pc, #24]	; (8001584 <HAL_InitTick+0x5c>)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800156e:	2300      	movs	r3, #0
 8001570:	e000      	b.n	8001574 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
}
 8001574:	4618      	mov	r0, r3
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000000 	.word	0x20000000
 8001580:	20000008 	.word	0x20000008
 8001584:	20000004 	.word	0x20000004

08001588 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <HAL_IncTick+0x1c>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	461a      	mov	r2, r3
 8001592:	4b05      	ldr	r3, [pc, #20]	; (80015a8 <HAL_IncTick+0x20>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4413      	add	r3, r2
 8001598:	4a03      	ldr	r2, [pc, #12]	; (80015a8 <HAL_IncTick+0x20>)
 800159a:	6013      	str	r3, [r2, #0]
}
 800159c:	bf00      	nop
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	20000008 	.word	0x20000008
 80015a8:	200000c8 	.word	0x200000c8

080015ac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return uwTick;
 80015b0:	4b02      	ldr	r3, [pc, #8]	; (80015bc <HAL_GetTick+0x10>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bc80      	pop	{r7}
 80015ba:	4770      	bx	lr
 80015bc:	200000c8 	.word	0x200000c8

080015c0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e0ed      	b.n	80017ae <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d102      	bne.n	80015e4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f7ff fe4a 	bl	8001278 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	681a      	ldr	r2, [r3, #0]
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f022 0202 	bic.w	r2, r2, #2
 80015f2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015f4:	f7ff ffda 	bl	80015ac <HAL_GetTick>
 80015f8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80015fa:	e012      	b.n	8001622 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80015fc:	f7ff ffd6 	bl	80015ac <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b0a      	cmp	r3, #10
 8001608:	d90b      	bls.n	8001622 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2205      	movs	r2, #5
 800161a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800161e:	2301      	movs	r3, #1
 8001620:	e0c5      	b.n	80017ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	685b      	ldr	r3, [r3, #4]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d1e5      	bne.n	80015fc <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 0201 	orr.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001640:	f7ff ffb4 	bl	80015ac <HAL_GetTick>
 8001644:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001646:	e012      	b.n	800166e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001648:	f7ff ffb0 	bl	80015ac <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b0a      	cmp	r3, #10
 8001654:	d90b      	bls.n	800166e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800165a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2205      	movs	r2, #5
 8001666:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e09f      	b.n	80017ae <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	2b00      	cmp	r3, #0
 800167a:	d0e5      	beq.n	8001648 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	7e1b      	ldrb	r3, [r3, #24]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d108      	bne.n	8001696 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	e007      	b.n	80016a6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016a4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	7e5b      	ldrb	r3, [r3, #25]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d108      	bne.n	80016c0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016bc:	601a      	str	r2, [r3, #0]
 80016be:	e007      	b.n	80016d0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016ce:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	7e9b      	ldrb	r3, [r3, #26]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d108      	bne.n	80016ea <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	681a      	ldr	r2, [r3, #0]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f042 0220 	orr.w	r2, r2, #32
 80016e6:	601a      	str	r2, [r3, #0]
 80016e8:	e007      	b.n	80016fa <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0220 	bic.w	r2, r2, #32
 80016f8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	7edb      	ldrb	r3, [r3, #27]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d108      	bne.n	8001714 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0210 	bic.w	r2, r2, #16
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	e007      	b.n	8001724 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f042 0210 	orr.w	r2, r2, #16
 8001722:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	7f1b      	ldrb	r3, [r3, #28]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d108      	bne.n	800173e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0208 	orr.w	r2, r2, #8
 800173a:	601a      	str	r2, [r3, #0]
 800173c:	e007      	b.n	800174e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0208 	bic.w	r2, r2, #8
 800174c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	7f5b      	ldrb	r3, [r3, #29]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d108      	bne.n	8001768 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f042 0204 	orr.w	r2, r2, #4
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	e007      	b.n	8001778 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	f022 0204 	bic.w	r2, r2, #4
 8001776:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	431a      	orrs	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	431a      	orrs	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	695b      	ldr	r3, [r3, #20]
 800178c:	ea42 0103 	orr.w	r1, r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	1e5a      	subs	r2, r3, #1
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	430a      	orrs	r2, r1
 800179c:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2201      	movs	r2, #1
 80017a8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b087      	sub	sp, #28
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017ce:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80017d0:	7cfb      	ldrb	r3, [r7, #19]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d003      	beq.n	80017de <HAL_CAN_ConfigFilter+0x26>
 80017d6:	7cfb      	ldrb	r3, [r7, #19]
 80017d8:	2b02      	cmp	r3, #2
 80017da:	f040 80be 	bne.w	800195a <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80017de:	4b65      	ldr	r3, [pc, #404]	; (8001974 <HAL_CAN_ConfigFilter+0x1bc>)
 80017e0:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017e8:	f043 0201 	orr.w	r2, r3, #1
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80017f2:	697b      	ldr	r3, [r7, #20]
 80017f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80017f8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180c:	021b      	lsls	r3, r3, #8
 800180e:	431a      	orrs	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	695b      	ldr	r3, [r3, #20]
 800181a:	f003 031f 	and.w	r3, r3, #31
 800181e:	2201      	movs	r2, #1
 8001820:	fa02 f303 	lsl.w	r3, r2, r3
 8001824:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	43db      	mvns	r3, r3
 8001830:	401a      	ands	r2, r3
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	69db      	ldr	r3, [r3, #28]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d123      	bne.n	8001888 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	43db      	mvns	r3, r3
 800184a:	401a      	ands	r2, r3
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800185e:	683a      	ldr	r2, [r7, #0]
 8001860:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001862:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3248      	adds	r2, #72	; 0x48
 8001868:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800187c:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800187e:	6979      	ldr	r1, [r7, #20]
 8001880:	3348      	adds	r3, #72	; 0x48
 8001882:	00db      	lsls	r3, r3, #3
 8001884:	440b      	add	r3, r1
 8001886:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	69db      	ldr	r3, [r3, #28]
 800188c:	2b01      	cmp	r3, #1
 800188e:	d122      	bne.n	80018d6 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	431a      	orrs	r2, r3
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80018b0:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3248      	adds	r2, #72	; 0x48
 80018b6:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	68db      	ldr	r3, [r3, #12]
 80018c4:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80018ca:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80018cc:	6979      	ldr	r1, [r7, #20]
 80018ce:	3348      	adds	r3, #72	; 0x48
 80018d0:	00db      	lsls	r3, r3, #3
 80018d2:	440b      	add	r3, r1
 80018d4:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	699b      	ldr	r3, [r3, #24]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d109      	bne.n	80018f2 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	43db      	mvns	r3, r3
 80018e8:	401a      	ands	r2, r3
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80018f0:	e007      	b.n	8001902 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	431a      	orrs	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	691b      	ldr	r3, [r3, #16]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d109      	bne.n	800191e <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	43db      	mvns	r3, r3
 8001914:	401a      	ands	r2, r3
 8001916:	697b      	ldr	r3, [r7, #20]
 8001918:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800191c:	e007      	b.n	800192e <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	431a      	orrs	r2, r3
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	6a1b      	ldr	r3, [r3, #32]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d107      	bne.n	8001946 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	431a      	orrs	r2, r3
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800194c:	f023 0201 	bic.w	r2, r3, #1
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001956:	2300      	movs	r3, #0
 8001958:	e006      	b.n	8001968 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800195e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
  }
}
 8001968:	4618      	mov	r0, r3
 800196a:	371c      	adds	r7, #28
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	40006400 	.word	0x40006400

08001978 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	2b01      	cmp	r3, #1
 800198a:	d12e      	bne.n	80019ea <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2202      	movs	r2, #2
 8001990:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f022 0201 	bic.w	r2, r2, #1
 80019a2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80019a4:	f7ff fe02 	bl	80015ac <HAL_GetTick>
 80019a8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019aa:	e012      	b.n	80019d2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80019ac:	f7ff fdfe 	bl	80015ac <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b0a      	cmp	r3, #10
 80019b8:	d90b      	bls.n	80019d2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019be:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2205      	movs	r2, #5
 80019ca:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80019ce:	2301      	movs	r3, #1
 80019d0:	e012      	b.n	80019f8 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1e5      	bne.n	80019ac <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80019e6:	2300      	movs	r3, #0
 80019e8:	e006      	b.n	80019f8 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ee:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
  }
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}

08001a00 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b089      	sub	sp, #36	; 0x24
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	607a      	str	r2, [r7, #4]
 8001a0c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a14:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001a1e:	7ffb      	ldrb	r3, [r7, #31]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d003      	beq.n	8001a2c <HAL_CAN_AddTxMessage+0x2c>
 8001a24:	7ffb      	ldrb	r3, [r7, #31]
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	f040 80b8 	bne.w	8001b9c <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a2c:	69bb      	ldr	r3, [r7, #24]
 8001a2e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d10a      	bne.n	8001a4c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a36:	69bb      	ldr	r3, [r7, #24]
 8001a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d105      	bne.n	8001a4c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 80a0 	beq.w	8001b8c <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001a4c:	69bb      	ldr	r3, [r7, #24]
 8001a4e:	0e1b      	lsrs	r3, r3, #24
 8001a50:	f003 0303 	and.w	r3, r3, #3
 8001a54:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d907      	bls.n	8001a6c <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a60:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e09e      	b.n	8001baa <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001a6c:	2201      	movs	r2, #1
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	409a      	lsls	r2, r3
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d10d      	bne.n	8001a9a <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001a88:	68f9      	ldr	r1, [r7, #12]
 8001a8a:	6809      	ldr	r1, [r1, #0]
 8001a8c:	431a      	orrs	r2, r3
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	3318      	adds	r3, #24
 8001a92:	011b      	lsls	r3, r3, #4
 8001a94:	440b      	add	r3, r1
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	e00f      	b.n	8001aba <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001aa4:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001aaa:	68f9      	ldr	r1, [r7, #12]
 8001aac:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001aae:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	3318      	adds	r3, #24
 8001ab4:	011b      	lsls	r3, r3, #4
 8001ab6:	440b      	add	r3, r1
 8001ab8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6819      	ldr	r1, [r3, #0]
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	691a      	ldr	r2, [r3, #16]
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	3318      	adds	r3, #24
 8001ac6:	011b      	lsls	r3, r3, #4
 8001ac8:	440b      	add	r3, r1
 8001aca:	3304      	adds	r3, #4
 8001acc:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ace:	68bb      	ldr	r3, [r7, #8]
 8001ad0:	7d1b      	ldrb	r3, [r3, #20]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d111      	bne.n	8001afa <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	3318      	adds	r3, #24
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	4413      	add	r3, r2
 8001ae2:	3304      	adds	r3, #4
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	6811      	ldr	r1, [r2, #0]
 8001aea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	3318      	adds	r3, #24
 8001af2:	011b      	lsls	r3, r3, #4
 8001af4:	440b      	add	r3, r1
 8001af6:	3304      	adds	r3, #4
 8001af8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	3307      	adds	r3, #7
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	061a      	lsls	r2, r3, #24
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	3306      	adds	r3, #6
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	041b      	lsls	r3, r3, #16
 8001b0a:	431a      	orrs	r2, r3
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	3305      	adds	r3, #5
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	4313      	orrs	r3, r2
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	3204      	adds	r2, #4
 8001b1a:	7812      	ldrb	r2, [r2, #0]
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	6811      	ldr	r1, [r2, #0]
 8001b22:	ea43 0200 	orr.w	r2, r3, r0
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	011b      	lsls	r3, r3, #4
 8001b2a:	440b      	add	r3, r1
 8001b2c:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001b30:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3303      	adds	r3, #3
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	061a      	lsls	r2, r3, #24
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	3302      	adds	r3, #2
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	041b      	lsls	r3, r3, #16
 8001b42:	431a      	orrs	r2, r3
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	3301      	adds	r3, #1
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	021b      	lsls	r3, r3, #8
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	687a      	ldr	r2, [r7, #4]
 8001b50:	7812      	ldrb	r2, [r2, #0]
 8001b52:	4610      	mov	r0, r2
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	6811      	ldr	r1, [r2, #0]
 8001b58:	ea43 0200 	orr.w	r2, r3, r0
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	011b      	lsls	r3, r3, #4
 8001b60:	440b      	add	r3, r1
 8001b62:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001b66:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	3318      	adds	r3, #24
 8001b70:	011b      	lsls	r3, r3, #4
 8001b72:	4413      	add	r3, r2
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68fa      	ldr	r2, [r7, #12]
 8001b78:	6811      	ldr	r1, [r2, #0]
 8001b7a:	f043 0201 	orr.w	r2, r3, #1
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	3318      	adds	r3, #24
 8001b82:	011b      	lsls	r3, r3, #4
 8001b84:	440b      	add	r3, r1
 8001b86:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e00e      	b.n	8001baa <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b90:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001b98:	2301      	movs	r3, #1
 8001b9a:	e006      	b.n	8001baa <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba0:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ba8:	2301      	movs	r3, #1
  }
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3724      	adds	r7, #36	; 0x24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bc80      	pop	{r7}
 8001bb2:	4770      	bx	lr

08001bb4 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b085      	sub	sp, #20
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bc6:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001bc8:	7afb      	ldrb	r3, [r7, #11]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d002      	beq.n	8001bd4 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001bce:	7afb      	ldrb	r3, [r7, #11]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d11d      	bne.n	8001c10 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d002      	beq.n	8001be8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	3301      	adds	r3, #1
 8001be6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d002      	beq.n	8001bfc <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001c10:	68fb      	ldr	r3, [r7, #12]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr

08001c1c <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c30:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001c32:	7dfb      	ldrb	r3, [r7, #23]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d003      	beq.n	8001c40 <HAL_CAN_GetRxMessage+0x24>
 8001c38:	7dfb      	ldrb	r3, [r7, #23]
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	f040 80f3 	bne.w	8001e26 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d10e      	bne.n	8001c64 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68db      	ldr	r3, [r3, #12]
 8001c4c:	f003 0303 	and.w	r3, r3, #3
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d116      	bne.n	8001c82 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c58:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0e7      	b.n	8001e34 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	691b      	ldr	r3, [r3, #16]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d107      	bne.n	8001c82 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c76:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e0d8      	b.n	8001e34 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	331b      	adds	r3, #27
 8001c8a:	011b      	lsls	r3, r3, #4
 8001c8c:	4413      	add	r3, r2
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0204 	and.w	r2, r3, #4
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10c      	bne.n	8001cba <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	331b      	adds	r3, #27
 8001ca8:	011b      	lsls	r3, r3, #4
 8001caa:	4413      	add	r3, r2
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	0d5b      	lsrs	r3, r3, #21
 8001cb0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	e00b      	b.n	8001cd2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	331b      	adds	r3, #27
 8001cc2:	011b      	lsls	r3, r3, #4
 8001cc4:	4413      	add	r3, r2
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	08db      	lsrs	r3, r3, #3
 8001cca:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	331b      	adds	r3, #27
 8001cda:	011b      	lsls	r3, r3, #4
 8001cdc:	4413      	add	r3, r2
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0202 	and.w	r2, r3, #2
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	68bb      	ldr	r3, [r7, #8]
 8001cee:	331b      	adds	r3, #27
 8001cf0:	011b      	lsls	r3, r3, #4
 8001cf2:	4413      	add	r3, r2
 8001cf4:	3304      	adds	r3, #4
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 020f 	and.w	r2, r3, #15
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	331b      	adds	r3, #27
 8001d08:	011b      	lsls	r3, r3, #4
 8001d0a:	4413      	add	r3, r2
 8001d0c:	3304      	adds	r3, #4
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	0a1b      	lsrs	r3, r3, #8
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681a      	ldr	r2, [r3, #0]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	331b      	adds	r3, #27
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	4413      	add	r3, r2
 8001d24:	3304      	adds	r3, #4
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	0c1b      	lsrs	r3, r3, #16
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	011b      	lsls	r3, r3, #4
 8001d38:	4413      	add	r3, r2
 8001d3a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681a      	ldr	r2, [r3, #0]
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	011b      	lsls	r3, r3, #4
 8001d4e:	4413      	add	r3, r2
 8001d50:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	0a1a      	lsrs	r2, r3, #8
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	b2d2      	uxtb	r2, r2
 8001d5e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	011b      	lsls	r3, r3, #4
 8001d68:	4413      	add	r3, r2
 8001d6a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	0c1a      	lsrs	r2, r3, #16
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	3302      	adds	r3, #2
 8001d76:	b2d2      	uxtb	r2, r2
 8001d78:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	011b      	lsls	r3, r3, #4
 8001d82:	4413      	add	r3, r2
 8001d84:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	0e1a      	lsrs	r2, r3, #24
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	3303      	adds	r3, #3
 8001d90:	b2d2      	uxtb	r2, r2
 8001d92:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	011b      	lsls	r3, r3, #4
 8001d9c:	4413      	add	r3, r2
 8001d9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001da2:	681a      	ldr	r2, [r3, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	3304      	adds	r3, #4
 8001da8:	b2d2      	uxtb	r2, r2
 8001daa:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	011b      	lsls	r3, r3, #4
 8001db4:	4413      	add	r3, r2
 8001db6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	0a1a      	lsrs	r2, r3, #8
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	3305      	adds	r3, #5
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	4413      	add	r3, r2
 8001dd0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	0c1a      	lsrs	r2, r3, #16
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	3306      	adds	r3, #6
 8001ddc:	b2d2      	uxtb	r2, r2
 8001dde:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	68bb      	ldr	r3, [r7, #8]
 8001de6:	011b      	lsls	r3, r3, #4
 8001de8:	4413      	add	r3, r2
 8001dea:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	0e1a      	lsrs	r2, r3, #24
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	3307      	adds	r3, #7
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d108      	bne.n	8001e12 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	68da      	ldr	r2, [r3, #12]
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0220 	orr.w	r2, r2, #32
 8001e0e:	60da      	str	r2, [r3, #12]
 8001e10:	e007      	b.n	8001e22 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f042 0220 	orr.w	r2, r2, #32
 8001e20:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001e22:	2300      	movs	r3, #0
 8001e24:	e006      	b.n	8001e34 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
  }
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	371c      	adds	r7, #28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr

08001e3e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001e3e:	b480      	push	{r7}
 8001e40:	b085      	sub	sp, #20
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	6078      	str	r0, [r7, #4]
 8001e46:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e52:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001e54:	7afb      	ldrb	r3, [r7, #11]
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d002      	beq.n	8001e60 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8001e5a:	7afb      	ldrb	r3, [r7, #11]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d10f      	bne.n	8001e80 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d106      	bne.n	8001e74 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	68db      	ldr	r3, [r3, #12]
 8001e6c:	f003 0303 	and.w	r3, r3, #3
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	e005      	b.n	8001e80 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 0303 	and.w	r3, r3, #3
 8001e7e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8001e80:	68fb      	ldr	r3, [r7, #12]
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3714      	adds	r7, #20
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e94:	2300      	movs	r3, #0
 8001e96:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e9e:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8001ea0:	7bbb      	ldrb	r3, [r7, #14]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d002      	beq.n	8001eac <HAL_CAN_ResetError+0x20>
 8001ea6:	7bbb      	ldrb	r3, [r7, #14]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d103      	bne.n	8001eb4 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	625a      	str	r2, [r3, #36]	; 0x24
 8001eb2:	e007      	b.n	8001ec4 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8001ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr

08001ed0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f003 0307 	and.w	r3, r3, #7
 8001ede:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ee0:	4b0c      	ldr	r3, [pc, #48]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ee6:	68ba      	ldr	r2, [r7, #8]
 8001ee8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eec:	4013      	ands	r3, r2
 8001eee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001efc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f02:	4a04      	ldr	r2, [pc, #16]	; (8001f14 <__NVIC_SetPriorityGrouping+0x44>)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	60d3      	str	r3, [r2, #12]
}
 8001f08:	bf00      	nop
 8001f0a:	3714      	adds	r7, #20
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bc80      	pop	{r7}
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	e000ed00 	.word	0xe000ed00

08001f18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f1c:	4b04      	ldr	r3, [pc, #16]	; (8001f30 <__NVIC_GetPriorityGrouping+0x18>)
 8001f1e:	68db      	ldr	r3, [r3, #12]
 8001f20:	0a1b      	lsrs	r3, r3, #8
 8001f22:	f003 0307 	and.w	r3, r3, #7
}
 8001f26:	4618      	mov	r0, r3
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bc80      	pop	{r7}
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000ed00 	.word	0xe000ed00

08001f34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	6039      	str	r1, [r7, #0]
 8001f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	db0a      	blt.n	8001f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	490c      	ldr	r1, [pc, #48]	; (8001f80 <__NVIC_SetPriority+0x4c>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	0112      	lsls	r2, r2, #4
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	440b      	add	r3, r1
 8001f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f5c:	e00a      	b.n	8001f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4908      	ldr	r1, [pc, #32]	; (8001f84 <__NVIC_SetPriority+0x50>)
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	3b04      	subs	r3, #4
 8001f6c:	0112      	lsls	r2, r2, #4
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	440b      	add	r3, r1
 8001f72:	761a      	strb	r2, [r3, #24]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	e000e100 	.word	0xe000e100
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b089      	sub	sp, #36	; 0x24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f1c3 0307 	rsb	r3, r3, #7
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	bf28      	it	cs
 8001fa6:	2304      	movcs	r3, #4
 8001fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3304      	adds	r3, #4
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d902      	bls.n	8001fb8 <NVIC_EncodePriority+0x30>
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3b03      	subs	r3, #3
 8001fb6:	e000      	b.n	8001fba <NVIC_EncodePriority+0x32>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	401a      	ands	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	43d9      	mvns	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	4313      	orrs	r3, r2
         );
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3724      	adds	r7, #36	; 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bc80      	pop	{r7}
 8001fea:	4770      	bx	lr

08001fec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b082      	sub	sp, #8
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	3b01      	subs	r3, #1
 8001ff8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ffc:	d301      	bcc.n	8002002 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ffe:	2301      	movs	r3, #1
 8002000:	e00f      	b.n	8002022 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002002:	4a0a      	ldr	r2, [pc, #40]	; (800202c <SysTick_Config+0x40>)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	3b01      	subs	r3, #1
 8002008:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800200a:	210f      	movs	r1, #15
 800200c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002010:	f7ff ff90 	bl	8001f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002014:	4b05      	ldr	r3, [pc, #20]	; (800202c <SysTick_Config+0x40>)
 8002016:	2200      	movs	r2, #0
 8002018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800201a:	4b04      	ldr	r3, [pc, #16]	; (800202c <SysTick_Config+0x40>)
 800201c:	2207      	movs	r2, #7
 800201e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002020:	2300      	movs	r3, #0
}
 8002022:	4618      	mov	r0, r3
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	e000e010 	.word	0xe000e010

08002030 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff ff49 	bl	8001ed0 <__NVIC_SetPriorityGrouping>
}
 800203e:	bf00      	nop
 8002040:	3708      	adds	r7, #8
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}

08002046 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002046:	b580      	push	{r7, lr}
 8002048:	b086      	sub	sp, #24
 800204a:	af00      	add	r7, sp, #0
 800204c:	4603      	mov	r3, r0
 800204e:	60b9      	str	r1, [r7, #8]
 8002050:	607a      	str	r2, [r7, #4]
 8002052:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002054:	2300      	movs	r3, #0
 8002056:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002058:	f7ff ff5e 	bl	8001f18 <__NVIC_GetPriorityGrouping>
 800205c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	68b9      	ldr	r1, [r7, #8]
 8002062:	6978      	ldr	r0, [r7, #20]
 8002064:	f7ff ff90 	bl	8001f88 <NVIC_EncodePriority>
 8002068:	4602      	mov	r2, r0
 800206a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff ff5f 	bl	8001f34 <__NVIC_SetPriority>
}
 8002076:	bf00      	nop
 8002078:	3718      	adds	r7, #24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800207e:	b580      	push	{r7, lr}
 8002080:	b082      	sub	sp, #8
 8002082:	af00      	add	r7, sp, #0
 8002084:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff ffb0 	bl	8001fec <SysTick_Config>
 800208c:	4603      	mov	r3, r0
}
 800208e:	4618      	mov	r0, r3
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002098:	b480      	push	{r7}
 800209a:	b08b      	sub	sp, #44	; 0x2c
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020a2:	2300      	movs	r3, #0
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020a6:	2300      	movs	r3, #0
 80020a8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020aa:	e127      	b.n	80022fc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020ac:	2201      	movs	r2, #1
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	fa02 f303 	lsl.w	r3, r2, r3
 80020b4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	69fa      	ldr	r2, [r7, #28]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	429a      	cmp	r2, r3
 80020c6:	f040 8116 	bne.w	80022f6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	2b12      	cmp	r3, #18
 80020d0:	d034      	beq.n	800213c <HAL_GPIO_Init+0xa4>
 80020d2:	2b12      	cmp	r3, #18
 80020d4:	d80d      	bhi.n	80020f2 <HAL_GPIO_Init+0x5a>
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d02b      	beq.n	8002132 <HAL_GPIO_Init+0x9a>
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d804      	bhi.n	80020e8 <HAL_GPIO_Init+0x50>
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d031      	beq.n	8002146 <HAL_GPIO_Init+0xae>
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d01c      	beq.n	8002120 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020e6:	e048      	b.n	800217a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d043      	beq.n	8002174 <HAL_GPIO_Init+0xdc>
 80020ec:	2b11      	cmp	r3, #17
 80020ee:	d01b      	beq.n	8002128 <HAL_GPIO_Init+0x90>
          break;
 80020f0:	e043      	b.n	800217a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80020f2:	4a89      	ldr	r2, [pc, #548]	; (8002318 <HAL_GPIO_Init+0x280>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d026      	beq.n	8002146 <HAL_GPIO_Init+0xae>
 80020f8:	4a87      	ldr	r2, [pc, #540]	; (8002318 <HAL_GPIO_Init+0x280>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d806      	bhi.n	800210c <HAL_GPIO_Init+0x74>
 80020fe:	4a87      	ldr	r2, [pc, #540]	; (800231c <HAL_GPIO_Init+0x284>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d020      	beq.n	8002146 <HAL_GPIO_Init+0xae>
 8002104:	4a86      	ldr	r2, [pc, #536]	; (8002320 <HAL_GPIO_Init+0x288>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d01d      	beq.n	8002146 <HAL_GPIO_Init+0xae>
          break;
 800210a:	e036      	b.n	800217a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800210c:	4a85      	ldr	r2, [pc, #532]	; (8002324 <HAL_GPIO_Init+0x28c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d019      	beq.n	8002146 <HAL_GPIO_Init+0xae>
 8002112:	4a85      	ldr	r2, [pc, #532]	; (8002328 <HAL_GPIO_Init+0x290>)
 8002114:	4293      	cmp	r3, r2
 8002116:	d016      	beq.n	8002146 <HAL_GPIO_Init+0xae>
 8002118:	4a84      	ldr	r2, [pc, #528]	; (800232c <HAL_GPIO_Init+0x294>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d013      	beq.n	8002146 <HAL_GPIO_Init+0xae>
          break;
 800211e:	e02c      	b.n	800217a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	623b      	str	r3, [r7, #32]
          break;
 8002126:	e028      	b.n	800217a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	3304      	adds	r3, #4
 800212e:	623b      	str	r3, [r7, #32]
          break;
 8002130:	e023      	b.n	800217a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	68db      	ldr	r3, [r3, #12]
 8002136:	3308      	adds	r3, #8
 8002138:	623b      	str	r3, [r7, #32]
          break;
 800213a:	e01e      	b.n	800217a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	330c      	adds	r3, #12
 8002142:	623b      	str	r3, [r7, #32]
          break;
 8002144:	e019      	b.n	800217a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d102      	bne.n	8002154 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800214e:	2304      	movs	r3, #4
 8002150:	623b      	str	r3, [r7, #32]
          break;
 8002152:	e012      	b.n	800217a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	2b01      	cmp	r3, #1
 800215a:	d105      	bne.n	8002168 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800215c:	2308      	movs	r3, #8
 800215e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	69fa      	ldr	r2, [r7, #28]
 8002164:	611a      	str	r2, [r3, #16]
          break;
 8002166:	e008      	b.n	800217a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002168:	2308      	movs	r3, #8
 800216a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	615a      	str	r2, [r3, #20]
          break;
 8002172:	e002      	b.n	800217a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002174:	2300      	movs	r3, #0
 8002176:	623b      	str	r3, [r7, #32]
          break;
 8002178:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800217a:	69bb      	ldr	r3, [r7, #24]
 800217c:	2bff      	cmp	r3, #255	; 0xff
 800217e:	d801      	bhi.n	8002184 <HAL_GPIO_Init+0xec>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	e001      	b.n	8002188 <HAL_GPIO_Init+0xf0>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3304      	adds	r3, #4
 8002188:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	2bff      	cmp	r3, #255	; 0xff
 800218e:	d802      	bhi.n	8002196 <HAL_GPIO_Init+0xfe>
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	009b      	lsls	r3, r3, #2
 8002194:	e002      	b.n	800219c <HAL_GPIO_Init+0x104>
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	3b08      	subs	r3, #8
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	210f      	movs	r1, #15
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	401a      	ands	r2, r3
 80021ae:	6a39      	ldr	r1, [r7, #32]
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	431a      	orrs	r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f000 8096 	beq.w	80022f6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021ca:	4b59      	ldr	r3, [pc, #356]	; (8002330 <HAL_GPIO_Init+0x298>)
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	4a58      	ldr	r2, [pc, #352]	; (8002330 <HAL_GPIO_Init+0x298>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6193      	str	r3, [r2, #24]
 80021d6:	4b56      	ldr	r3, [pc, #344]	; (8002330 <HAL_GPIO_Init+0x298>)
 80021d8:	699b      	ldr	r3, [r3, #24]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	60bb      	str	r3, [r7, #8]
 80021e0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80021e2:	4a54      	ldr	r2, [pc, #336]	; (8002334 <HAL_GPIO_Init+0x29c>)
 80021e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e6:	089b      	lsrs	r3, r3, #2
 80021e8:	3302      	adds	r3, #2
 80021ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ee:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f2:	f003 0303 	and.w	r3, r3, #3
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	220f      	movs	r2, #15
 80021fa:	fa02 f303 	lsl.w	r3, r2, r3
 80021fe:	43db      	mvns	r3, r3
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	4013      	ands	r3, r2
 8002204:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a4b      	ldr	r2, [pc, #300]	; (8002338 <HAL_GPIO_Init+0x2a0>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d013      	beq.n	8002236 <HAL_GPIO_Init+0x19e>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a4a      	ldr	r2, [pc, #296]	; (800233c <HAL_GPIO_Init+0x2a4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d00d      	beq.n	8002232 <HAL_GPIO_Init+0x19a>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a49      	ldr	r2, [pc, #292]	; (8002340 <HAL_GPIO_Init+0x2a8>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d007      	beq.n	800222e <HAL_GPIO_Init+0x196>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a48      	ldr	r2, [pc, #288]	; (8002344 <HAL_GPIO_Init+0x2ac>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d101      	bne.n	800222a <HAL_GPIO_Init+0x192>
 8002226:	2303      	movs	r3, #3
 8002228:	e006      	b.n	8002238 <HAL_GPIO_Init+0x1a0>
 800222a:	2304      	movs	r3, #4
 800222c:	e004      	b.n	8002238 <HAL_GPIO_Init+0x1a0>
 800222e:	2302      	movs	r3, #2
 8002230:	e002      	b.n	8002238 <HAL_GPIO_Init+0x1a0>
 8002232:	2301      	movs	r3, #1
 8002234:	e000      	b.n	8002238 <HAL_GPIO_Init+0x1a0>
 8002236:	2300      	movs	r3, #0
 8002238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800223a:	f002 0203 	and.w	r2, r2, #3
 800223e:	0092      	lsls	r2, r2, #2
 8002240:	4093      	lsls	r3, r2
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	4313      	orrs	r3, r2
 8002246:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002248:	493a      	ldr	r1, [pc, #232]	; (8002334 <HAL_GPIO_Init+0x29c>)
 800224a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224c:	089b      	lsrs	r3, r3, #2
 800224e:	3302      	adds	r3, #2
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d006      	beq.n	8002270 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002262:	4b39      	ldr	r3, [pc, #228]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	4938      	ldr	r1, [pc, #224]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 8002268:	69bb      	ldr	r3, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	600b      	str	r3, [r1, #0]
 800226e:	e006      	b.n	800227e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002270:	4b35      	ldr	r3, [pc, #212]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	43db      	mvns	r3, r3
 8002278:	4933      	ldr	r1, [pc, #204]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 800227a:	4013      	ands	r3, r2
 800227c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d006      	beq.n	8002298 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800228a:	4b2f      	ldr	r3, [pc, #188]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 800228c:	685a      	ldr	r2, [r3, #4]
 800228e:	492e      	ldr	r1, [pc, #184]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	4313      	orrs	r3, r2
 8002294:	604b      	str	r3, [r1, #4]
 8002296:	e006      	b.n	80022a6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002298:	4b2b      	ldr	r3, [pc, #172]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 800229a:	685a      	ldr	r2, [r3, #4]
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	43db      	mvns	r3, r3
 80022a0:	4929      	ldr	r1, [pc, #164]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 80022a2:	4013      	ands	r3, r2
 80022a4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d006      	beq.n	80022c0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022b2:	4b25      	ldr	r3, [pc, #148]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 80022b4:	689a      	ldr	r2, [r3, #8]
 80022b6:	4924      	ldr	r1, [pc, #144]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	608b      	str	r3, [r1, #8]
 80022be:	e006      	b.n	80022ce <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022c0:	4b21      	ldr	r3, [pc, #132]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 80022c2:	689a      	ldr	r2, [r3, #8]
 80022c4:	69bb      	ldr	r3, [r7, #24]
 80022c6:	43db      	mvns	r3, r3
 80022c8:	491f      	ldr	r1, [pc, #124]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 80022ca:	4013      	ands	r3, r2
 80022cc:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d006      	beq.n	80022e8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80022da:	4b1b      	ldr	r3, [pc, #108]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 80022dc:	68da      	ldr	r2, [r3, #12]
 80022de:	491a      	ldr	r1, [pc, #104]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	60cb      	str	r3, [r1, #12]
 80022e6:	e006      	b.n	80022f6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80022e8:	4b17      	ldr	r3, [pc, #92]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 80022ea:	68da      	ldr	r2, [r3, #12]
 80022ec:	69bb      	ldr	r3, [r7, #24]
 80022ee:	43db      	mvns	r3, r3
 80022f0:	4915      	ldr	r1, [pc, #84]	; (8002348 <HAL_GPIO_Init+0x2b0>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80022f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f8:	3301      	adds	r3, #1
 80022fa:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681a      	ldr	r2, [r3, #0]
 8002300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002302:	fa22 f303 	lsr.w	r3, r2, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	f47f aed0 	bne.w	80020ac <HAL_GPIO_Init+0x14>
  }
}
 800230c:	bf00      	nop
 800230e:	372c      	adds	r7, #44	; 0x2c
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr
 8002316:	bf00      	nop
 8002318:	10210000 	.word	0x10210000
 800231c:	10110000 	.word	0x10110000
 8002320:	10120000 	.word	0x10120000
 8002324:	10310000 	.word	0x10310000
 8002328:	10320000 	.word	0x10320000
 800232c:	10220000 	.word	0x10220000
 8002330:	40021000 	.word	0x40021000
 8002334:	40010000 	.word	0x40010000
 8002338:	40010800 	.word	0x40010800
 800233c:	40010c00 	.word	0x40010c00
 8002340:	40011000 	.word	0x40011000
 8002344:	40011400 	.word	0x40011400
 8002348:	40010400 	.word	0x40010400

0800234c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	460b      	mov	r3, r1
 8002356:	807b      	strh	r3, [r7, #2]
 8002358:	4613      	mov	r3, r2
 800235a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800235c:	787b      	ldrb	r3, [r7, #1]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d003      	beq.n	800236a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002362:	887a      	ldrh	r2, [r7, #2]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002368:	e003      	b.n	8002372 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800236a:	887b      	ldrh	r3, [r7, #2]
 800236c:	041a      	lsls	r2, r3, #16
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	611a      	str	r2, [r3, #16]
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2b00      	cmp	r3, #0
 8002388:	d101      	bne.n	800238e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e304      	b.n	8002998 <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 8087 	beq.w	80024aa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800239c:	4b92      	ldr	r3, [pc, #584]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f003 030c 	and.w	r3, r3, #12
 80023a4:	2b04      	cmp	r3, #4
 80023a6:	d00c      	beq.n	80023c2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023a8:	4b8f      	ldr	r3, [pc, #572]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f003 030c 	and.w	r3, r3, #12
 80023b0:	2b08      	cmp	r3, #8
 80023b2:	d112      	bne.n	80023da <HAL_RCC_OscConfig+0x5e>
 80023b4:	4b8c      	ldr	r3, [pc, #560]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023c0:	d10b      	bne.n	80023da <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c2:	4b89      	ldr	r3, [pc, #548]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d06c      	beq.n	80024a8 <HAL_RCC_OscConfig+0x12c>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d168      	bne.n	80024a8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e2de      	b.n	8002998 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e2:	d106      	bne.n	80023f2 <HAL_RCC_OscConfig+0x76>
 80023e4:	4b80      	ldr	r3, [pc, #512]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a7f      	ldr	r2, [pc, #508]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80023ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	e02e      	b.n	8002450 <HAL_RCC_OscConfig+0xd4>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d10c      	bne.n	8002414 <HAL_RCC_OscConfig+0x98>
 80023fa:	4b7b      	ldr	r3, [pc, #492]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a7a      	ldr	r2, [pc, #488]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 8002400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002404:	6013      	str	r3, [r2, #0]
 8002406:	4b78      	ldr	r3, [pc, #480]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a77      	ldr	r2, [pc, #476]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 800240c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	e01d      	b.n	8002450 <HAL_RCC_OscConfig+0xd4>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800241c:	d10c      	bne.n	8002438 <HAL_RCC_OscConfig+0xbc>
 800241e:	4b72      	ldr	r3, [pc, #456]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a71      	ldr	r2, [pc, #452]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 8002424:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002428:	6013      	str	r3, [r2, #0]
 800242a:	4b6f      	ldr	r3, [pc, #444]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a6e      	ldr	r2, [pc, #440]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 8002430:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002434:	6013      	str	r3, [r2, #0]
 8002436:	e00b      	b.n	8002450 <HAL_RCC_OscConfig+0xd4>
 8002438:	4b6b      	ldr	r3, [pc, #428]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a6a      	ldr	r2, [pc, #424]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 800243e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002442:	6013      	str	r3, [r2, #0]
 8002444:	4b68      	ldr	r3, [pc, #416]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a67      	ldr	r2, [pc, #412]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 800244a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800244e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d013      	beq.n	8002480 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002458:	f7ff f8a8 	bl	80015ac <HAL_GetTick>
 800245c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245e:	e008      	b.n	8002472 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002460:	f7ff f8a4 	bl	80015ac <HAL_GetTick>
 8002464:	4602      	mov	r2, r0
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1ad3      	subs	r3, r2, r3
 800246a:	2b64      	cmp	r3, #100	; 0x64
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e292      	b.n	8002998 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002472:	4b5d      	ldr	r3, [pc, #372]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d0f0      	beq.n	8002460 <HAL_RCC_OscConfig+0xe4>
 800247e:	e014      	b.n	80024aa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002480:	f7ff f894 	bl	80015ac <HAL_GetTick>
 8002484:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002486:	e008      	b.n	800249a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002488:	f7ff f890 	bl	80015ac <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b64      	cmp	r3, #100	; 0x64
 8002494:	d901      	bls.n	800249a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e27e      	b.n	8002998 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249a:	4b53      	ldr	r3, [pc, #332]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d1f0      	bne.n	8002488 <HAL_RCC_OscConfig+0x10c>
 80024a6:	e000      	b.n	80024aa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0302 	and.w	r3, r3, #2
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d063      	beq.n	800257e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024b6:	4b4c      	ldr	r3, [pc, #304]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	f003 030c 	and.w	r3, r3, #12
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d00b      	beq.n	80024da <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024c2:	4b49      	ldr	r3, [pc, #292]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 030c 	and.w	r3, r3, #12
 80024ca:	2b08      	cmp	r3, #8
 80024cc:	d11c      	bne.n	8002508 <HAL_RCC_OscConfig+0x18c>
 80024ce:	4b46      	ldr	r3, [pc, #280]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d116      	bne.n	8002508 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024da:	4b43      	ldr	r3, [pc, #268]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d005      	beq.n	80024f2 <HAL_RCC_OscConfig+0x176>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d001      	beq.n	80024f2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e252      	b.n	8002998 <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f2:	4b3d      	ldr	r3, [pc, #244]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	00db      	lsls	r3, r3, #3
 8002500:	4939      	ldr	r1, [pc, #228]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002506:	e03a      	b.n	800257e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	695b      	ldr	r3, [r3, #20]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d020      	beq.n	8002552 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002510:	4b36      	ldr	r3, [pc, #216]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 8002512:	2201      	movs	r2, #1
 8002514:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002516:	f7ff f849 	bl	80015ac <HAL_GetTick>
 800251a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800251c:	e008      	b.n	8002530 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800251e:	f7ff f845 	bl	80015ac <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	693b      	ldr	r3, [r7, #16]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e233      	b.n	8002998 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002530:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0f0      	beq.n	800251e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800253c:	4b2a      	ldr	r3, [pc, #168]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4927      	ldr	r1, [pc, #156]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 800254c:	4313      	orrs	r3, r2
 800254e:	600b      	str	r3, [r1, #0]
 8002550:	e015      	b.n	800257e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002552:	4b26      	ldr	r3, [pc, #152]	; (80025ec <HAL_RCC_OscConfig+0x270>)
 8002554:	2200      	movs	r2, #0
 8002556:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002558:	f7ff f828 	bl	80015ac <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002560:	f7ff f824 	bl	80015ac <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e212      	b.n	8002998 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002572:	4b1d      	ldr	r3, [pc, #116]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0302 	and.w	r3, r3, #2
 800257a:	2b00      	cmp	r3, #0
 800257c:	d1f0      	bne.n	8002560 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d03a      	beq.n	8002600 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d019      	beq.n	80025c6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002592:	4b17      	ldr	r3, [pc, #92]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 8002594:	2201      	movs	r2, #1
 8002596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002598:	f7ff f808 	bl	80015ac <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a0:	f7ff f804 	bl	80015ac <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e1f2      	b.n	8002998 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b2:	4b0d      	ldr	r3, [pc, #52]	; (80025e8 <HAL_RCC_OscConfig+0x26c>)
 80025b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b6:	f003 0302 	and.w	r3, r3, #2
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025be:	2001      	movs	r0, #1
 80025c0:	f000 fb98 	bl	8002cf4 <RCC_Delay>
 80025c4:	e01c      	b.n	8002600 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c6:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <HAL_RCC_OscConfig+0x274>)
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025cc:	f7fe ffee 	bl	80015ac <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d2:	e00f      	b.n	80025f4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d4:	f7fe ffea 	bl	80015ac <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d908      	bls.n	80025f4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e1d8      	b.n	8002998 <HAL_RCC_OscConfig+0x61c>
 80025e6:	bf00      	nop
 80025e8:	40021000 	.word	0x40021000
 80025ec:	42420000 	.word	0x42420000
 80025f0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f4:	4b9b      	ldr	r3, [pc, #620]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 80025f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1e9      	bne.n	80025d4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0304 	and.w	r3, r3, #4
 8002608:	2b00      	cmp	r3, #0
 800260a:	f000 80a6 	beq.w	800275a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800260e:	2300      	movs	r3, #0
 8002610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002612:	4b94      	ldr	r3, [pc, #592]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 8002614:	69db      	ldr	r3, [r3, #28]
 8002616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10d      	bne.n	800263a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800261e:	4b91      	ldr	r3, [pc, #580]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 8002620:	69db      	ldr	r3, [r3, #28]
 8002622:	4a90      	ldr	r2, [pc, #576]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002628:	61d3      	str	r3, [r2, #28]
 800262a:	4b8e      	ldr	r3, [pc, #568]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002636:	2301      	movs	r3, #1
 8002638:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263a:	4b8b      	ldr	r3, [pc, #556]	; (8002868 <HAL_RCC_OscConfig+0x4ec>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d118      	bne.n	8002678 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002646:	4b88      	ldr	r3, [pc, #544]	; (8002868 <HAL_RCC_OscConfig+0x4ec>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a87      	ldr	r2, [pc, #540]	; (8002868 <HAL_RCC_OscConfig+0x4ec>)
 800264c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002652:	f7fe ffab 	bl	80015ac <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265a:	f7fe ffa7 	bl	80015ac <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b64      	cmp	r3, #100	; 0x64
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e195      	b.n	8002998 <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266c:	4b7e      	ldr	r3, [pc, #504]	; (8002868 <HAL_RCC_OscConfig+0x4ec>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x312>
 8002680:	4b78      	ldr	r3, [pc, #480]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	4a77      	ldr	r2, [pc, #476]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	6213      	str	r3, [r2, #32]
 800268c:	e02d      	b.n	80026ea <HAL_RCC_OscConfig+0x36e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x334>
 8002696:	4b73      	ldr	r3, [pc, #460]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	4a72      	ldr	r2, [pc, #456]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 800269c:	f023 0301 	bic.w	r3, r3, #1
 80026a0:	6213      	str	r3, [r2, #32]
 80026a2:	4b70      	ldr	r3, [pc, #448]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 80026a4:	6a1b      	ldr	r3, [r3, #32]
 80026a6:	4a6f      	ldr	r2, [pc, #444]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 80026a8:	f023 0304 	bic.w	r3, r3, #4
 80026ac:	6213      	str	r3, [r2, #32]
 80026ae:	e01c      	b.n	80026ea <HAL_RCC_OscConfig+0x36e>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	2b05      	cmp	r3, #5
 80026b6:	d10c      	bne.n	80026d2 <HAL_RCC_OscConfig+0x356>
 80026b8:	4b6a      	ldr	r3, [pc, #424]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	4a69      	ldr	r2, [pc, #420]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 80026be:	f043 0304 	orr.w	r3, r3, #4
 80026c2:	6213      	str	r3, [r2, #32]
 80026c4:	4b67      	ldr	r3, [pc, #412]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	4a66      	ldr	r2, [pc, #408]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	6213      	str	r3, [r2, #32]
 80026d0:	e00b      	b.n	80026ea <HAL_RCC_OscConfig+0x36e>
 80026d2:	4b64      	ldr	r3, [pc, #400]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	4a63      	ldr	r2, [pc, #396]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 80026d8:	f023 0301 	bic.w	r3, r3, #1
 80026dc:	6213      	str	r3, [r2, #32]
 80026de:	4b61      	ldr	r3, [pc, #388]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 80026e0:	6a1b      	ldr	r3, [r3, #32]
 80026e2:	4a60      	ldr	r2, [pc, #384]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 80026e4:	f023 0304 	bic.w	r3, r3, #4
 80026e8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d015      	beq.n	800271e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f2:	f7fe ff5b 	bl	80015ac <HAL_GetTick>
 80026f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026f8:	e00a      	b.n	8002710 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fa:	f7fe ff57 	bl	80015ac <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	f241 3288 	movw	r2, #5000	; 0x1388
 8002708:	4293      	cmp	r3, r2
 800270a:	d901      	bls.n	8002710 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800270c:	2303      	movs	r3, #3
 800270e:	e143      	b.n	8002998 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002710:	4b54      	ldr	r3, [pc, #336]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 8002712:	6a1b      	ldr	r3, [r3, #32]
 8002714:	f003 0302 	and.w	r3, r3, #2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d0ee      	beq.n	80026fa <HAL_RCC_OscConfig+0x37e>
 800271c:	e014      	b.n	8002748 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800271e:	f7fe ff45 	bl	80015ac <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002724:	e00a      	b.n	800273c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002726:	f7fe ff41 	bl	80015ac <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	f241 3288 	movw	r2, #5000	; 0x1388
 8002734:	4293      	cmp	r3, r2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e12d      	b.n	8002998 <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800273c:	4b49      	ldr	r3, [pc, #292]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1ee      	bne.n	8002726 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002748:	7dfb      	ldrb	r3, [r7, #23]
 800274a:	2b01      	cmp	r3, #1
 800274c:	d105      	bne.n	800275a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800274e:	4b45      	ldr	r3, [pc, #276]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	4a44      	ldr	r2, [pc, #272]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 8002754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002758:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 808c 	beq.w	800287c <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002764:	4b3f      	ldr	r3, [pc, #252]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800276c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002770:	d10e      	bne.n	8002790 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002772:	4b3c      	ldr	r3, [pc, #240]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 800277a:	2b08      	cmp	r3, #8
 800277c:	d108      	bne.n	8002790 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 800277e:	4b39      	ldr	r3, [pc, #228]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278a:	d101      	bne.n	8002790 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e103      	b.n	8002998 <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002794:	2b02      	cmp	r3, #2
 8002796:	d14e      	bne.n	8002836 <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002798:	4b32      	ldr	r3, [pc, #200]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d009      	beq.n	80027b8 <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 80027a4:	4b2f      	ldr	r3, [pc, #188]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d001      	beq.n	80027b8 <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	e0ef      	b.n	8002998 <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 80027b8:	4b2c      	ldr	r3, [pc, #176]	; (800286c <HAL_RCC_OscConfig+0x4f0>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027be:	f7fe fef5 	bl	80015ac <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80027c4:	e008      	b.n	80027d8 <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80027c6:	f7fe fef1 	bl	80015ac <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b64      	cmp	r3, #100	; 0x64
 80027d2:	d901      	bls.n	80027d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e0df      	b.n	8002998 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 80027d8:	4b22      	ldr	r3, [pc, #136]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1f0      	bne.n	80027c6 <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 80027e4:	4b1f      	ldr	r3, [pc, #124]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 80027e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027f0:	491c      	ldr	r1, [pc, #112]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 80027f2:	4313      	orrs	r3, r2
 80027f4:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 80027f6:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002802:	4918      	ldr	r1, [pc, #96]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 8002804:	4313      	orrs	r3, r2
 8002806:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002808:	4b18      	ldr	r3, [pc, #96]	; (800286c <HAL_RCC_OscConfig+0x4f0>)
 800280a:	2201      	movs	r2, #1
 800280c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280e:	f7fe fecd 	bl	80015ac <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002816:	f7fe fec9 	bl	80015ac <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b64      	cmp	r3, #100	; 0x64
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e0b7      	b.n	8002998 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002828:	4b0e      	ldr	r3, [pc, #56]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d0f0      	beq.n	8002816 <HAL_RCC_OscConfig+0x49a>
 8002834:	e022      	b.n	800287c <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002836:	4b0b      	ldr	r3, [pc, #44]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 8002838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283a:	4a0a      	ldr	r2, [pc, #40]	; (8002864 <HAL_RCC_OscConfig+0x4e8>)
 800283c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002840:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <HAL_RCC_OscConfig+0x4f0>)
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fe feb0 	bl	80015ac <HAL_GetTick>
 800284c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 800284e:	e00f      	b.n	8002870 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002850:	f7fe feac 	bl	80015ac <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	2b64      	cmp	r3, #100	; 0x64
 800285c:	d908      	bls.n	8002870 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 800285e:	2303      	movs	r3, #3
 8002860:	e09a      	b.n	8002998 <HAL_RCC_OscConfig+0x61c>
 8002862:	bf00      	nop
 8002864:	40021000 	.word	0x40021000
 8002868:	40007000 	.word	0x40007000
 800286c:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002870:	4b4b      	ldr	r3, [pc, #300]	; (80029a0 <HAL_RCC_OscConfig+0x624>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d1e9      	bne.n	8002850 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	2b00      	cmp	r3, #0
 8002882:	f000 8088 	beq.w	8002996 <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002886:	4b46      	ldr	r3, [pc, #280]	; (80029a0 <HAL_RCC_OscConfig+0x624>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b08      	cmp	r3, #8
 8002890:	d068      	beq.n	8002964 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6a1b      	ldr	r3, [r3, #32]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d14d      	bne.n	8002936 <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	4b42      	ldr	r3, [pc, #264]	; (80029a4 <HAL_RCC_OscConfig+0x628>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a0:	f7fe fe84 	bl	80015ac <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe fe80 	bl	80015ac <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e06e      	b.n	8002998 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ba:	4b39      	ldr	r3, [pc, #228]	; (80029a0 <HAL_RCC_OscConfig+0x624>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ce:	d10f      	bne.n	80028f0 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 80028d0:	4b33      	ldr	r3, [pc, #204]	; (80029a0 <HAL_RCC_OscConfig+0x624>)
 80028d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	4931      	ldr	r1, [pc, #196]	; (80029a0 <HAL_RCC_OscConfig+0x624>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80028de:	4b30      	ldr	r3, [pc, #192]	; (80029a0 <HAL_RCC_OscConfig+0x624>)
 80028e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e2:	f023 020f 	bic.w	r2, r3, #15
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	492d      	ldr	r1, [pc, #180]	; (80029a0 <HAL_RCC_OscConfig+0x624>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028f0:	4b2b      	ldr	r3, [pc, #172]	; (80029a0 <HAL_RCC_OscConfig+0x624>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002900:	430b      	orrs	r3, r1
 8002902:	4927      	ldr	r1, [pc, #156]	; (80029a0 <HAL_RCC_OscConfig+0x624>)
 8002904:	4313      	orrs	r3, r2
 8002906:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002908:	4b26      	ldr	r3, [pc, #152]	; (80029a4 <HAL_RCC_OscConfig+0x628>)
 800290a:	2201      	movs	r2, #1
 800290c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800290e:	f7fe fe4d 	bl	80015ac <HAL_GetTick>
 8002912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002914:	e008      	b.n	8002928 <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002916:	f7fe fe49 	bl	80015ac <HAL_GetTick>
 800291a:	4602      	mov	r2, r0
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	1ad3      	subs	r3, r2, r3
 8002920:	2b02      	cmp	r3, #2
 8002922:	d901      	bls.n	8002928 <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e037      	b.n	8002998 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002928:	4b1d      	ldr	r3, [pc, #116]	; (80029a0 <HAL_RCC_OscConfig+0x624>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002930:	2b00      	cmp	r3, #0
 8002932:	d0f0      	beq.n	8002916 <HAL_RCC_OscConfig+0x59a>
 8002934:	e02f      	b.n	8002996 <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002936:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <HAL_RCC_OscConfig+0x628>)
 8002938:	2200      	movs	r2, #0
 800293a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800293c:	f7fe fe36 	bl	80015ac <HAL_GetTick>
 8002940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002942:	e008      	b.n	8002956 <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002944:	f7fe fe32 	bl	80015ac <HAL_GetTick>
 8002948:	4602      	mov	r2, r0
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	1ad3      	subs	r3, r2, r3
 800294e:	2b02      	cmp	r3, #2
 8002950:	d901      	bls.n	8002956 <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002952:	2303      	movs	r3, #3
 8002954:	e020      	b.n	8002998 <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002956:	4b12      	ldr	r3, [pc, #72]	; (80029a0 <HAL_RCC_OscConfig+0x624>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d1f0      	bne.n	8002944 <HAL_RCC_OscConfig+0x5c8>
 8002962:	e018      	b.n	8002996 <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6a1b      	ldr	r3, [r3, #32]
 8002968:	2b01      	cmp	r3, #1
 800296a:	d101      	bne.n	8002970 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e013      	b.n	8002998 <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_RCC_OscConfig+0x624>)
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	429a      	cmp	r2, r3
 8002982:	d106      	bne.n	8002992 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800298e:	429a      	cmp	r2, r3
 8002990:	d001      	beq.n	8002996 <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3718      	adds	r7, #24
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}
 80029a0:	40021000 	.word	0x40021000
 80029a4:	42420060 	.word	0x42420060

080029a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b084      	sub	sp, #16
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
 80029b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d101      	bne.n	80029bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0d0      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80029bc:	4b6a      	ldr	r3, [pc, #424]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0307 	and.w	r3, r3, #7
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d910      	bls.n	80029ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029ca:	4b67      	ldr	r3, [pc, #412]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f023 0207 	bic.w	r2, r3, #7
 80029d2:	4965      	ldr	r1, [pc, #404]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029da:	4b63      	ldr	r3, [pc, #396]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	683a      	ldr	r2, [r7, #0]
 80029e4:	429a      	cmp	r2, r3
 80029e6:	d001      	beq.n	80029ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	e0b8      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d020      	beq.n	8002a3a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d005      	beq.n	8002a10 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a04:	4b59      	ldr	r3, [pc, #356]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	4a58      	ldr	r2, [pc, #352]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a0e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0308 	and.w	r3, r3, #8
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d005      	beq.n	8002a28 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a1c:	4b53      	ldr	r3, [pc, #332]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	4a52      	ldr	r2, [pc, #328]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a22:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002a26:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a28:	4b50      	ldr	r3, [pc, #320]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	494d      	ldr	r1, [pc, #308]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a36:	4313      	orrs	r3, r2
 8002a38:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d040      	beq.n	8002ac8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d107      	bne.n	8002a5e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a4e:	4b47      	ldr	r3, [pc, #284]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d115      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e07f      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d107      	bne.n	8002a76 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a66:	4b41      	ldr	r3, [pc, #260]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d109      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	e073      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a76:	4b3d      	ldr	r3, [pc, #244]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e06b      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a86:	4b39      	ldr	r3, [pc, #228]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	f023 0203 	bic.w	r2, r3, #3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	4936      	ldr	r1, [pc, #216]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002a94:	4313      	orrs	r3, r2
 8002a96:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a98:	f7fe fd88 	bl	80015ac <HAL_GetTick>
 8002a9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a9e:	e00a      	b.n	8002ab6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa0:	f7fe fd84 	bl	80015ac <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e053      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ab6:	4b2d      	ldr	r3, [pc, #180]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	f003 020c 	and.w	r2, r3, #12
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	429a      	cmp	r2, r3
 8002ac6:	d1eb      	bne.n	8002aa0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ac8:	4b27      	ldr	r3, [pc, #156]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f003 0307 	and.w	r3, r3, #7
 8002ad0:	683a      	ldr	r2, [r7, #0]
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d210      	bcs.n	8002af8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ad6:	4b24      	ldr	r3, [pc, #144]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f023 0207 	bic.w	r2, r3, #7
 8002ade:	4922      	ldr	r1, [pc, #136]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ae6:	4b20      	ldr	r3, [pc, #128]	; (8002b68 <HAL_RCC_ClockConfig+0x1c0>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0307 	and.w	r3, r3, #7
 8002aee:	683a      	ldr	r2, [r7, #0]
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d001      	beq.n	8002af8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e032      	b.n	8002b5e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d008      	beq.n	8002b16 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b04:	4b19      	ldr	r3, [pc, #100]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	68db      	ldr	r3, [r3, #12]
 8002b10:	4916      	ldr	r1, [pc, #88]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0308 	and.w	r3, r3, #8
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d009      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b22:	4b12      	ldr	r3, [pc, #72]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	490e      	ldr	r1, [pc, #56]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002b36:	f000 f821 	bl	8002b7c <HAL_RCC_GetSysClockFreq>
 8002b3a:	4601      	mov	r1, r0
 8002b3c:	4b0b      	ldr	r3, [pc, #44]	; (8002b6c <HAL_RCC_ClockConfig+0x1c4>)
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	091b      	lsrs	r3, r3, #4
 8002b42:	f003 030f 	and.w	r3, r3, #15
 8002b46:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <HAL_RCC_ClockConfig+0x1c8>)
 8002b48:	5cd3      	ldrb	r3, [r2, r3]
 8002b4a:	fa21 f303 	lsr.w	r3, r1, r3
 8002b4e:	4a09      	ldr	r2, [pc, #36]	; (8002b74 <HAL_RCC_ClockConfig+0x1cc>)
 8002b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002b52:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <HAL_RCC_ClockConfig+0x1d0>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fce6 	bl	8001528 <HAL_InitTick>

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40022000 	.word	0x40022000
 8002b6c:	40021000 	.word	0x40021000
 8002b70:	08002d78 	.word	0x08002d78
 8002b74:	20000000 	.word	0x20000000
 8002b78:	20000004 	.word	0x20000004

08002b7c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b7e:	b091      	sub	sp, #68	; 0x44
 8002b80:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8002b82:	4b56      	ldr	r3, [pc, #344]	; (8002cdc <HAL_RCC_GetSysClockFreq+0x160>)
 8002b84:	f107 0414 	add.w	r4, r7, #20
 8002b88:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b8a:	c407      	stmia	r4!, {r0, r1, r2}
 8002b8c:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 8002b8e:	4b54      	ldr	r3, [pc, #336]	; (8002ce0 <HAL_RCC_GetSysClockFreq+0x164>)
 8002b90:	1d3c      	adds	r4, r7, #4
 8002b92:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b94:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	637b      	str	r3, [r7, #52]	; 0x34
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	633b      	str	r3, [r7, #48]	; 0x30
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002bb4:	4b4b      	ldr	r3, [pc, #300]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bbc:	f003 030c 	and.w	r3, r3, #12
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d002      	beq.n	8002bca <HAL_RCC_GetSysClockFreq+0x4e>
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d003      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x54>
 8002bc8:	e07f      	b.n	8002cca <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002bca:	4b47      	ldr	r3, [pc, #284]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002bcc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002bce:	e07f      	b.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bd2:	0c9b      	lsrs	r3, r3, #18
 8002bd4:	f003 030f 	and.w	r3, r3, #15
 8002bd8:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002bdc:	4413      	add	r3, r2
 8002bde:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002be2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d065      	beq.n	8002cba <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002bee:	4b3d      	ldr	r3, [pc, #244]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8002c00:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002c02:	4b38      	ldr	r3, [pc, #224]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d043      	beq.n	8002c96 <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002c0e:	4b35      	ldr	r3, [pc, #212]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c12:	091b      	lsrs	r3, r3, #4
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	3301      	adds	r3, #1
 8002c1a:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002c1c:	4b31      	ldr	r3, [pc, #196]	; (8002ce4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c20:	0a1b      	lsrs	r3, r3, #8
 8002c22:	f003 030f 	and.w	r3, r3, #15
 8002c26:	3302      	adds	r3, #2
 8002c28:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	f04f 0200 	mov.w	r2, #0
 8002c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c34:	f04f 0400 	mov.w	r4, #0
 8002c38:	fb03 f502 	mul.w	r5, r3, r2
 8002c3c:	fb01 f004 	mul.w	r0, r1, r4
 8002c40:	4428      	add	r0, r5
 8002c42:	fba1 3403 	umull	r3, r4, r1, r3
 8002c46:	1902      	adds	r2, r0, r4
 8002c48:	4614      	mov	r4, r2
 8002c4a:	4a27      	ldr	r2, [pc, #156]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002c4c:	fb02 f104 	mul.w	r1, r2, r4
 8002c50:	2200      	movs	r2, #0
 8002c52:	fb02 f203 	mul.w	r2, r2, r3
 8002c56:	440a      	add	r2, r1
 8002c58:	4923      	ldr	r1, [pc, #140]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002c5a:	fba3 5601 	umull	r5, r6, r3, r1
 8002c5e:	1993      	adds	r3, r2, r6
 8002c60:	461e      	mov	r6, r3
 8002c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c64:	4619      	mov	r1, r3
 8002c66:	f04f 0200 	mov.w	r2, #0
 8002c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c6c:	f04f 0400 	mov.w	r4, #0
 8002c70:	fb03 fc02 	mul.w	ip, r3, r2
 8002c74:	fb01 f004 	mul.w	r0, r1, r4
 8002c78:	4460      	add	r0, ip
 8002c7a:	fba1 3403 	umull	r3, r4, r1, r3
 8002c7e:	1902      	adds	r2, r0, r4
 8002c80:	4614      	mov	r4, r2
 8002c82:	461a      	mov	r2, r3
 8002c84:	4623      	mov	r3, r4
 8002c86:	4628      	mov	r0, r5
 8002c88:	4631      	mov	r1, r6
 8002c8a:	f7fd febb 	bl	8000a04 <__aeabi_uldivmod>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	460c      	mov	r4, r1
 8002c92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c94:	e007      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 8002c96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c98:	4a13      	ldr	r2, [pc, #76]	; (8002ce8 <HAL_RCC_GetSysClockFreq+0x16c>)
 8002c9a:	fb02 f203 	mul.w	r2, r2, r3
 8002c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 8002ca6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8002caa:	461a      	mov	r2, r3
 8002cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d108      	bne.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 8002cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cb4:	085b      	lsrs	r3, r3, #1
 8002cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002cb8:	e004      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbc:	4a0b      	ldr	r2, [pc, #44]	; (8002cec <HAL_RCC_GetSysClockFreq+0x170>)
 8002cbe:	fb02 f303 	mul.w	r3, r2, r3
 8002cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8002cc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002cc6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cc8:	e002      	b.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cca:	4b09      	ldr	r3, [pc, #36]	; (8002cf0 <HAL_RCC_GetSysClockFreq+0x174>)
 8002ccc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002cce:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3744      	adds	r7, #68	; 0x44
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	08002d58 	.word	0x08002d58
 8002ce0:	08002d68 	.word	0x08002d68
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	017d7840 	.word	0x017d7840
 8002cec:	003d0900 	.word	0x003d0900
 8002cf0:	007a1200 	.word	0x007a1200

08002cf4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b085      	sub	sp, #20
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002cfc:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <RCC_Delay+0x34>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a0a      	ldr	r2, [pc, #40]	; (8002d2c <RCC_Delay+0x38>)
 8002d02:	fba2 2303 	umull	r2, r3, r2, r3
 8002d06:	0a5b      	lsrs	r3, r3, #9
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
 8002d0e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002d10:	bf00      	nop
  }
  while (Delay --);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	1e5a      	subs	r2, r3, #1
 8002d16:	60fa      	str	r2, [r7, #12]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1f9      	bne.n	8002d10 <RCC_Delay+0x1c>
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	20000000 	.word	0x20000000
 8002d2c:	10624dd3 	.word	0x10624dd3

08002d30 <memset>:
 8002d30:	4603      	mov	r3, r0
 8002d32:	4402      	add	r2, r0
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d100      	bne.n	8002d3a <memset+0xa>
 8002d38:	4770      	bx	lr
 8002d3a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d3e:	e7f9      	b.n	8002d34 <memset+0x4>

08002d40 <_init>:
 8002d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d42:	bf00      	nop
 8002d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d46:	bc08      	pop	{r3}
 8002d48:	469e      	mov	lr, r3
 8002d4a:	4770      	bx	lr

08002d4c <_fini>:
 8002d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d4e:	bf00      	nop
 8002d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002d52:	bc08      	pop	{r3}
 8002d54:	469e      	mov	lr, r3
 8002d56:	4770      	bx	lr
