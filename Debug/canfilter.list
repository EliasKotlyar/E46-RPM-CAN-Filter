
canfilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022b8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800249c  0800249c  0001249c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024cc  080024cc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080024cc  080024cc  000124cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080024d4  080024d4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024d4  080024d4  000124d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024d8  080024d8  000124d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  2000000c  080024e8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c8  080024e8  000200c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006379  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000131e  00000000  00000000  000263ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000558  00000000  00000000  000276d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004b0  00000000  00000000  00027c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a099  00000000  00000000  000280d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004dfc  00000000  00000000  00042171  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00092459  00000000  00000000  00046f6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d93c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001414  00000000  00000000  000d9444  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	2000000c 	.word	0x2000000c
 8000200:	00000000 	.word	0x00000000
 8000204:	08002484 	.word	0x08002484

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000010 	.word	0x20000010
 8000220:	08002484 	.word	0x08002484

08000224 <__aeabi_uldivmod>:
 8000224:	b953      	cbnz	r3, 800023c <__aeabi_uldivmod+0x18>
 8000226:	b94a      	cbnz	r2, 800023c <__aeabi_uldivmod+0x18>
 8000228:	2900      	cmp	r1, #0
 800022a:	bf08      	it	eq
 800022c:	2800      	cmpeq	r0, #0
 800022e:	bf1c      	itt	ne
 8000230:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000234:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000238:	f000 b974 	b.w	8000524 <__aeabi_idiv0>
 800023c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000240:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000244:	f000 f806 	bl	8000254 <__udivmoddi4>
 8000248:	f8dd e004 	ldr.w	lr, [sp, #4]
 800024c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000250:	b004      	add	sp, #16
 8000252:	4770      	bx	lr

08000254 <__udivmoddi4>:
 8000254:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000258:	468c      	mov	ip, r1
 800025a:	4604      	mov	r4, r0
 800025c:	9e08      	ldr	r6, [sp, #32]
 800025e:	2b00      	cmp	r3, #0
 8000260:	d14b      	bne.n	80002fa <__udivmoddi4+0xa6>
 8000262:	428a      	cmp	r2, r1
 8000264:	4615      	mov	r5, r2
 8000266:	d967      	bls.n	8000338 <__udivmoddi4+0xe4>
 8000268:	fab2 f282 	clz	r2, r2
 800026c:	b14a      	cbz	r2, 8000282 <__udivmoddi4+0x2e>
 800026e:	f1c2 0720 	rsb	r7, r2, #32
 8000272:	fa01 f302 	lsl.w	r3, r1, r2
 8000276:	fa20 f707 	lsr.w	r7, r0, r7
 800027a:	4095      	lsls	r5, r2
 800027c:	ea47 0c03 	orr.w	ip, r7, r3
 8000280:	4094      	lsls	r4, r2
 8000282:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000286:	fbbc f7fe 	udiv	r7, ip, lr
 800028a:	fa1f f885 	uxth.w	r8, r5
 800028e:	fb0e c317 	mls	r3, lr, r7, ip
 8000292:	fb07 f908 	mul.w	r9, r7, r8
 8000296:	0c21      	lsrs	r1, r4, #16
 8000298:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800029c:	4599      	cmp	r9, r3
 800029e:	d909      	bls.n	80002b4 <__udivmoddi4+0x60>
 80002a0:	18eb      	adds	r3, r5, r3
 80002a2:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 80002a6:	f080 811c 	bcs.w	80004e2 <__udivmoddi4+0x28e>
 80002aa:	4599      	cmp	r9, r3
 80002ac:	f240 8119 	bls.w	80004e2 <__udivmoddi4+0x28e>
 80002b0:	3f02      	subs	r7, #2
 80002b2:	442b      	add	r3, r5
 80002b4:	eba3 0309 	sub.w	r3, r3, r9
 80002b8:	fbb3 f0fe 	udiv	r0, r3, lr
 80002bc:	fb0e 3310 	mls	r3, lr, r0, r3
 80002c0:	fb00 f108 	mul.w	r1, r0, r8
 80002c4:	b2a4      	uxth	r4, r4
 80002c6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ca:	42a1      	cmp	r1, r4
 80002cc:	d909      	bls.n	80002e2 <__udivmoddi4+0x8e>
 80002ce:	192c      	adds	r4, r5, r4
 80002d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002d4:	f080 8107 	bcs.w	80004e6 <__udivmoddi4+0x292>
 80002d8:	42a1      	cmp	r1, r4
 80002da:	f240 8104 	bls.w	80004e6 <__udivmoddi4+0x292>
 80002de:	3802      	subs	r0, #2
 80002e0:	442c      	add	r4, r5
 80002e2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e6:	2700      	movs	r7, #0
 80002e8:	1a64      	subs	r4, r4, r1
 80002ea:	b11e      	cbz	r6, 80002f4 <__udivmoddi4+0xa0>
 80002ec:	2300      	movs	r3, #0
 80002ee:	40d4      	lsrs	r4, r2
 80002f0:	e9c6 4300 	strd	r4, r3, [r6]
 80002f4:	4639      	mov	r1, r7
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0xbe>
 80002fe:	2e00      	cmp	r6, #0
 8000300:	f000 80ec 	beq.w	80004dc <__udivmoddi4+0x288>
 8000304:	2700      	movs	r7, #0
 8000306:	e9c6 0100 	strd	r0, r1, [r6]
 800030a:	4638      	mov	r0, r7
 800030c:	4639      	mov	r1, r7
 800030e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000312:	fab3 f783 	clz	r7, r3
 8000316:	2f00      	cmp	r7, #0
 8000318:	d148      	bne.n	80003ac <__udivmoddi4+0x158>
 800031a:	428b      	cmp	r3, r1
 800031c:	d302      	bcc.n	8000324 <__udivmoddi4+0xd0>
 800031e:	4282      	cmp	r2, r0
 8000320:	f200 80fb 	bhi.w	800051a <__udivmoddi4+0x2c6>
 8000324:	1a84      	subs	r4, r0, r2
 8000326:	eb61 0303 	sbc.w	r3, r1, r3
 800032a:	2001      	movs	r0, #1
 800032c:	469c      	mov	ip, r3
 800032e:	2e00      	cmp	r6, #0
 8000330:	d0e0      	beq.n	80002f4 <__udivmoddi4+0xa0>
 8000332:	e9c6 4c00 	strd	r4, ip, [r6]
 8000336:	e7dd      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000338:	b902      	cbnz	r2, 800033c <__udivmoddi4+0xe8>
 800033a:	deff      	udf	#255	; 0xff
 800033c:	fab2 f282 	clz	r2, r2
 8000340:	2a00      	cmp	r2, #0
 8000342:	f040 808f 	bne.w	8000464 <__udivmoddi4+0x210>
 8000346:	2701      	movs	r7, #1
 8000348:	1b49      	subs	r1, r1, r5
 800034a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800034e:	fa1f f985 	uxth.w	r9, r5
 8000352:	fbb1 fef8 	udiv	lr, r1, r8
 8000356:	fb08 111e 	mls	r1, r8, lr, r1
 800035a:	fb09 f00e 	mul.w	r0, r9, lr
 800035e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000362:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000366:	4298      	cmp	r0, r3
 8000368:	d907      	bls.n	800037a <__udivmoddi4+0x126>
 800036a:	18eb      	adds	r3, r5, r3
 800036c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000370:	d202      	bcs.n	8000378 <__udivmoddi4+0x124>
 8000372:	4298      	cmp	r0, r3
 8000374:	f200 80cd 	bhi.w	8000512 <__udivmoddi4+0x2be>
 8000378:	468e      	mov	lr, r1
 800037a:	1a1b      	subs	r3, r3, r0
 800037c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000380:	fb08 3310 	mls	r3, r8, r0, r3
 8000384:	fb09 f900 	mul.w	r9, r9, r0
 8000388:	b2a4      	uxth	r4, r4
 800038a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800038e:	45a1      	cmp	r9, r4
 8000390:	d907      	bls.n	80003a2 <__udivmoddi4+0x14e>
 8000392:	192c      	adds	r4, r5, r4
 8000394:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000398:	d202      	bcs.n	80003a0 <__udivmoddi4+0x14c>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f200 80b6 	bhi.w	800050c <__udivmoddi4+0x2b8>
 80003a0:	4618      	mov	r0, r3
 80003a2:	eba4 0409 	sub.w	r4, r4, r9
 80003a6:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 80003aa:	e79e      	b.n	80002ea <__udivmoddi4+0x96>
 80003ac:	f1c7 0520 	rsb	r5, r7, #32
 80003b0:	40bb      	lsls	r3, r7
 80003b2:	fa22 fc05 	lsr.w	ip, r2, r5
 80003b6:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ba:	fa21 f405 	lsr.w	r4, r1, r5
 80003be:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003c2:	fbb4 f9fe 	udiv	r9, r4, lr
 80003c6:	fa1f f88c 	uxth.w	r8, ip
 80003ca:	fb0e 4419 	mls	r4, lr, r9, r4
 80003ce:	fa20 f305 	lsr.w	r3, r0, r5
 80003d2:	40b9      	lsls	r1, r7
 80003d4:	fb09 fa08 	mul.w	sl, r9, r8
 80003d8:	4319      	orrs	r1, r3
 80003da:	0c0b      	lsrs	r3, r1, #16
 80003dc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	fa02 f207 	lsl.w	r2, r2, r7
 80003e6:	fa00 f307 	lsl.w	r3, r0, r7
 80003ea:	d90b      	bls.n	8000404 <__udivmoddi4+0x1b0>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003f4:	f080 8088 	bcs.w	8000508 <__udivmoddi4+0x2b4>
 80003f8:	45a2      	cmp	sl, r4
 80003fa:	f240 8085 	bls.w	8000508 <__udivmoddi4+0x2b4>
 80003fe:	f1a9 0902 	sub.w	r9, r9, #2
 8000402:	4464      	add	r4, ip
 8000404:	eba4 040a 	sub.w	r4, r4, sl
 8000408:	fbb4 f0fe 	udiv	r0, r4, lr
 800040c:	fb0e 4410 	mls	r4, lr, r0, r4
 8000410:	fb00 fa08 	mul.w	sl, r0, r8
 8000414:	b289      	uxth	r1, r1
 8000416:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800041a:	45a2      	cmp	sl, r4
 800041c:	d908      	bls.n	8000430 <__udivmoddi4+0x1dc>
 800041e:	eb1c 0404 	adds.w	r4, ip, r4
 8000422:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000426:	d26b      	bcs.n	8000500 <__udivmoddi4+0x2ac>
 8000428:	45a2      	cmp	sl, r4
 800042a:	d969      	bls.n	8000500 <__udivmoddi4+0x2ac>
 800042c:	3802      	subs	r0, #2
 800042e:	4464      	add	r4, ip
 8000430:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000434:	fba0 8902 	umull	r8, r9, r0, r2
 8000438:	eba4 040a 	sub.w	r4, r4, sl
 800043c:	454c      	cmp	r4, r9
 800043e:	4641      	mov	r1, r8
 8000440:	46ce      	mov	lr, r9
 8000442:	d354      	bcc.n	80004ee <__udivmoddi4+0x29a>
 8000444:	d051      	beq.n	80004ea <__udivmoddi4+0x296>
 8000446:	2e00      	cmp	r6, #0
 8000448:	d069      	beq.n	800051e <__udivmoddi4+0x2ca>
 800044a:	1a5a      	subs	r2, r3, r1
 800044c:	eb64 040e 	sbc.w	r4, r4, lr
 8000450:	fa04 f505 	lsl.w	r5, r4, r5
 8000454:	fa22 f307 	lsr.w	r3, r2, r7
 8000458:	40fc      	lsrs	r4, r7
 800045a:	431d      	orrs	r5, r3
 800045c:	e9c6 5400 	strd	r5, r4, [r6]
 8000460:	2700      	movs	r7, #0
 8000462:	e747      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000464:	4095      	lsls	r5, r2
 8000466:	f1c2 0320 	rsb	r3, r2, #32
 800046a:	fa21 f003 	lsr.w	r0, r1, r3
 800046e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000472:	fbb0 f7f8 	udiv	r7, r0, r8
 8000476:	fa1f f985 	uxth.w	r9, r5
 800047a:	fb08 0017 	mls	r0, r8, r7, r0
 800047e:	fa24 f303 	lsr.w	r3, r4, r3
 8000482:	4091      	lsls	r1, r2
 8000484:	fb07 fc09 	mul.w	ip, r7, r9
 8000488:	430b      	orrs	r3, r1
 800048a:	0c19      	lsrs	r1, r3, #16
 800048c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000490:	458c      	cmp	ip, r1
 8000492:	fa04 f402 	lsl.w	r4, r4, r2
 8000496:	d907      	bls.n	80004a8 <__udivmoddi4+0x254>
 8000498:	1869      	adds	r1, r5, r1
 800049a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800049e:	d231      	bcs.n	8000504 <__udivmoddi4+0x2b0>
 80004a0:	458c      	cmp	ip, r1
 80004a2:	d92f      	bls.n	8000504 <__udivmoddi4+0x2b0>
 80004a4:	3f02      	subs	r7, #2
 80004a6:	4429      	add	r1, r5
 80004a8:	eba1 010c 	sub.w	r1, r1, ip
 80004ac:	fbb1 f0f8 	udiv	r0, r1, r8
 80004b0:	fb08 1c10 	mls	ip, r8, r0, r1
 80004b4:	fb00 fe09 	mul.w	lr, r0, r9
 80004b8:	b299      	uxth	r1, r3
 80004ba:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004be:	458e      	cmp	lr, r1
 80004c0:	d907      	bls.n	80004d2 <__udivmoddi4+0x27e>
 80004c2:	1869      	adds	r1, r5, r1
 80004c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80004c8:	d218      	bcs.n	80004fc <__udivmoddi4+0x2a8>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d916      	bls.n	80004fc <__udivmoddi4+0x2a8>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4429      	add	r1, r5
 80004d2:	eba1 010e 	sub.w	r1, r1, lr
 80004d6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004da:	e73a      	b.n	8000352 <__udivmoddi4+0xfe>
 80004dc:	4637      	mov	r7, r6
 80004de:	4630      	mov	r0, r6
 80004e0:	e708      	b.n	80002f4 <__udivmoddi4+0xa0>
 80004e2:	460f      	mov	r7, r1
 80004e4:	e6e6      	b.n	80002b4 <__udivmoddi4+0x60>
 80004e6:	4618      	mov	r0, r3
 80004e8:	e6fb      	b.n	80002e2 <__udivmoddi4+0x8e>
 80004ea:	4543      	cmp	r3, r8
 80004ec:	d2ab      	bcs.n	8000446 <__udivmoddi4+0x1f2>
 80004ee:	ebb8 0102 	subs.w	r1, r8, r2
 80004f2:	eb69 020c 	sbc.w	r2, r9, ip
 80004f6:	3801      	subs	r0, #1
 80004f8:	4696      	mov	lr, r2
 80004fa:	e7a4      	b.n	8000446 <__udivmoddi4+0x1f2>
 80004fc:	4618      	mov	r0, r3
 80004fe:	e7e8      	b.n	80004d2 <__udivmoddi4+0x27e>
 8000500:	4608      	mov	r0, r1
 8000502:	e795      	b.n	8000430 <__udivmoddi4+0x1dc>
 8000504:	4607      	mov	r7, r0
 8000506:	e7cf      	b.n	80004a8 <__udivmoddi4+0x254>
 8000508:	4681      	mov	r9, r0
 800050a:	e77b      	b.n	8000404 <__udivmoddi4+0x1b0>
 800050c:	3802      	subs	r0, #2
 800050e:	442c      	add	r4, r5
 8000510:	e747      	b.n	80003a2 <__udivmoddi4+0x14e>
 8000512:	f1ae 0e02 	sub.w	lr, lr, #2
 8000516:	442b      	add	r3, r5
 8000518:	e72f      	b.n	800037a <__udivmoddi4+0x126>
 800051a:	4638      	mov	r0, r7
 800051c:	e707      	b.n	800032e <__udivmoddi4+0xda>
 800051e:	4637      	mov	r7, r6
 8000520:	e6e8      	b.n	80002f4 <__udivmoddi4+0xa0>
 8000522:	bf00      	nop

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <canloop>:

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include <string.h>
#include "canfilter.h"
void canloop(CAN_HandleTypeDef *can1, CAN_HandleTypeDef *can2) {
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
 8000530:	6039      	str	r1, [r7, #0]
	while (1) {
		// Receive Message from Can1 & send to CAN2:
		if (HAL_CAN_GetRxFifoFillLevel(can1, CAN_RX_FIFO0) != 0) {
 8000532:	2100      	movs	r1, #0
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f001 f824 	bl	8001582 <HAL_CAN_GetRxFifoFillLevel>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d01e      	beq.n	800057e <canloop+0x56>
			if (HAL_CAN_GetRxMessage(can1, CAN_RX_FIFO0, &RxHeader, RxData)
 8000540:	4b22      	ldr	r3, [pc, #136]	; (80005cc <canloop+0xa4>)
 8000542:	4a23      	ldr	r2, [pc, #140]	; (80005d0 <canloop+0xa8>)
 8000544:	2100      	movs	r1, #0
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f000 ff0a 	bl	8001360 <HAL_CAN_GetRxMessage>
 800054c:	4603      	mov	r3, r0
 800054e:	2b00      	cmp	r3, #0
 8000550:	d001      	beq.n	8000556 <canloop+0x2e>
					!= HAL_OK) {
				/* Reception Error */
				Error_Handler();
 8000552:	f000 f9f9 	bl	8000948 <Error_Handler>
			}
			copyData();
 8000556:	f000 f843 	bl	80005e0 <copyData>
			if (HAL_CAN_GetTxMailboxesFreeLevel(can2) != 0) {
 800055a:	6838      	ldr	r0, [r7, #0]
 800055c:	f000 fecc 	bl	80012f8 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d00b      	beq.n	800057e <canloop+0x56>
				if (HAL_CAN_AddTxMessage(can2, &TxHeader, TxData, &TxMailbox)
 8000566:	4b1b      	ldr	r3, [pc, #108]	; (80005d4 <canloop+0xac>)
 8000568:	4a1b      	ldr	r2, [pc, #108]	; (80005d8 <canloop+0xb0>)
 800056a:	491c      	ldr	r1, [pc, #112]	; (80005dc <canloop+0xb4>)
 800056c:	6838      	ldr	r0, [r7, #0]
 800056e:	f000 fde9 	bl	8001144 <HAL_CAN_AddTxMessage>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d002      	beq.n	800057e <canloop+0x56>
						!= HAL_OK) {
					/* Transmission request Error */
					HAL_CAN_ResetError(can2);
 8000578:	6838      	ldr	r0, [r7, #0]
 800057a:	f001 f829 	bl	80015d0 <HAL_CAN_ResetError>
				}
			}

		}
		// Do same on Can2:
		if (HAL_CAN_GetRxFifoFillLevel(can2, CAN_RX_FIFO1) != 0) {
 800057e:	2101      	movs	r1, #1
 8000580:	6838      	ldr	r0, [r7, #0]
 8000582:	f000 fffe 	bl	8001582 <HAL_CAN_GetRxFifoFillLevel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d0d2      	beq.n	8000532 <canloop+0xa>
			if (HAL_CAN_GetRxMessage(can2, CAN_RX_FIFO1, &RxHeader, RxData)
 800058c:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <canloop+0xa4>)
 800058e:	4a10      	ldr	r2, [pc, #64]	; (80005d0 <canloop+0xa8>)
 8000590:	2101      	movs	r1, #1
 8000592:	6838      	ldr	r0, [r7, #0]
 8000594:	f000 fee4 	bl	8001360 <HAL_CAN_GetRxMessage>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <canloop+0x7a>
					!= HAL_OK) {
				/* Reception Error */
				Error_Handler();
 800059e:	f000 f9d3 	bl	8000948 <Error_Handler>
			}
			copyData();
 80005a2:	f000 f81d 	bl	80005e0 <copyData>
			if (HAL_CAN_GetTxMailboxesFreeLevel(can1) != 0) {
 80005a6:	6878      	ldr	r0, [r7, #4]
 80005a8:	f000 fea6 	bl	80012f8 <HAL_CAN_GetTxMailboxesFreeLevel>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d0bf      	beq.n	8000532 <canloop+0xa>
				if (HAL_CAN_AddTxMessage(can1, &TxHeader, TxData, &TxMailbox)
 80005b2:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <canloop+0xac>)
 80005b4:	4a08      	ldr	r2, [pc, #32]	; (80005d8 <canloop+0xb0>)
 80005b6:	4909      	ldr	r1, [pc, #36]	; (80005dc <canloop+0xb4>)
 80005b8:	6878      	ldr	r0, [r7, #4]
 80005ba:	f000 fdc3 	bl	8001144 <HAL_CAN_AddTxMessage>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d0b6      	beq.n	8000532 <canloop+0xa>
						!= HAL_OK) {
					/* Transmission request Error */
					HAL_CAN_ResetError(can1);
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	f001 f803 	bl	80015d0 <HAL_CAN_ResetError>
		if (HAL_CAN_GetRxFifoFillLevel(can1, CAN_RX_FIFO0) != 0) {
 80005ca:	e7b2      	b.n	8000532 <canloop+0xa>
 80005cc:	20000038 	.word	0x20000038
 80005d0:	20000058 	.word	0x20000058
 80005d4:	20000034 	.word	0x20000034
 80005d8:	2000002c 	.word	0x2000002c
 80005dc:	20000040 	.word	0x20000040

080005e0 <copyData>:

		}

	}
}
void copyData() {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
	memcpy(TxData, RxData, 8);
 80005e4:	4b0d      	ldr	r3, [pc, #52]	; (800061c <copyData+0x3c>)
 80005e6:	4a0e      	ldr	r2, [pc, #56]	; (8000620 <copyData+0x40>)
 80005e8:	6811      	ldr	r1, [r2, #0]
 80005ea:	6852      	ldr	r2, [r2, #4]
 80005ec:	6019      	str	r1, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
	TxHeader.DLC = RxHeader.DLC;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <copyData+0x44>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a0c      	ldr	r2, [pc, #48]	; (8000628 <copyData+0x48>)
 80005f6:	6113      	str	r3, [r2, #16]
	TxHeader.StdId = RxHeader.StdId;
 80005f8:	4b0a      	ldr	r3, [pc, #40]	; (8000624 <copyData+0x44>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <copyData+0x48>)
 80005fe:	6013      	str	r3, [r2, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <copyData+0x48>)
 8000602:	2200      	movs	r2, #0
 8000604:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 8000606:	4b08      	ldr	r3, [pc, #32]	; (8000628 <copyData+0x48>)
 8000608:	2200      	movs	r2, #0
 800060a:	609a      	str	r2, [r3, #8]
	filtercan(RxHeader.StdId, TxData);
 800060c:	4b05      	ldr	r3, [pc, #20]	; (8000624 <copyData+0x44>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4902      	ldr	r1, [pc, #8]	; (800061c <copyData+0x3c>)
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f80a 	bl	800062c <filtercan>

}
 8000618:	bf00      	nop
 800061a:	bd80      	pop	{r7, pc}
 800061c:	2000002c 	.word	0x2000002c
 8000620:	20000038 	.word	0x20000038
 8000624:	20000058 	.word	0x20000058
 8000628:	20000040 	.word	0x20000040

0800062c <filtercan>:
void filtercan(int airbid, uint8_t *data[8]) {
 800062c:	b480      	push	{r7}
 800062e:	b083      	sub	sp, #12
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]

}
 8000636:	bf00      	nop
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	bc80      	pop	{r7}
 800063e:	4770      	bx	lr

08000640 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000644:	f000 fafc 	bl	8000c40 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000648:	f000 f812 	bl	8000670 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800064c:	f000 f924 	bl	8000898 <MX_GPIO_Init>
	MX_CAN1_Init();
 8000650:	f000 f862 	bl	8000718 <MX_CAN1_Init>
	MX_CAN2_Init();
 8000654:	f000 f8c0 	bl	80007d8 <MX_CAN2_Init>
	/* USER CODE BEGIN 2 */
	canloop(&hcan1, &hcan2);
 8000658:	4903      	ldr	r1, [pc, #12]	; (8000668 <main+0x28>)
 800065a:	4804      	ldr	r0, [pc, #16]	; (800066c <main+0x2c>)
 800065c:	f7ff ff64 	bl	8000528 <canloop>
 8000660:	2300      	movs	r3, #0

	/* USER CODE END 2 */

	/* USER CODE END 3 */
}
 8000662:	4618      	mov	r0, r3
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	20000074 	.word	0x20000074
 800066c:	2000009c 	.word	0x2000009c

08000670 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b094      	sub	sp, #80	; 0x50
 8000674:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000676:	f107 0318 	add.w	r3, r7, #24
 800067a:	2238      	movs	r2, #56	; 0x38
 800067c:	2100      	movs	r1, #0
 800067e:	4618      	mov	r0, r3
 8000680:	f001 fef8 	bl	8002474 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000684:	1d3b      	adds	r3, r7, #4
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000692:	2301      	movs	r3, #1
 8000694:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000696:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800069a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 800069c:	2304      	movs	r3, #4
 800069e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006a0:	2301      	movs	r3, #1
 80006a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 80006a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006a8:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006aa:	2302      	movs	r3, #2
 80006ac:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80006b4:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80006b8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 80006ba:	2302      	movs	r3, #2
 80006bc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 80006be:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80006c2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 80006c4:	2340      	movs	r3, #64	; 0x40
 80006c6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80006c8:	f107 0318 	add.w	r3, r7, #24
 80006cc:	4618      	mov	r0, r3
 80006ce:	f001 f9f7 	bl	8001ac0 <HAL_RCC_OscConfig>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <SystemClock_Config+0x6c>
		Error_Handler();
 80006d8:	f000 f936 	bl	8000948 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80006dc:	230f      	movs	r3, #15
 80006de:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006e0:	2302      	movs	r3, #2
 80006e2:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006ec:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80006f2:	1d3b      	adds	r3, r7, #4
 80006f4:	2102      	movs	r1, #2
 80006f6:	4618      	mov	r0, r3
 80006f8:	f001 fcf8 	bl	80020ec <HAL_RCC_ClockConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x96>
		Error_Handler();
 8000702:	f000 f921 	bl	8000948 <Error_Handler>
	}
	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 8000706:	4b03      	ldr	r3, [pc, #12]	; (8000714 <SystemClock_Config+0xa4>)
 8000708:	2201      	movs	r2, #1
 800070a:	601a      	str	r2, [r3, #0]
}
 800070c:	bf00      	nop
 800070e:	3750      	adds	r7, #80	; 0x50
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}
 8000714:	42420070 	.word	0x42420070

08000718 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8000718:	b580      	push	{r7, lr}
 800071a:	b08a      	sub	sp, #40	; 0x28
 800071c:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */
	CAN_FilterTypeDef sFilterConfig;
	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 800071e:	4b2c      	ldr	r3, [pc, #176]	; (80007d0 <MX_CAN1_Init+0xb8>)
 8000720:	4a2c      	ldr	r2, [pc, #176]	; (80007d4 <MX_CAN1_Init+0xbc>)
 8000722:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 6;
 8000724:	4b2a      	ldr	r3, [pc, #168]	; (80007d0 <MX_CAN1_Init+0xb8>)
 8000726:	2206      	movs	r2, #6
 8000728:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800072a:	4b29      	ldr	r3, [pc, #164]	; (80007d0 <MX_CAN1_Init+0xb8>)
 800072c:	2200      	movs	r2, #0
 800072e:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000730:	4b27      	ldr	r3, [pc, #156]	; (80007d0 <MX_CAN1_Init+0xb8>)
 8000732:	2200      	movs	r2, #0
 8000734:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8000736:	4b26      	ldr	r3, [pc, #152]	; (80007d0 <MX_CAN1_Init+0xb8>)
 8000738:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800073c:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800073e:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <MX_CAN1_Init+0xb8>)
 8000740:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000744:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8000746:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <MX_CAN1_Init+0xb8>)
 8000748:	2200      	movs	r2, #0
 800074a:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800074c:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <MX_CAN1_Init+0xb8>)
 800074e:	2200      	movs	r2, #0
 8000750:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8000752:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <MX_CAN1_Init+0xb8>)
 8000754:	2200      	movs	r2, #0
 8000756:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8000758:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <MX_CAN1_Init+0xb8>)
 800075a:	2200      	movs	r2, #0
 800075c:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_CAN1_Init+0xb8>)
 8000760:	2200      	movs	r2, #0
 8000762:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8000764:	4b1a      	ldr	r3, [pc, #104]	; (80007d0 <MX_CAN1_Init+0xb8>)
 8000766:	2200      	movs	r2, #0
 8000768:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 800076a:	4819      	ldr	r0, [pc, #100]	; (80007d0 <MX_CAN1_Init+0xb8>)
 800076c:	f000 faca 	bl	8000d04 <HAL_CAN_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_CAN1_Init+0x62>
		Error_Handler();
 8000776:	f000 f8e7 	bl	8000948 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/*##-2- Configure the CAN Filter ###########################################*/

	sFilterConfig.FilterBank = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000782:	2301      	movs	r3, #1
 8000784:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8000786:	2300      	movs	r3, #0
 8000788:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800078a:	2300      	movs	r3, #0
 800078c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800078e:	2300      	movs	r3, #0
 8000790:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000792:	2300      	movs	r3, #0
 8000794:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800079a:	2301      	movs	r3, #1
 800079c:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 14;
 800079e:	230e      	movs	r3, #14
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80007a2:	463b      	mov	r3, r7
 80007a4:	4619      	mov	r1, r3
 80007a6:	480a      	ldr	r0, [pc, #40]	; (80007d0 <MX_CAN1_Init+0xb8>)
 80007a8:	f000 fba8 	bl	8000efc <HAL_CAN_ConfigFilter>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_CAN1_Init+0x9e>
		/* Filter configuration Error */
		Error_Handler();
 80007b2:	f000 f8c9 	bl	8000948 <Error_Handler>
	}
	/*##-3- Start the CAN peripheral ###########################################*/
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80007b6:	4806      	ldr	r0, [pc, #24]	; (80007d0 <MX_CAN1_Init+0xb8>)
 80007b8:	f000 fc80 	bl	80010bc <HAL_CAN_Start>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_CAN1_Init+0xae>
		/* Start Error */
		Error_Handler();
 80007c2:	f000 f8c1 	bl	8000948 <Error_Handler>
	}



}
 80007c6:	bf00      	nop
 80007c8:	3728      	adds	r7, #40	; 0x28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	2000009c 	.word	0x2000009c
 80007d4:	40006400 	.word	0x40006400

080007d8 <MX_CAN2_Init>:
/**
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void) {
 80007d8:	b580      	push	{r7, lr}
 80007da:	b08a      	sub	sp, #40	; 0x28
 80007dc:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 80007de:	4b2c      	ldr	r3, [pc, #176]	; (8000890 <MX_CAN2_Init+0xb8>)
 80007e0:	4a2c      	ldr	r2, [pc, #176]	; (8000894 <MX_CAN2_Init+0xbc>)
 80007e2:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 6;
 80007e4:	4b2a      	ldr	r3, [pc, #168]	; (8000890 <MX_CAN2_Init+0xb8>)
 80007e6:	2206      	movs	r2, #6
 80007e8:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <MX_CAN2_Init+0xb8>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007f0:	4b27      	ldr	r3, [pc, #156]	; (8000890 <MX_CAN2_Init+0xb8>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_8TQ;
 80007f6:	4b26      	ldr	r3, [pc, #152]	; (8000890 <MX_CAN2_Init+0xb8>)
 80007f8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80007fc:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80007fe:	4b24      	ldr	r3, [pc, #144]	; (8000890 <MX_CAN2_Init+0xb8>)
 8000800:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000804:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8000806:	4b22      	ldr	r3, [pc, #136]	; (8000890 <MX_CAN2_Init+0xb8>)
 8000808:	2200      	movs	r2, #0
 800080a:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <MX_CAN2_Init+0xb8>)
 800080e:	2200      	movs	r2, #0
 8000810:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8000812:	4b1f      	ldr	r3, [pc, #124]	; (8000890 <MX_CAN2_Init+0xb8>)
 8000814:	2200      	movs	r2, #0
 8000816:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <MX_CAN2_Init+0xb8>)
 800081a:	2200      	movs	r2, #0
 800081c:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 800081e:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <MX_CAN2_Init+0xb8>)
 8000820:	2200      	movs	r2, #0
 8000822:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8000824:	4b1a      	ldr	r3, [pc, #104]	; (8000890 <MX_CAN2_Init+0xb8>)
 8000826:	2200      	movs	r2, #0
 8000828:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 800082a:	4819      	ldr	r0, [pc, #100]	; (8000890 <MX_CAN2_Init+0xb8>)
 800082c:	f000 fa6a 	bl	8000d04 <HAL_CAN_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_CAN2_Init+0x62>
		Error_Handler();
 8000836:	f000 f887 	bl	8000948 <Error_Handler>
	}

	sFilterConfig.FilterBank = 15;
 800083a:	230f      	movs	r3, #15
 800083c:	617b      	str	r3, [r7, #20]
	sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 800083e:	2300      	movs	r3, #0
 8000840:	61bb      	str	r3, [r7, #24]
	sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000842:	2301      	movs	r3, #1
 8000844:	61fb      	str	r3, [r7, #28]
	sFilterConfig.FilterIdHigh = 0x0000;
 8000846:	2300      	movs	r3, #0
 8000848:	603b      	str	r3, [r7, #0]
	sFilterConfig.FilterIdLow = 0x0000;
 800084a:	2300      	movs	r3, #0
 800084c:	607b      	str	r3, [r7, #4]
	sFilterConfig.FilterMaskIdHigh = 0x0000;
 800084e:	2300      	movs	r3, #0
 8000850:	60bb      	str	r3, [r7, #8]
	sFilterConfig.FilterMaskIdLow = 0x0000;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
	sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000856:	2301      	movs	r3, #1
 8000858:	613b      	str	r3, [r7, #16]
	sFilterConfig.FilterActivation = ENABLE;
 800085a:	2301      	movs	r3, #1
 800085c:	623b      	str	r3, [r7, #32]
	sFilterConfig.SlaveStartFilterBank = 15;
 800085e:	230f      	movs	r3, #15
 8000860:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig) != HAL_OK) {
 8000862:	463b      	mov	r3, r7
 8000864:	4619      	mov	r1, r3
 8000866:	480a      	ldr	r0, [pc, #40]	; (8000890 <MX_CAN2_Init+0xb8>)
 8000868:	f000 fb48 	bl	8000efc <HAL_CAN_ConfigFilter>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_CAN2_Init+0x9e>
		/* Filter configuration Error */
		Error_Handler();
 8000872:	f000 f869 	bl	8000948 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */
	if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 8000876:	4806      	ldr	r0, [pc, #24]	; (8000890 <MX_CAN2_Init+0xb8>)
 8000878:	f000 fc20 	bl	80010bc <HAL_CAN_Start>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_CAN2_Init+0xae>
		/* Start Error */
		Error_Handler();
 8000882:	f000 f861 	bl	8000948 <Error_Handler>
	}
	/* USER CODE END CAN2_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3728      	adds	r7, #40	; 0x28
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000074 	.word	0x20000074
 8000894:	40006800 	.word	0x40006800

08000898 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000898:	b580      	push	{r7, lr}
 800089a:	b088      	sub	sp, #32
 800089c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800089e:	f107 0310 	add.w	r3, r7, #16
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]
 80008aa:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80008ac:	4b24      	ldr	r3, [pc, #144]	; (8000940 <MX_GPIO_Init+0xa8>)
 80008ae:	699b      	ldr	r3, [r3, #24]
 80008b0:	4a23      	ldr	r2, [pc, #140]	; (8000940 <MX_GPIO_Init+0xa8>)
 80008b2:	f043 0320 	orr.w	r3, r3, #32
 80008b6:	6193      	str	r3, [r2, #24]
 80008b8:	4b21      	ldr	r3, [pc, #132]	; (8000940 <MX_GPIO_Init+0xa8>)
 80008ba:	699b      	ldr	r3, [r3, #24]
 80008bc:	f003 0320 	and.w	r3, r3, #32
 80008c0:	60fb      	str	r3, [r7, #12]
 80008c2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008c4:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <MX_GPIO_Init+0xa8>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a1d      	ldr	r2, [pc, #116]	; (8000940 <MX_GPIO_Init+0xa8>)
 80008ca:	f043 0304 	orr.w	r3, r3, #4
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <MX_GPIO_Init+0xa8>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f003 0304 	and.w	r3, r3, #4
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <MX_GPIO_Init+0xa8>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a17      	ldr	r2, [pc, #92]	; (8000940 <MX_GPIO_Init+0xa8>)
 80008e2:	f043 0310 	orr.w	r3, r3, #16
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <MX_GPIO_Init+0xa8>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0310 	and.w	r3, r3, #16
 80008f0:	607b      	str	r3, [r7, #4]
 80008f2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_GPIO_Init+0xa8>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a11      	ldr	r2, [pc, #68]	; (8000940 <MX_GPIO_Init+0xa8>)
 80008fa:	f043 0308 	orr.w	r3, r3, #8
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_GPIO_Init+0xa8>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f003 0308 	and.w	r3, r3, #8
 8000908:	603b      	str	r3, [r7, #0]
 800090a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 800090c:	2201      	movs	r2, #1
 800090e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000912:	480c      	ldr	r0, [pc, #48]	; (8000944 <MX_GPIO_Init+0xac>)
 8000914:	f001 f8bc 	bl	8001a90 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000918:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091e:	2301      	movs	r3, #1
 8000920:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000922:	2300      	movs	r3, #0
 8000924:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000926:	2302      	movs	r3, #2
 8000928:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800092a:	f107 0310 	add.w	r3, r7, #16
 800092e:	4619      	mov	r1, r3
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_GPIO_Init+0xac>)
 8000932:	f000 ff53 	bl	80017dc <HAL_GPIO_Init>

}
 8000936:	bf00      	nop
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000
 8000944:	40011000 	.word	0x40011000

08000948 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
	//HAL_Delay(300);
	/* USER CODE BEGIN 3 */
	//}
	/* USER CODE END Error_Handler_Debug */
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800095a:	4b16      	ldr	r3, [pc, #88]	; (80009b4 <HAL_MspInit+0x60>)
 800095c:	699b      	ldr	r3, [r3, #24]
 800095e:	4a15      	ldr	r2, [pc, #84]	; (80009b4 <HAL_MspInit+0x60>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6193      	str	r3, [r2, #24]
 8000966:	4b13      	ldr	r3, [pc, #76]	; (80009b4 <HAL_MspInit+0x60>)
 8000968:	699b      	ldr	r3, [r3, #24]
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <HAL_MspInit+0x60>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <HAL_MspInit+0x60>)
 8000978:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800097c:	61d3      	str	r3, [r2, #28]
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <HAL_MspInit+0x60>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800098a:	2007      	movs	r0, #7
 800098c:	f000 fef2 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000990:	4b09      	ldr	r3, [pc, #36]	; (80009b8 <HAL_MspInit+0x64>)
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	60fb      	str	r3, [r7, #12]
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800099c:	60fb      	str	r3, [r7, #12]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009a4:	60fb      	str	r3, [r7, #12]
 80009a6:	4a04      	ldr	r2, [pc, #16]	; (80009b8 <HAL_MspInit+0x64>)
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	40021000 	.word	0x40021000
 80009b8:	40010000 	.word	0x40010000

080009bc <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08c      	sub	sp, #48	; 0x30
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	2200      	movs	r2, #0
 80009ca:	601a      	str	r2, [r3, #0]
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	609a      	str	r2, [r3, #8]
 80009d0:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a4d      	ldr	r2, [pc, #308]	; (8000b0c <HAL_CAN_MspInit+0x150>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d13b      	bne.n	8000a54 <HAL_CAN_MspInit+0x98>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80009dc:	4b4c      	ldr	r3, [pc, #304]	; (8000b10 <HAL_CAN_MspInit+0x154>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	3301      	adds	r3, #1
 80009e2:	4a4b      	ldr	r2, [pc, #300]	; (8000b10 <HAL_CAN_MspInit+0x154>)
 80009e4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80009e6:	4b4a      	ldr	r3, [pc, #296]	; (8000b10 <HAL_CAN_MspInit+0x154>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d10b      	bne.n	8000a06 <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80009ee:	4b49      	ldr	r3, [pc, #292]	; (8000b14 <HAL_CAN_MspInit+0x158>)
 80009f0:	69db      	ldr	r3, [r3, #28]
 80009f2:	4a48      	ldr	r2, [pc, #288]	; (8000b14 <HAL_CAN_MspInit+0x158>)
 80009f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009f8:	61d3      	str	r3, [r2, #28]
 80009fa:	4b46      	ldr	r3, [pc, #280]	; (8000b14 <HAL_CAN_MspInit+0x158>)
 80009fc:	69db      	ldr	r3, [r3, #28]
 80009fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a02:	61bb      	str	r3, [r7, #24]
 8000a04:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	4b43      	ldr	r3, [pc, #268]	; (8000b14 <HAL_CAN_MspInit+0x158>)
 8000a08:	699b      	ldr	r3, [r3, #24]
 8000a0a:	4a42      	ldr	r2, [pc, #264]	; (8000b14 <HAL_CAN_MspInit+0x158>)
 8000a0c:	f043 0304 	orr.w	r3, r3, #4
 8000a10:	6193      	str	r3, [r2, #24]
 8000a12:	4b40      	ldr	r3, [pc, #256]	; (8000b14 <HAL_CAN_MspInit+0x158>)
 8000a14:	699b      	ldr	r3, [r3, #24]
 8000a16:	f003 0304 	and.w	r3, r3, #4
 8000a1a:	617b      	str	r3, [r7, #20]
 8000a1c:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000a1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a24:	2300      	movs	r3, #0
 8000a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4839      	ldr	r0, [pc, #228]	; (8000b18 <HAL_CAN_MspInit+0x15c>)
 8000a34:	f000 fed2 	bl	80017dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a3e:	2302      	movs	r3, #2
 8000a40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a42:	2303      	movs	r3, #3
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	4832      	ldr	r0, [pc, #200]	; (8000b18 <HAL_CAN_MspInit+0x15c>)
 8000a4e:	f000 fec5 	bl	80017dc <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8000a52:	e057      	b.n	8000b04 <HAL_CAN_MspInit+0x148>
  else if(hcan->Instance==CAN2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a30      	ldr	r2, [pc, #192]	; (8000b1c <HAL_CAN_MspInit+0x160>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d152      	bne.n	8000b04 <HAL_CAN_MspInit+0x148>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000a5e:	4b2d      	ldr	r3, [pc, #180]	; (8000b14 <HAL_CAN_MspInit+0x158>)
 8000a60:	69db      	ldr	r3, [r3, #28]
 8000a62:	4a2c      	ldr	r2, [pc, #176]	; (8000b14 <HAL_CAN_MspInit+0x158>)
 8000a64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a68:	61d3      	str	r3, [r2, #28]
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <HAL_CAN_MspInit+0x158>)
 8000a6c:	69db      	ldr	r3, [r3, #28]
 8000a6e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000a76:	4b26      	ldr	r3, [pc, #152]	; (8000b10 <HAL_CAN_MspInit+0x154>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	4a24      	ldr	r2, [pc, #144]	; (8000b10 <HAL_CAN_MspInit+0x154>)
 8000a7e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a80:	4b23      	ldr	r3, [pc, #140]	; (8000b10 <HAL_CAN_MspInit+0x154>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d10b      	bne.n	8000aa0 <HAL_CAN_MspInit+0xe4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000a88:	4b22      	ldr	r3, [pc, #136]	; (8000b14 <HAL_CAN_MspInit+0x158>)
 8000a8a:	69db      	ldr	r3, [r3, #28]
 8000a8c:	4a21      	ldr	r2, [pc, #132]	; (8000b14 <HAL_CAN_MspInit+0x158>)
 8000a8e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a92:	61d3      	str	r3, [r2, #28]
 8000a94:	4b1f      	ldr	r3, [pc, #124]	; (8000b14 <HAL_CAN_MspInit+0x158>)
 8000a96:	69db      	ldr	r3, [r3, #28]
 8000a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa0:	4b1c      	ldr	r3, [pc, #112]	; (8000b14 <HAL_CAN_MspInit+0x158>)
 8000aa2:	699b      	ldr	r3, [r3, #24]
 8000aa4:	4a1b      	ldr	r2, [pc, #108]	; (8000b14 <HAL_CAN_MspInit+0x158>)
 8000aa6:	f043 0308 	orr.w	r3, r3, #8
 8000aaa:	6193      	str	r3, [r2, #24]
 8000aac:	4b19      	ldr	r3, [pc, #100]	; (8000b14 <HAL_CAN_MspInit+0x158>)
 8000aae:	699b      	ldr	r3, [r3, #24]
 8000ab0:	f003 0308 	and.w	r3, r3, #8
 8000ab4:	60bb      	str	r3, [r7, #8]
 8000ab6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000ab8:	2320      	movs	r3, #32
 8000aba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000abc:	2300      	movs	r3, #0
 8000abe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac4:	f107 031c 	add.w	r3, r7, #28
 8000ac8:	4619      	mov	r1, r3
 8000aca:	4815      	ldr	r0, [pc, #84]	; (8000b20 <HAL_CAN_MspInit+0x164>)
 8000acc:	f000 fe86 	bl	80017dc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ad0:	2340      	movs	r3, #64	; 0x40
 8000ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000adc:	f107 031c 	add.w	r3, r7, #28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480f      	ldr	r0, [pc, #60]	; (8000b20 <HAL_CAN_MspInit+0x164>)
 8000ae4:	f000 fe7a 	bl	80017dc <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_CAN2_ENABLE();
 8000ae8:	4b0e      	ldr	r3, [pc, #56]	; (8000b24 <HAL_CAN_MspInit+0x168>)
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af0:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000af8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000afc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000afe:	4a09      	ldr	r2, [pc, #36]	; (8000b24 <HAL_CAN_MspInit+0x168>)
 8000b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b02:	6053      	str	r3, [r2, #4]
}
 8000b04:	bf00      	nop
 8000b06:	3730      	adds	r7, #48	; 0x30
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40006400 	.word	0x40006400
 8000b10:	20000028 	.word	0x20000028
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010800 	.word	0x40010800
 8000b1c:	40006800 	.word	0x40006800
 8000b20:	40010c00 	.word	0x40010c00
 8000b24:	40010000 	.word	0x40010000

08000b28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b2c:	bf00      	nop
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bc80      	pop	{r7}
 8000b32:	4770      	bx	lr

08000b34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <HardFault_Handler+0x4>

08000b3a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <MemManage_Handler+0x4>

08000b40 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <BusFault_Handler+0x4>

08000b46 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <UsageFault_Handler+0x4>

08000b4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr

08000b64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b68:	bf00      	nop
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bc80      	pop	{r7}
 8000b6e:	4770      	bx	lr

08000b70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b74:	f000 f8aa 	bl	8000ccc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <SystemInit+0x70>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a19      	ldr	r2, [pc, #100]	; (8000bec <SystemInit+0x70>)
 8000b86:	f043 0301 	orr.w	r3, r3, #1
 8000b8a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 8000b8c:	4b17      	ldr	r3, [pc, #92]	; (8000bec <SystemInit+0x70>)
 8000b8e:	685a      	ldr	r2, [r3, #4]
 8000b90:	4916      	ldr	r1, [pc, #88]	; (8000bec <SystemInit+0x70>)
 8000b92:	4b17      	ldr	r3, [pc, #92]	; (8000bf0 <SystemInit+0x74>)
 8000b94:	4013      	ands	r3, r2
 8000b96:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <SystemInit+0x70>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a13      	ldr	r2, [pc, #76]	; (8000bec <SystemInit+0x70>)
 8000b9e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000ba2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ba6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ba8:	4b10      	ldr	r3, [pc, #64]	; (8000bec <SystemInit+0x70>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a0f      	ldr	r2, [pc, #60]	; (8000bec <SystemInit+0x70>)
 8000bae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000bb2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000bb4:	4b0d      	ldr	r3, [pc, #52]	; (8000bec <SystemInit+0x70>)
 8000bb6:	685b      	ldr	r3, [r3, #4]
 8000bb8:	4a0c      	ldr	r2, [pc, #48]	; (8000bec <SystemInit+0x70>)
 8000bba:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000bbe:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <SystemInit+0x70>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a09      	ldr	r2, [pc, #36]	; (8000bec <SystemInit+0x70>)
 8000bc6:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8000bca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	; (8000bec <SystemInit+0x70>)
 8000bce:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 8000bd2:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 8000bd4:	4b05      	ldr	r3, [pc, #20]	; (8000bec <SystemInit+0x70>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <SystemInit+0x78>)
 8000bdc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000be0:	609a      	str	r2, [r3, #8]
#endif 
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bc80      	pop	{r7}
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	f0ff0000 	.word	0xf0ff0000
 8000bf4:	e000ed00 	.word	0xe000ed00

08000bf8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000bf8:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000bfa:	e003      	b.n	8000c04 <LoopCopyDataInit>

08000bfc <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000bfc:	4b0a      	ldr	r3, [pc, #40]	; (8000c28 <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 8000bfe:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c00:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c02:	3104      	adds	r1, #4

08000c04 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c04:	4809      	ldr	r0, [pc, #36]	; (8000c2c <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 8000c08:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c0a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c0c:	d3f6      	bcc.n	8000bfc <CopyDataInit>
  ldr r2, =_sbss
 8000c0e:	4a09      	ldr	r2, [pc, #36]	; (8000c34 <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 8000c10:	e002      	b.n	8000c18 <LoopFillZerobss>

08000c12 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000c14:	f842 3b04 	str.w	r3, [r2], #4

08000c18 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <LoopFillZerobss+0x20>)
  cmp r2, r3
 8000c1a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c1c:	d3f9      	bcc.n	8000c12 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000c1e:	f7ff ffad 	bl	8000b7c <SystemInit>
/* Call the application's entry point.*/
  bl main
 8000c22:	f7ff fd0d 	bl	8000640 <main>
  bx lr
 8000c26:	4770      	bx	lr
  ldr r3, =_sidata
 8000c28:	080024dc 	.word	0x080024dc
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c30:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000c34:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000c38:	200000c8 	.word	0x200000c8

08000c3c <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC1_2_IRQHandler>
	...

08000c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <HAL_Init+0x28>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a07      	ldr	r2, [pc, #28]	; (8000c68 <HAL_Init+0x28>)
 8000c4a:	f043 0310 	orr.w	r3, r3, #16
 8000c4e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 fd8f 	bl	8001774 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c56:	2000      	movs	r0, #0
 8000c58:	f000 f808 	bl	8000c6c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c5c:	f7ff fe7a 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c60:	2300      	movs	r3, #0
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	40022000 	.word	0x40022000

08000c6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_InitTick+0x54>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	4b12      	ldr	r3, [pc, #72]	; (8000cc4 <HAL_InitTick+0x58>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fd99 	bl	80017c2 <HAL_SYSTICK_Config>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c96:	2301      	movs	r3, #1
 8000c98:	e00e      	b.n	8000cb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	2b0f      	cmp	r3, #15
 8000c9e:	d80a      	bhi.n	8000cb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	6879      	ldr	r1, [r7, #4]
 8000ca4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ca8:	f000 fd6f 	bl	800178a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cac:	4a06      	ldr	r2, [pc, #24]	; (8000cc8 <HAL_InitTick+0x5c>)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	e000      	b.n	8000cb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cb6:	2301      	movs	r3, #1
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3708      	adds	r7, #8
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000000 	.word	0x20000000
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	20000004 	.word	0x20000004

08000ccc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cd0:	4b05      	ldr	r3, [pc, #20]	; (8000ce8 <HAL_IncTick+0x1c>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	4b05      	ldr	r3, [pc, #20]	; (8000cec <HAL_IncTick+0x20>)
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	4a03      	ldr	r2, [pc, #12]	; (8000cec <HAL_IncTick+0x20>)
 8000cde:	6013      	str	r3, [r2, #0]
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bc80      	pop	{r7}
 8000ce6:	4770      	bx	lr
 8000ce8:	20000008 	.word	0x20000008
 8000cec:	200000c4 	.word	0x200000c4

08000cf0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  return uwTick;
 8000cf4:	4b02      	ldr	r3, [pc, #8]	; (8000d00 <HAL_GetTick+0x10>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	200000c4 	.word	0x200000c4

08000d04 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b084      	sub	sp, #16
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d101      	bne.n	8000d16 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e0ed      	b.n	8000ef2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000d1c:	b2db      	uxtb	r3, r3
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d102      	bne.n	8000d28 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	f7ff fe4a 	bl	80009bc <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	681a      	ldr	r2, [r3, #0]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f022 0202 	bic.w	r2, r2, #2
 8000d36:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d38:	f7ff ffda 	bl	8000cf0 <HAL_GetTick>
 8000d3c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d3e:	e012      	b.n	8000d66 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d40:	f7ff ffd6 	bl	8000cf0 <HAL_GetTick>
 8000d44:	4602      	mov	r2, r0
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	1ad3      	subs	r3, r2, r3
 8000d4a:	2b0a      	cmp	r3, #10
 8000d4c:	d90b      	bls.n	8000d66 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d52:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	2205      	movs	r2, #5
 8000d5e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000d62:	2301      	movs	r3, #1
 8000d64:	e0c5      	b.n	8000ef2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0302 	and.w	r3, r3, #2
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d1e5      	bne.n	8000d40 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f042 0201 	orr.w	r2, r2, #1
 8000d82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d84:	f7ff ffb4 	bl	8000cf0 <HAL_GetTick>
 8000d88:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000d8a:	e012      	b.n	8000db2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8000d8c:	f7ff ffb0 	bl	8000cf0 <HAL_GetTick>
 8000d90:	4602      	mov	r2, r0
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	2b0a      	cmp	r3, #10
 8000d98:	d90b      	bls.n	8000db2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d9e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2205      	movs	r2, #5
 8000daa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8000dae:	2301      	movs	r3, #1
 8000db0:	e09f      	b.n	8000ef2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d0e5      	beq.n	8000d8c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	7e1b      	ldrb	r3, [r3, #24]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d108      	bne.n	8000dda <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	e007      	b.n	8000dea <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000de8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	7e5b      	ldrb	r3, [r3, #25]
 8000dee:	2b01      	cmp	r3, #1
 8000df0:	d108      	bne.n	8000e04 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	e007      	b.n	8000e14 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e12:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	7e9b      	ldrb	r3, [r3, #26]
 8000e18:	2b01      	cmp	r3, #1
 8000e1a:	d108      	bne.n	8000e2e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	681a      	ldr	r2, [r3, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	f042 0220 	orr.w	r2, r2, #32
 8000e2a:	601a      	str	r2, [r3, #0]
 8000e2c:	e007      	b.n	8000e3e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	f022 0220 	bic.w	r2, r2, #32
 8000e3c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	7edb      	ldrb	r3, [r3, #27]
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d108      	bne.n	8000e58 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f022 0210 	bic.w	r2, r2, #16
 8000e54:	601a      	str	r2, [r3, #0]
 8000e56:	e007      	b.n	8000e68 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0210 	orr.w	r2, r2, #16
 8000e66:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	7f1b      	ldrb	r3, [r3, #28]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d108      	bne.n	8000e82 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	f042 0208 	orr.w	r2, r2, #8
 8000e7e:	601a      	str	r2, [r3, #0]
 8000e80:	e007      	b.n	8000e92 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681a      	ldr	r2, [r3, #0]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f022 0208 	bic.w	r2, r2, #8
 8000e90:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	7f5b      	ldrb	r3, [r3, #29]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d108      	bne.n	8000eac <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	f042 0204 	orr.w	r2, r2, #4
 8000ea8:	601a      	str	r2, [r3, #0]
 8000eaa:	e007      	b.n	8000ebc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 0204 	bic.w	r2, r2, #4
 8000eba:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689a      	ldr	r2, [r3, #8]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	431a      	orrs	r2, r3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	691b      	ldr	r3, [r3, #16]
 8000eca:	431a      	orrs	r2, r3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	695b      	ldr	r3, [r3, #20]
 8000ed0:	ea42 0103 	orr.w	r1, r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	1e5a      	subs	r2, r3, #1
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	430a      	orrs	r2, r1
 8000ee0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2201      	movs	r2, #1
 8000eec:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8000ef0:	2300      	movs	r3, #0
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3710      	adds	r7, #16
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
	...

08000efc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b087      	sub	sp, #28
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f12:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8000f14:	7cfb      	ldrb	r3, [r7, #19]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d003      	beq.n	8000f22 <HAL_CAN_ConfigFilter+0x26>
 8000f1a:	7cfb      	ldrb	r3, [r7, #19]
 8000f1c:	2b02      	cmp	r3, #2
 8000f1e:	f040 80be 	bne.w	800109e <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8000f22:	4b65      	ldr	r3, [pc, #404]	; (80010b8 <HAL_CAN_ConfigFilter+0x1bc>)
 8000f24:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f2c:	f043 0201 	orr.w	r2, r3, #1
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000f3c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8000f40:	697b      	ldr	r3, [r7, #20]
 8000f42:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f50:	021b      	lsls	r3, r3, #8
 8000f52:	431a      	orrs	r2, r3
 8000f54:	697b      	ldr	r3, [r7, #20]
 8000f56:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	695b      	ldr	r3, [r3, #20]
 8000f5e:	f003 031f 	and.w	r3, r3, #31
 8000f62:	2201      	movs	r2, #1
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	43db      	mvns	r3, r3
 8000f74:	401a      	ands	r2, r3
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	69db      	ldr	r3, [r3, #28]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d123      	bne.n	8000fcc <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	43db      	mvns	r3, r3
 8000f8e:	401a      	ands	r2, r3
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fa2:	683a      	ldr	r2, [r7, #0]
 8000fa4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8000fa6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	3248      	adds	r2, #72	; 0x48
 8000fac:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	689b      	ldr	r3, [r3, #8]
 8000fb4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000fc0:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8000fc2:	6979      	ldr	r1, [r7, #20]
 8000fc4:	3348      	adds	r3, #72	; 0x48
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	440b      	add	r3, r1
 8000fca:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	69db      	ldr	r3, [r3, #28]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d122      	bne.n	800101a <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ff0:	683a      	ldr	r2, [r7, #0]
 8000ff2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8000ff4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	3248      	adds	r2, #72	; 0x48
 8000ffa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800100e:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001010:	6979      	ldr	r1, [r7, #20]
 8001012:	3348      	adds	r3, #72	; 0x48
 8001014:	00db      	lsls	r3, r3, #3
 8001016:	440b      	add	r3, r1
 8001018:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	699b      	ldr	r3, [r3, #24]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d109      	bne.n	8001036 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	43db      	mvns	r3, r3
 800102c:	401a      	ands	r2, r3
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001034:	e007      	b.n	8001046 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	431a      	orrs	r2, r3
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	691b      	ldr	r3, [r3, #16]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d109      	bne.n	8001062 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	43db      	mvns	r3, r3
 8001058:	401a      	ands	r2, r3
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001060:	e007      	b.n	8001072 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	431a      	orrs	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	6a1b      	ldr	r3, [r3, #32]
 8001076:	2b01      	cmp	r3, #1
 8001078:	d107      	bne.n	800108a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	431a      	orrs	r2, r3
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001090:	f023 0201 	bic.w	r2, r3, #1
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	e006      	b.n	80010ac <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010a2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
  }
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	371c      	adds	r7, #28
 80010b0:	46bd      	mov	sp, r7
 80010b2:	bc80      	pop	{r7}
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40006400 	.word	0x40006400

080010bc <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b084      	sub	sp, #16
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d12e      	bne.n	800112e <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2202      	movs	r2, #2
 80010d4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f022 0201 	bic.w	r2, r2, #1
 80010e6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80010e8:	f7ff fe02 	bl	8000cf0 <HAL_GetTick>
 80010ec:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80010ee:	e012      	b.n	8001116 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80010f0:	f7ff fdfe 	bl	8000cf0 <HAL_GetTick>
 80010f4:	4602      	mov	r2, r0
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	1ad3      	subs	r3, r2, r3
 80010fa:	2b0a      	cmp	r3, #10
 80010fc:	d90b      	bls.n	8001116 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001102:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2205      	movs	r2, #5
 800110e:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001112:	2301      	movs	r3, #1
 8001114:	e012      	b.n	800113c <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0301 	and.w	r3, r3, #1
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1e5      	bne.n	80010f0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800112a:	2300      	movs	r3, #0
 800112c:	e006      	b.n	800113c <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
  }
}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}

08001144 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001144:	b480      	push	{r7}
 8001146:	b089      	sub	sp, #36	; 0x24
 8001148:	af00      	add	r7, sp, #0
 800114a:	60f8      	str	r0, [r7, #12]
 800114c:	60b9      	str	r1, [r7, #8]
 800114e:	607a      	str	r2, [r7, #4]
 8001150:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001158:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001162:	7ffb      	ldrb	r3, [r7, #31]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d003      	beq.n	8001170 <HAL_CAN_AddTxMessage+0x2c>
 8001168:	7ffb      	ldrb	r3, [r7, #31]
 800116a:	2b02      	cmp	r3, #2
 800116c:	f040 80b8 	bne.w	80012e0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d10a      	bne.n	8001190 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800117a:	69bb      	ldr	r3, [r7, #24]
 800117c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001180:	2b00      	cmp	r3, #0
 8001182:	d105      	bne.n	8001190 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001184:	69bb      	ldr	r3, [r7, #24]
 8001186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 80a0 	beq.w	80012d0 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	0e1b      	lsrs	r3, r3, #24
 8001194:	f003 0303 	and.w	r3, r3, #3
 8001198:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 800119a:	697b      	ldr	r3, [r7, #20]
 800119c:	2b02      	cmp	r3, #2
 800119e:	d907      	bls.n	80011b0 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80011ac:	2301      	movs	r3, #1
 80011ae:	e09e      	b.n	80012ee <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80011b0:	2201      	movs	r2, #1
 80011b2:	697b      	ldr	r3, [r7, #20]
 80011b4:	409a      	lsls	r2, r3
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	689b      	ldr	r3, [r3, #8]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d10d      	bne.n	80011de <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80011cc:	68f9      	ldr	r1, [r7, #12]
 80011ce:	6809      	ldr	r1, [r1, #0]
 80011d0:	431a      	orrs	r2, r3
 80011d2:	697b      	ldr	r3, [r7, #20]
 80011d4:	3318      	adds	r3, #24
 80011d6:	011b      	lsls	r3, r3, #4
 80011d8:	440b      	add	r3, r1
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	e00f      	b.n	80011fe <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011e8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80011ea:	68bb      	ldr	r3, [r7, #8]
 80011ec:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011ee:	68f9      	ldr	r1, [r7, #12]
 80011f0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80011f2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	3318      	adds	r3, #24
 80011f8:	011b      	lsls	r3, r3, #4
 80011fa:	440b      	add	r3, r1
 80011fc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	6819      	ldr	r1, [r3, #0]
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	691a      	ldr	r2, [r3, #16]
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3318      	adds	r3, #24
 800120a:	011b      	lsls	r3, r3, #4
 800120c:	440b      	add	r3, r1
 800120e:	3304      	adds	r3, #4
 8001210:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	7d1b      	ldrb	r3, [r3, #20]
 8001216:	2b01      	cmp	r3, #1
 8001218:	d111      	bne.n	800123e <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	697b      	ldr	r3, [r7, #20]
 8001220:	3318      	adds	r3, #24
 8001222:	011b      	lsls	r3, r3, #4
 8001224:	4413      	add	r3, r2
 8001226:	3304      	adds	r3, #4
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	68fa      	ldr	r2, [r7, #12]
 800122c:	6811      	ldr	r1, [r2, #0]
 800122e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	3318      	adds	r3, #24
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	440b      	add	r3, r1
 800123a:	3304      	adds	r3, #4
 800123c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	3307      	adds	r3, #7
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	061a      	lsls	r2, r3, #24
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3306      	adds	r3, #6
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	041b      	lsls	r3, r3, #16
 800124e:	431a      	orrs	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3305      	adds	r3, #5
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	021b      	lsls	r3, r3, #8
 8001258:	4313      	orrs	r3, r2
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	3204      	adds	r2, #4
 800125e:	7812      	ldrb	r2, [r2, #0]
 8001260:	4610      	mov	r0, r2
 8001262:	68fa      	ldr	r2, [r7, #12]
 8001264:	6811      	ldr	r1, [r2, #0]
 8001266:	ea43 0200 	orr.w	r2, r3, r0
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	011b      	lsls	r3, r3, #4
 800126e:	440b      	add	r3, r1
 8001270:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001274:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3303      	adds	r3, #3
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	061a      	lsls	r2, r3, #24
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3302      	adds	r3, #2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	041b      	lsls	r3, r3, #16
 8001286:	431a      	orrs	r2, r3
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3301      	adds	r3, #1
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	021b      	lsls	r3, r3, #8
 8001290:	4313      	orrs	r3, r2
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	7812      	ldrb	r2, [r2, #0]
 8001296:	4610      	mov	r0, r2
 8001298:	68fa      	ldr	r2, [r7, #12]
 800129a:	6811      	ldr	r1, [r2, #0]
 800129c:	ea43 0200 	orr.w	r2, r3, r0
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	011b      	lsls	r3, r3, #4
 80012a4:	440b      	add	r3, r1
 80012a6:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80012aa:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	3318      	adds	r3, #24
 80012b4:	011b      	lsls	r3, r3, #4
 80012b6:	4413      	add	r3, r2
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	68fa      	ldr	r2, [r7, #12]
 80012bc:	6811      	ldr	r1, [r2, #0]
 80012be:	f043 0201 	orr.w	r2, r3, #1
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	3318      	adds	r3, #24
 80012c6:	011b      	lsls	r3, r3, #4
 80012c8:	440b      	add	r3, r1
 80012ca:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80012cc:	2300      	movs	r3, #0
 80012ce:	e00e      	b.n	80012ee <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e006      	b.n	80012ee <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
  }
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3724      	adds	r7, #36	; 0x24
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f893 3020 	ldrb.w	r3, [r3, #32]
 800130a:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800130c:	7afb      	ldrb	r3, [r7, #11]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d002      	beq.n	8001318 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001312:	7afb      	ldrb	r3, [r7, #11]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d11d      	bne.n	8001354 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d002      	beq.n	800132c <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	3301      	adds	r3, #1
 800132a:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	3301      	adds	r3, #1
 800133e:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d002      	beq.n	8001354 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	3301      	adds	r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001354:	68fb      	ldr	r3, [r7, #12]
}
 8001356:	4618      	mov	r0, r3
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001360:	b480      	push	{r7}
 8001362:	b087      	sub	sp, #28
 8001364:	af00      	add	r7, sp, #0
 8001366:	60f8      	str	r0, [r7, #12]
 8001368:	60b9      	str	r1, [r7, #8]
 800136a:	607a      	str	r2, [r7, #4]
 800136c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001374:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001376:	7dfb      	ldrb	r3, [r7, #23]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d003      	beq.n	8001384 <HAL_CAN_GetRxMessage+0x24>
 800137c:	7dfb      	ldrb	r3, [r7, #23]
 800137e:	2b02      	cmp	r3, #2
 8001380:	f040 80f3 	bne.w	800156a <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d10e      	bne.n	80013a8 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68db      	ldr	r3, [r3, #12]
 8001390:	f003 0303 	and.w	r3, r3, #3
 8001394:	2b00      	cmp	r3, #0
 8001396:	d116      	bne.n	80013c6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013a4:	2301      	movs	r3, #1
 80013a6:	e0e7      	b.n	8001578 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	691b      	ldr	r3, [r3, #16]
 80013ae:	f003 0303 	and.w	r3, r3, #3
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d107      	bne.n	80013c6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80013c2:	2301      	movs	r3, #1
 80013c4:	e0d8      	b.n	8001578 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	331b      	adds	r3, #27
 80013ce:	011b      	lsls	r3, r3, #4
 80013d0:	4413      	add	r3, r2
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0204 	and.w	r2, r3, #4
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	689b      	ldr	r3, [r3, #8]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d10c      	bne.n	80013fe <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681a      	ldr	r2, [r3, #0]
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	331b      	adds	r3, #27
 80013ec:	011b      	lsls	r3, r3, #4
 80013ee:	4413      	add	r3, r2
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	0d5b      	lsrs	r3, r3, #21
 80013f4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	e00b      	b.n	8001416 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	68bb      	ldr	r3, [r7, #8]
 8001404:	331b      	adds	r3, #27
 8001406:	011b      	lsls	r3, r3, #4
 8001408:	4413      	add	r3, r2
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	08db      	lsrs	r3, r3, #3
 800140e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	331b      	adds	r3, #27
 800141e:	011b      	lsls	r3, r3, #4
 8001420:	4413      	add	r3, r2
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f003 0202 	and.w	r2, r3, #2
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	331b      	adds	r3, #27
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	4413      	add	r3, r2
 8001438:	3304      	adds	r3, #4
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f003 020f 	and.w	r2, r3, #15
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	331b      	adds	r3, #27
 800144c:	011b      	lsls	r3, r3, #4
 800144e:	4413      	add	r3, r2
 8001450:	3304      	adds	r3, #4
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	b2da      	uxtb	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	331b      	adds	r3, #27
 8001464:	011b      	lsls	r3, r3, #4
 8001466:	4413      	add	r3, r2
 8001468:	3304      	adds	r3, #4
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	0c1b      	lsrs	r3, r3, #16
 800146e:	b29a      	uxth	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68bb      	ldr	r3, [r7, #8]
 800147a:	011b      	lsls	r3, r3, #4
 800147c:	4413      	add	r3, r2
 800147e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	68bb      	ldr	r3, [r7, #8]
 8001490:	011b      	lsls	r3, r3, #4
 8001492:	4413      	add	r3, r2
 8001494:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	0a1a      	lsrs	r2, r3, #8
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	3301      	adds	r3, #1
 80014a0:	b2d2      	uxtb	r2, r2
 80014a2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	4413      	add	r3, r2
 80014ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0c1a      	lsrs	r2, r3, #16
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	3302      	adds	r3, #2
 80014ba:	b2d2      	uxtb	r2, r2
 80014bc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	4413      	add	r3, r2
 80014c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	0e1a      	lsrs	r2, r3, #24
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	3303      	adds	r3, #3
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	011b      	lsls	r3, r3, #4
 80014e0:	4413      	add	r3, r2
 80014e2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	3304      	adds	r3, #4
 80014ec:	b2d2      	uxtb	r2, r2
 80014ee:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	011b      	lsls	r3, r3, #4
 80014f8:	4413      	add	r3, r2
 80014fa:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	0a1a      	lsrs	r2, r3, #8
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	3305      	adds	r3, #5
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	68bb      	ldr	r3, [r7, #8]
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	4413      	add	r3, r2
 8001514:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	0c1a      	lsrs	r2, r3, #16
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	3306      	adds	r3, #6
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	681a      	ldr	r2, [r3, #0]
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	4413      	add	r3, r2
 800152e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	0e1a      	lsrs	r2, r3, #24
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	3307      	adds	r3, #7
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d108      	bne.n	8001556 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	68da      	ldr	r2, [r3, #12]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0220 	orr.w	r2, r2, #32
 8001552:	60da      	str	r2, [r3, #12]
 8001554:	e007      	b.n	8001566 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	691a      	ldr	r2, [r3, #16]
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f042 0220 	orr.w	r2, r2, #32
 8001564:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001566:	2300      	movs	r3, #0
 8001568:	e006      	b.n	8001578 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
  }
}
 8001578:	4618      	mov	r0, r3
 800157a:	371c      	adds	r7, #28
 800157c:	46bd      	mov	sp, r7
 800157e:	bc80      	pop	{r7}
 8001580:	4770      	bx	lr

08001582 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8001582:	b480      	push	{r7}
 8001584:	b085      	sub	sp, #20
 8001586:	af00      	add	r7, sp, #0
 8001588:	6078      	str	r0, [r7, #4]
 800158a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001596:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001598:	7afb      	ldrb	r3, [r7, #11]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d002      	beq.n	80015a4 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800159e:	7afb      	ldrb	r3, [r7, #11]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d10f      	bne.n	80015c4 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d106      	bne.n	80015b8 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	f003 0303 	and.w	r3, r3, #3
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e005      	b.n	80015c4 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80015c4:	68fb      	ldr	r3, [r7, #12]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3714      	adds	r7, #20
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr

080015d0 <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e2:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 80015e4:	7bbb      	ldrb	r3, [r7, #14]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d002      	beq.n	80015f0 <HAL_CAN_ResetError+0x20>
 80015ea:	7bbb      	ldrb	r3, [r7, #14]
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d103      	bne.n	80015f8 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2200      	movs	r2, #0
 80015f4:	625a      	str	r2, [r3, #36]	; 0x24
 80015f6:	e007      	b.n	8001608 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015fc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8001608:	7bfb      	ldrb	r3, [r7, #15]
}
 800160a:	4618      	mov	r0, r3
 800160c:	3714      	adds	r7, #20
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr

08001614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001624:	4b0c      	ldr	r3, [pc, #48]	; (8001658 <__NVIC_SetPriorityGrouping+0x44>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001630:	4013      	ands	r3, r2
 8001632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800163c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001646:	4a04      	ldr	r2, [pc, #16]	; (8001658 <__NVIC_SetPriorityGrouping+0x44>)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	60d3      	str	r3, [r2, #12]
}
 800164c:	bf00      	nop
 800164e:	3714      	adds	r7, #20
 8001650:	46bd      	mov	sp, r7
 8001652:	bc80      	pop	{r7}
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000ed00 	.word	0xe000ed00

0800165c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <__NVIC_GetPriorityGrouping+0x18>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	f003 0307 	and.w	r3, r3, #7
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	bc80      	pop	{r7}
 8001670:	4770      	bx	lr
 8001672:	bf00      	nop
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	db0a      	blt.n	80016a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	490c      	ldr	r1, [pc, #48]	; (80016c4 <__NVIC_SetPriority+0x4c>)
 8001692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	440b      	add	r3, r1
 800169c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a0:	e00a      	b.n	80016b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4908      	ldr	r1, [pc, #32]	; (80016c8 <__NVIC_SetPriority+0x50>)
 80016a8:	79fb      	ldrb	r3, [r7, #7]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	3b04      	subs	r3, #4
 80016b0:	0112      	lsls	r2, r2, #4
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	440b      	add	r3, r1
 80016b6:	761a      	strb	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	bc80      	pop	{r7}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	e000e100 	.word	0xe000e100
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	; 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f1c3 0307 	rsb	r3, r3, #7
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	bf28      	it	cs
 80016ea:	2304      	movcs	r3, #4
 80016ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3304      	adds	r3, #4
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d902      	bls.n	80016fc <NVIC_EncodePriority+0x30>
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3b03      	subs	r3, #3
 80016fa:	e000      	b.n	80016fe <NVIC_EncodePriority+0x32>
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	401a      	ands	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001714:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	43d9      	mvns	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	4313      	orrs	r3, r2
         );
}
 8001726:	4618      	mov	r0, r3
 8001728:	3724      	adds	r7, #36	; 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	bc80      	pop	{r7}
 800172e:	4770      	bx	lr

08001730 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	3b01      	subs	r3, #1
 800173c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001740:	d301      	bcc.n	8001746 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001742:	2301      	movs	r3, #1
 8001744:	e00f      	b.n	8001766 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001746:	4a0a      	ldr	r2, [pc, #40]	; (8001770 <SysTick_Config+0x40>)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3b01      	subs	r3, #1
 800174c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800174e:	210f      	movs	r1, #15
 8001750:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001754:	f7ff ff90 	bl	8001678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <SysTick_Config+0x40>)
 800175a:	2200      	movs	r2, #0
 800175c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <SysTick_Config+0x40>)
 8001760:	2207      	movs	r2, #7
 8001762:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001764:	2300      	movs	r3, #0
}
 8001766:	4618      	mov	r0, r3
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	e000e010 	.word	0xe000e010

08001774 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
 800177a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800177c:	6878      	ldr	r0, [r7, #4]
 800177e:	f7ff ff49 	bl	8001614 <__NVIC_SetPriorityGrouping>
}
 8001782:	bf00      	nop
 8001784:	3708      	adds	r7, #8
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800178a:	b580      	push	{r7, lr}
 800178c:	b086      	sub	sp, #24
 800178e:	af00      	add	r7, sp, #0
 8001790:	4603      	mov	r3, r0
 8001792:	60b9      	str	r1, [r7, #8]
 8001794:	607a      	str	r2, [r7, #4]
 8001796:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800179c:	f7ff ff5e 	bl	800165c <__NVIC_GetPriorityGrouping>
 80017a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	f7ff ff90 	bl	80016cc <NVIC_EncodePriority>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff5f 	bl	8001678 <__NVIC_SetPriority>
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ffb0 	bl	8001730 <SysTick_Config>
 80017d0:	4603      	mov	r3, r0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017dc:	b480      	push	{r7}
 80017de:	b08b      	sub	sp, #44	; 0x2c
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017e6:	2300      	movs	r3, #0
 80017e8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80017ea:	2300      	movs	r3, #0
 80017ec:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80017ee:	e127      	b.n	8001a40 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80017f0:	2201      	movs	r2, #1
 80017f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f4:	fa02 f303 	lsl.w	r3, r2, r3
 80017f8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	69fa      	ldr	r2, [r7, #28]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001804:	69ba      	ldr	r2, [r7, #24]
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	429a      	cmp	r2, r3
 800180a:	f040 8116 	bne.w	8001a3a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	2b12      	cmp	r3, #18
 8001814:	d034      	beq.n	8001880 <HAL_GPIO_Init+0xa4>
 8001816:	2b12      	cmp	r3, #18
 8001818:	d80d      	bhi.n	8001836 <HAL_GPIO_Init+0x5a>
 800181a:	2b02      	cmp	r3, #2
 800181c:	d02b      	beq.n	8001876 <HAL_GPIO_Init+0x9a>
 800181e:	2b02      	cmp	r3, #2
 8001820:	d804      	bhi.n	800182c <HAL_GPIO_Init+0x50>
 8001822:	2b00      	cmp	r3, #0
 8001824:	d031      	beq.n	800188a <HAL_GPIO_Init+0xae>
 8001826:	2b01      	cmp	r3, #1
 8001828:	d01c      	beq.n	8001864 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800182a:	e048      	b.n	80018be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800182c:	2b03      	cmp	r3, #3
 800182e:	d043      	beq.n	80018b8 <HAL_GPIO_Init+0xdc>
 8001830:	2b11      	cmp	r3, #17
 8001832:	d01b      	beq.n	800186c <HAL_GPIO_Init+0x90>
          break;
 8001834:	e043      	b.n	80018be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001836:	4a89      	ldr	r2, [pc, #548]	; (8001a5c <HAL_GPIO_Init+0x280>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d026      	beq.n	800188a <HAL_GPIO_Init+0xae>
 800183c:	4a87      	ldr	r2, [pc, #540]	; (8001a5c <HAL_GPIO_Init+0x280>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d806      	bhi.n	8001850 <HAL_GPIO_Init+0x74>
 8001842:	4a87      	ldr	r2, [pc, #540]	; (8001a60 <HAL_GPIO_Init+0x284>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d020      	beq.n	800188a <HAL_GPIO_Init+0xae>
 8001848:	4a86      	ldr	r2, [pc, #536]	; (8001a64 <HAL_GPIO_Init+0x288>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d01d      	beq.n	800188a <HAL_GPIO_Init+0xae>
          break;
 800184e:	e036      	b.n	80018be <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001850:	4a85      	ldr	r2, [pc, #532]	; (8001a68 <HAL_GPIO_Init+0x28c>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d019      	beq.n	800188a <HAL_GPIO_Init+0xae>
 8001856:	4a85      	ldr	r2, [pc, #532]	; (8001a6c <HAL_GPIO_Init+0x290>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d016      	beq.n	800188a <HAL_GPIO_Init+0xae>
 800185c:	4a84      	ldr	r2, [pc, #528]	; (8001a70 <HAL_GPIO_Init+0x294>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d013      	beq.n	800188a <HAL_GPIO_Init+0xae>
          break;
 8001862:	e02c      	b.n	80018be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	623b      	str	r3, [r7, #32]
          break;
 800186a:	e028      	b.n	80018be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	3304      	adds	r3, #4
 8001872:	623b      	str	r3, [r7, #32]
          break;
 8001874:	e023      	b.n	80018be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	68db      	ldr	r3, [r3, #12]
 800187a:	3308      	adds	r3, #8
 800187c:	623b      	str	r3, [r7, #32]
          break;
 800187e:	e01e      	b.n	80018be <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	330c      	adds	r3, #12
 8001886:	623b      	str	r3, [r7, #32]
          break;
 8001888:	e019      	b.n	80018be <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d102      	bne.n	8001898 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001892:	2304      	movs	r3, #4
 8001894:	623b      	str	r3, [r7, #32]
          break;
 8001896:	e012      	b.n	80018be <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	689b      	ldr	r3, [r3, #8]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d105      	bne.n	80018ac <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018a0:	2308      	movs	r3, #8
 80018a2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	69fa      	ldr	r2, [r7, #28]
 80018a8:	611a      	str	r2, [r3, #16]
          break;
 80018aa:	e008      	b.n	80018be <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80018ac:	2308      	movs	r3, #8
 80018ae:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	69fa      	ldr	r2, [r7, #28]
 80018b4:	615a      	str	r2, [r3, #20]
          break;
 80018b6:	e002      	b.n	80018be <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]
          break;
 80018bc:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	2bff      	cmp	r3, #255	; 0xff
 80018c2:	d801      	bhi.n	80018c8 <HAL_GPIO_Init+0xec>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	e001      	b.n	80018cc <HAL_GPIO_Init+0xf0>
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	3304      	adds	r3, #4
 80018cc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	2bff      	cmp	r3, #255	; 0xff
 80018d2:	d802      	bhi.n	80018da <HAL_GPIO_Init+0xfe>
 80018d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	e002      	b.n	80018e0 <HAL_GPIO_Init+0x104>
 80018da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018dc:	3b08      	subs	r3, #8
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	210f      	movs	r1, #15
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	fa01 f303 	lsl.w	r3, r1, r3
 80018ee:	43db      	mvns	r3, r3
 80018f0:	401a      	ands	r2, r3
 80018f2:	6a39      	ldr	r1, [r7, #32]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	fa01 f303 	lsl.w	r3, r1, r3
 80018fa:	431a      	orrs	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 8096 	beq.w	8001a3a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800190e:	4b59      	ldr	r3, [pc, #356]	; (8001a74 <HAL_GPIO_Init+0x298>)
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	4a58      	ldr	r2, [pc, #352]	; (8001a74 <HAL_GPIO_Init+0x298>)
 8001914:	f043 0301 	orr.w	r3, r3, #1
 8001918:	6193      	str	r3, [r2, #24]
 800191a:	4b56      	ldr	r3, [pc, #344]	; (8001a74 <HAL_GPIO_Init+0x298>)
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	f003 0301 	and.w	r3, r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001926:	4a54      	ldr	r2, [pc, #336]	; (8001a78 <HAL_GPIO_Init+0x29c>)
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	089b      	lsrs	r3, r3, #2
 800192c:	3302      	adds	r3, #2
 800192e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001932:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	220f      	movs	r2, #15
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	68fa      	ldr	r2, [r7, #12]
 8001946:	4013      	ands	r3, r2
 8001948:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4b      	ldr	r2, [pc, #300]	; (8001a7c <HAL_GPIO_Init+0x2a0>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_GPIO_Init+0x19e>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4a      	ldr	r2, [pc, #296]	; (8001a80 <HAL_GPIO_Init+0x2a4>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00d      	beq.n	8001976 <HAL_GPIO_Init+0x19a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a49      	ldr	r2, [pc, #292]	; (8001a84 <HAL_GPIO_Init+0x2a8>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d007      	beq.n	8001972 <HAL_GPIO_Init+0x196>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a48      	ldr	r2, [pc, #288]	; (8001a88 <HAL_GPIO_Init+0x2ac>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d101      	bne.n	800196e <HAL_GPIO_Init+0x192>
 800196a:	2303      	movs	r3, #3
 800196c:	e006      	b.n	800197c <HAL_GPIO_Init+0x1a0>
 800196e:	2304      	movs	r3, #4
 8001970:	e004      	b.n	800197c <HAL_GPIO_Init+0x1a0>
 8001972:	2302      	movs	r3, #2
 8001974:	e002      	b.n	800197c <HAL_GPIO_Init+0x1a0>
 8001976:	2301      	movs	r3, #1
 8001978:	e000      	b.n	800197c <HAL_GPIO_Init+0x1a0>
 800197a:	2300      	movs	r3, #0
 800197c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197e:	f002 0203 	and.w	r2, r2, #3
 8001982:	0092      	lsls	r2, r2, #2
 8001984:	4093      	lsls	r3, r2
 8001986:	68fa      	ldr	r2, [r7, #12]
 8001988:	4313      	orrs	r3, r2
 800198a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800198c:	493a      	ldr	r1, [pc, #232]	; (8001a78 <HAL_GPIO_Init+0x29c>)
 800198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001990:	089b      	lsrs	r3, r3, #2
 8001992:	3302      	adds	r3, #2
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d006      	beq.n	80019b4 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80019a6:	4b39      	ldr	r3, [pc, #228]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	4938      	ldr	r1, [pc, #224]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	600b      	str	r3, [r1, #0]
 80019b2:	e006      	b.n	80019c2 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80019b4:	4b35      	ldr	r3, [pc, #212]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	43db      	mvns	r3, r3
 80019bc:	4933      	ldr	r1, [pc, #204]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 80019be:	4013      	ands	r3, r2
 80019c0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d006      	beq.n	80019dc <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80019ce:	4b2f      	ldr	r3, [pc, #188]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	492e      	ldr	r1, [pc, #184]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	604b      	str	r3, [r1, #4]
 80019da:	e006      	b.n	80019ea <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80019dc:	4b2b      	ldr	r3, [pc, #172]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 80019de:	685a      	ldr	r2, [r3, #4]
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	4929      	ldr	r1, [pc, #164]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 80019e6:	4013      	ands	r3, r2
 80019e8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d006      	beq.n	8001a04 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80019f6:	4b25      	ldr	r3, [pc, #148]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	4924      	ldr	r1, [pc, #144]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 80019fc:	69bb      	ldr	r3, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	608b      	str	r3, [r1, #8]
 8001a02:	e006      	b.n	8001a12 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001a04:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 8001a06:	689a      	ldr	r2, [r3, #8]
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	491f      	ldr	r1, [pc, #124]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d006      	beq.n	8001a2c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001a1e:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 8001a20:	68da      	ldr	r2, [r3, #12]
 8001a22:	491a      	ldr	r1, [pc, #104]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	60cb      	str	r3, [r1, #12]
 8001a2a:	e006      	b.n	8001a3a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	43db      	mvns	r3, r3
 8001a34:	4915      	ldr	r1, [pc, #84]	; (8001a8c <HAL_GPIO_Init+0x2b0>)
 8001a36:	4013      	ands	r3, r2
 8001a38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	fa22 f303 	lsr.w	r3, r2, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f47f aed0 	bne.w	80017f0 <HAL_GPIO_Init+0x14>
  }
}
 8001a50:	bf00      	nop
 8001a52:	372c      	adds	r7, #44	; 0x2c
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr
 8001a5a:	bf00      	nop
 8001a5c:	10210000 	.word	0x10210000
 8001a60:	10110000 	.word	0x10110000
 8001a64:	10120000 	.word	0x10120000
 8001a68:	10310000 	.word	0x10310000
 8001a6c:	10320000 	.word	0x10320000
 8001a70:	10220000 	.word	0x10220000
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40010000 	.word	0x40010000
 8001a7c:	40010800 	.word	0x40010800
 8001a80:	40010c00 	.word	0x40010c00
 8001a84:	40011000 	.word	0x40011000
 8001a88:	40011400 	.word	0x40011400
 8001a8c:	40010400 	.word	0x40010400

08001a90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001aa0:	787b      	ldrb	r3, [r7, #1]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001aa6:	887a      	ldrh	r2, [r7, #2]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001aac:	e003      	b.n	8001ab6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001aae:	887b      	ldrh	r3, [r7, #2]
 8001ab0:	041a      	lsls	r2, r3, #16
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	611a      	str	r2, [r3, #16]
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bc80      	pop	{r7}
 8001abe:	4770      	bx	lr

08001ac0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e304      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 0301 	and.w	r3, r3, #1
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	f000 8087 	beq.w	8001bee <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ae0:	4b92      	ldr	r3, [pc, #584]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 030c 	and.w	r3, r3, #12
 8001ae8:	2b04      	cmp	r3, #4
 8001aea:	d00c      	beq.n	8001b06 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001aec:	4b8f      	ldr	r3, [pc, #572]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	f003 030c 	and.w	r3, r3, #12
 8001af4:	2b08      	cmp	r3, #8
 8001af6:	d112      	bne.n	8001b1e <HAL_RCC_OscConfig+0x5e>
 8001af8:	4b8c      	ldr	r3, [pc, #560]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b04:	d10b      	bne.n	8001b1e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b06:	4b89      	ldr	r3, [pc, #548]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d06c      	beq.n	8001bec <HAL_RCC_OscConfig+0x12c>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d168      	bne.n	8001bec <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e2de      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b26:	d106      	bne.n	8001b36 <HAL_RCC_OscConfig+0x76>
 8001b28:	4b80      	ldr	r3, [pc, #512]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a7f      	ldr	r2, [pc, #508]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b32:	6013      	str	r3, [r2, #0]
 8001b34:	e02e      	b.n	8001b94 <HAL_RCC_OscConfig+0xd4>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d10c      	bne.n	8001b58 <HAL_RCC_OscConfig+0x98>
 8001b3e:	4b7b      	ldr	r3, [pc, #492]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a7a      	ldr	r2, [pc, #488]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b48:	6013      	str	r3, [r2, #0]
 8001b4a:	4b78      	ldr	r3, [pc, #480]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	4a77      	ldr	r2, [pc, #476]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b54:	6013      	str	r3, [r2, #0]
 8001b56:	e01d      	b.n	8001b94 <HAL_RCC_OscConfig+0xd4>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b60:	d10c      	bne.n	8001b7c <HAL_RCC_OscConfig+0xbc>
 8001b62:	4b72      	ldr	r3, [pc, #456]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a71      	ldr	r2, [pc, #452]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	4b6f      	ldr	r3, [pc, #444]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a6e      	ldr	r2, [pc, #440]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b78:	6013      	str	r3, [r2, #0]
 8001b7a:	e00b      	b.n	8001b94 <HAL_RCC_OscConfig+0xd4>
 8001b7c:	4b6b      	ldr	r3, [pc, #428]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a6a      	ldr	r2, [pc, #424]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	4b68      	ldr	r3, [pc, #416]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a67      	ldr	r2, [pc, #412]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b92:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d013      	beq.n	8001bc4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b9c:	f7ff f8a8 	bl	8000cf0 <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ba4:	f7ff f8a4 	bl	8000cf0 <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b64      	cmp	r3, #100	; 0x64
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e292      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bb6:	4b5d      	ldr	r3, [pc, #372]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0xe4>
 8001bc2:	e014      	b.n	8001bee <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc4:	f7ff f894 	bl	8000cf0 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bcc:	f7ff f890 	bl	8000cf0 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b64      	cmp	r3, #100	; 0x64
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e27e      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bde:	4b53      	ldr	r3, [pc, #332]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1f0      	bne.n	8001bcc <HAL_RCC_OscConfig+0x10c>
 8001bea:	e000      	b.n	8001bee <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d063      	beq.n	8001cc2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bfa:	4b4c      	ldr	r3, [pc, #304]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 030c 	and.w	r3, r3, #12
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00b      	beq.n	8001c1e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c06:	4b49      	ldr	r3, [pc, #292]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	2b08      	cmp	r3, #8
 8001c10:	d11c      	bne.n	8001c4c <HAL_RCC_OscConfig+0x18c>
 8001c12:	4b46      	ldr	r3, [pc, #280]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d116      	bne.n	8001c4c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c1e:	4b43      	ldr	r3, [pc, #268]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d005      	beq.n	8001c36 <HAL_RCC_OscConfig+0x176>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	2b01      	cmp	r3, #1
 8001c30:	d001      	beq.n	8001c36 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e252      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c36:	4b3d      	ldr	r3, [pc, #244]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	00db      	lsls	r3, r3, #3
 8001c44:	4939      	ldr	r1, [pc, #228]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c4a:	e03a      	b.n	8001cc2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	695b      	ldr	r3, [r3, #20]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d020      	beq.n	8001c96 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c54:	4b36      	ldr	r3, [pc, #216]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c56:	2201      	movs	r2, #1
 8001c58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c5a:	f7ff f849 	bl	8000cf0 <HAL_GetTick>
 8001c5e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c62:	f7ff f845 	bl	8000cf0 <HAL_GetTick>
 8001c66:	4602      	mov	r2, r0
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e233      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c74:	4b2d      	ldr	r3, [pc, #180]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d0f0      	beq.n	8001c62 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c80:	4b2a      	ldr	r3, [pc, #168]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	00db      	lsls	r3, r3, #3
 8001c8e:	4927      	ldr	r1, [pc, #156]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001c90:	4313      	orrs	r3, r2
 8001c92:	600b      	str	r3, [r1, #0]
 8001c94:	e015      	b.n	8001cc2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c96:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <HAL_RCC_OscConfig+0x270>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9c:	f7ff f828 	bl	8000cf0 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca4:	f7ff f824 	bl	8000cf0 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e212      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cb6:	4b1d      	ldr	r3, [pc, #116]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 0308 	and.w	r3, r3, #8
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d03a      	beq.n	8001d44 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	69db      	ldr	r3, [r3, #28]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d019      	beq.n	8001d0a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001cd8:	2201      	movs	r2, #1
 8001cda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cdc:	f7ff f808 	bl	8000cf0 <HAL_GetTick>
 8001ce0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ce2:	e008      	b.n	8001cf6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ce4:	f7ff f804 	bl	8000cf0 <HAL_GetTick>
 8001ce8:	4602      	mov	r2, r0
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e1f2      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <HAL_RCC_OscConfig+0x26c>)
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	f003 0302 	and.w	r3, r3, #2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0f0      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d02:	2001      	movs	r0, #1
 8001d04:	f000 fb98 	bl	8002438 <RCC_Delay>
 8001d08:	e01c      	b.n	8001d44 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d0a:	4b0a      	ldr	r3, [pc, #40]	; (8001d34 <HAL_RCC_OscConfig+0x274>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d10:	f7fe ffee 	bl	8000cf0 <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d16:	e00f      	b.n	8001d38 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d18:	f7fe ffea 	bl	8000cf0 <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d908      	bls.n	8001d38 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e1d8      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	42420000 	.word	0x42420000
 8001d34:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d38:	4b9b      	ldr	r3, [pc, #620]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1e9      	bne.n	8001d18 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	f000 80a6 	beq.w	8001e9e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d56:	4b94      	ldr	r3, [pc, #592]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d10d      	bne.n	8001d7e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d62:	4b91      	ldr	r3, [pc, #580]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001d64:	69db      	ldr	r3, [r3, #28]
 8001d66:	4a90      	ldr	r2, [pc, #576]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d6c:	61d3      	str	r3, [r2, #28]
 8001d6e:	4b8e      	ldr	r3, [pc, #568]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	60bb      	str	r3, [r7, #8]
 8001d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d7e:	4b8b      	ldr	r3, [pc, #556]	; (8001fac <HAL_RCC_OscConfig+0x4ec>)
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d118      	bne.n	8001dbc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d8a:	4b88      	ldr	r3, [pc, #544]	; (8001fac <HAL_RCC_OscConfig+0x4ec>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a87      	ldr	r2, [pc, #540]	; (8001fac <HAL_RCC_OscConfig+0x4ec>)
 8001d90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d96:	f7fe ffab 	bl	8000cf0 <HAL_GetTick>
 8001d9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d9c:	e008      	b.n	8001db0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d9e:	f7fe ffa7 	bl	8000cf0 <HAL_GetTick>
 8001da2:	4602      	mov	r2, r0
 8001da4:	693b      	ldr	r3, [r7, #16]
 8001da6:	1ad3      	subs	r3, r2, r3
 8001da8:	2b64      	cmp	r3, #100	; 0x64
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e195      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db0:	4b7e      	ldr	r3, [pc, #504]	; (8001fac <HAL_RCC_OscConfig+0x4ec>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d0f0      	beq.n	8001d9e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d106      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x312>
 8001dc4:	4b78      	ldr	r3, [pc, #480]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	4a77      	ldr	r2, [pc, #476]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001dca:	f043 0301 	orr.w	r3, r3, #1
 8001dce:	6213      	str	r3, [r2, #32]
 8001dd0:	e02d      	b.n	8001e2e <HAL_RCC_OscConfig+0x36e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	691b      	ldr	r3, [r3, #16]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d10c      	bne.n	8001df4 <HAL_RCC_OscConfig+0x334>
 8001dda:	4b73      	ldr	r3, [pc, #460]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001ddc:	6a1b      	ldr	r3, [r3, #32]
 8001dde:	4a72      	ldr	r2, [pc, #456]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001de0:	f023 0301 	bic.w	r3, r3, #1
 8001de4:	6213      	str	r3, [r2, #32]
 8001de6:	4b70      	ldr	r3, [pc, #448]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001de8:	6a1b      	ldr	r3, [r3, #32]
 8001dea:	4a6f      	ldr	r2, [pc, #444]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001dec:	f023 0304 	bic.w	r3, r3, #4
 8001df0:	6213      	str	r3, [r2, #32]
 8001df2:	e01c      	b.n	8001e2e <HAL_RCC_OscConfig+0x36e>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	2b05      	cmp	r3, #5
 8001dfa:	d10c      	bne.n	8001e16 <HAL_RCC_OscConfig+0x356>
 8001dfc:	4b6a      	ldr	r3, [pc, #424]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
 8001e00:	4a69      	ldr	r2, [pc, #420]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001e02:	f043 0304 	orr.w	r3, r3, #4
 8001e06:	6213      	str	r3, [r2, #32]
 8001e08:	4b67      	ldr	r3, [pc, #412]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001e0a:	6a1b      	ldr	r3, [r3, #32]
 8001e0c:	4a66      	ldr	r2, [pc, #408]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001e0e:	f043 0301 	orr.w	r3, r3, #1
 8001e12:	6213      	str	r3, [r2, #32]
 8001e14:	e00b      	b.n	8001e2e <HAL_RCC_OscConfig+0x36e>
 8001e16:	4b64      	ldr	r3, [pc, #400]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001e18:	6a1b      	ldr	r3, [r3, #32]
 8001e1a:	4a63      	ldr	r2, [pc, #396]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001e1c:	f023 0301 	bic.w	r3, r3, #1
 8001e20:	6213      	str	r3, [r2, #32]
 8001e22:	4b61      	ldr	r3, [pc, #388]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	4a60      	ldr	r2, [pc, #384]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001e28:	f023 0304 	bic.w	r3, r3, #4
 8001e2c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d015      	beq.n	8001e62 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e36:	f7fe ff5b 	bl	8000cf0 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e3c:	e00a      	b.n	8001e54 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e3e:	f7fe ff57 	bl	8000cf0 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d901      	bls.n	8001e54 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e50:	2303      	movs	r3, #3
 8001e52:	e143      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e54:	4b54      	ldr	r3, [pc, #336]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001e56:	6a1b      	ldr	r3, [r3, #32]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d0ee      	beq.n	8001e3e <HAL_RCC_OscConfig+0x37e>
 8001e60:	e014      	b.n	8001e8c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e62:	f7fe ff45 	bl	8000cf0 <HAL_GetTick>
 8001e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e68:	e00a      	b.n	8001e80 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e6a:	f7fe ff41 	bl	8000cf0 <HAL_GetTick>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d901      	bls.n	8001e80 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e7c:	2303      	movs	r3, #3
 8001e7e:	e12d      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e80:	4b49      	ldr	r3, [pc, #292]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001e82:	6a1b      	ldr	r3, [r3, #32]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d1ee      	bne.n	8001e6a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001e8c:	7dfb      	ldrb	r3, [r7, #23]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d105      	bne.n	8001e9e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e92:	4b45      	ldr	r3, [pc, #276]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001e94:	69db      	ldr	r3, [r3, #28]
 8001e96:	4a44      	ldr	r2, [pc, #272]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001e98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e9c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 808c 	beq.w	8001fc0 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001ea8:	4b3f      	ldr	r3, [pc, #252]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eb4:	d10e      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001eb6:	4b3c      	ldr	r3, [pc, #240]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d108      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8001ec2:	4b39      	ldr	r3, [pc, #228]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8001eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e103      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d14e      	bne.n	8001f7a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001edc:	4b32      	ldr	r3, [pc, #200]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d009      	beq.n	8001efc <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8001ee8:	4b2f      	ldr	r3, [pc, #188]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d001      	beq.n	8001efc <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0ef      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001efc:	4b2c      	ldr	r3, [pc, #176]	; (8001fb0 <HAL_RCC_OscConfig+0x4f0>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f02:	f7fe fef5 	bl	8000cf0 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001f0a:	f7fe fef1 	bl	8000cf0 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b64      	cmp	r3, #100	; 0x64
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e0df      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8001f1c:	4b22      	ldr	r3, [pc, #136]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f0      	bne.n	8001f0a <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8001f28:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001f2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f34:	491c      	ldr	r1, [pc, #112]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8001f3a:	4b1b      	ldr	r3, [pc, #108]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4918      	ldr	r1, [pc, #96]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8001f4c:	4b18      	ldr	r3, [pc, #96]	; (8001fb0 <HAL_RCC_OscConfig+0x4f0>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f52:	f7fe fecd 	bl	8000cf0 <HAL_GetTick>
 8001f56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001f58:	e008      	b.n	8001f6c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001f5a:	f7fe fec9 	bl	8000cf0 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b64      	cmp	r3, #100	; 0x64
 8001f66:	d901      	bls.n	8001f6c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8001f68:	2303      	movs	r3, #3
 8001f6a:	e0b7      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d0f0      	beq.n	8001f5a <HAL_RCC_OscConfig+0x49a>
 8001f78:	e022      	b.n	8001fc0 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f7e:	4a0a      	ldr	r2, [pc, #40]	; (8001fa8 <HAL_RCC_OscConfig+0x4e8>)
 8001f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8001f86:	4b0a      	ldr	r3, [pc, #40]	; (8001fb0 <HAL_RCC_OscConfig+0x4f0>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7fe feb0 	bl	8000cf0 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001f92:	e00f      	b.n	8001fb4 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8001f94:	f7fe feac 	bl	8000cf0 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	; 0x64
 8001fa0:	d908      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e09a      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
 8001fa6:	bf00      	nop
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	40007000 	.word	0x40007000
 8001fb0:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8001fb4:	4b4b      	ldr	r3, [pc, #300]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1e9      	bne.n	8001f94 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a1b      	ldr	r3, [r3, #32]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 8088 	beq.w	80020da <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001fca:	4b46      	ldr	r3, [pc, #280]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f003 030c 	and.w	r3, r3, #12
 8001fd2:	2b08      	cmp	r3, #8
 8001fd4:	d068      	beq.n	80020a8 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a1b      	ldr	r3, [r3, #32]
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d14d      	bne.n	800207a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fde:	4b42      	ldr	r3, [pc, #264]	; (80020e8 <HAL_RCC_OscConfig+0x628>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fe4:	f7fe fe84 	bl	8000cf0 <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fec:	f7fe fe80 	bl	8000cf0 <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e06e      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ffe:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d1f0      	bne.n	8001fec <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002012:	d10f      	bne.n	8002034 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002014:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 8002016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	4931      	ldr	r1, [pc, #196]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 800201e:	4313      	orrs	r3, r2
 8002020:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002022:	4b30      	ldr	r3, [pc, #192]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 8002024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002026:	f023 020f 	bic.w	r2, r3, #15
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	68db      	ldr	r3, [r3, #12]
 800202e:	492d      	ldr	r1, [pc, #180]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 8002030:	4313      	orrs	r3, r2
 8002032:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002034:	4b2b      	ldr	r3, [pc, #172]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	430b      	orrs	r3, r1
 8002046:	4927      	ldr	r1, [pc, #156]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 8002048:	4313      	orrs	r3, r2
 800204a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800204c:	4b26      	ldr	r3, [pc, #152]	; (80020e8 <HAL_RCC_OscConfig+0x628>)
 800204e:	2201      	movs	r2, #1
 8002050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7fe fe4d 	bl	8000cf0 <HAL_GetTick>
 8002056:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002058:	e008      	b.n	800206c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800205a:	f7fe fe49 	bl	8000cf0 <HAL_GetTick>
 800205e:	4602      	mov	r2, r0
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	1ad3      	subs	r3, r2, r3
 8002064:	2b02      	cmp	r3, #2
 8002066:	d901      	bls.n	800206c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002068:	2303      	movs	r3, #3
 800206a:	e037      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800206c:	4b1d      	ldr	r3, [pc, #116]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d0f0      	beq.n	800205a <HAL_RCC_OscConfig+0x59a>
 8002078:	e02f      	b.n	80020da <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207a:	4b1b      	ldr	r3, [pc, #108]	; (80020e8 <HAL_RCC_OscConfig+0x628>)
 800207c:	2200      	movs	r2, #0
 800207e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7fe fe36 	bl	8000cf0 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002088:	f7fe fe32 	bl	8000cf0 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e020      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800209a:	4b12      	ldr	r3, [pc, #72]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x5c8>
 80020a6:	e018      	b.n	80020da <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d101      	bne.n	80020b4 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e013      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_RCC_OscConfig+0x624>)
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d106      	bne.n	80020d6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d001      	beq.n	80020da <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e000      	b.n	80020dc <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 80020da:	2300      	movs	r3, #0
}
 80020dc:	4618      	mov	r0, r3
 80020de:	3718      	adds	r7, #24
 80020e0:	46bd      	mov	sp, r7
 80020e2:	bd80      	pop	{r7, pc}
 80020e4:	40021000 	.word	0x40021000
 80020e8:	42420060 	.word	0x42420060

080020ec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e0d0      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002100:	4b6a      	ldr	r3, [pc, #424]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	429a      	cmp	r2, r3
 800210c:	d910      	bls.n	8002130 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800210e:	4b67      	ldr	r3, [pc, #412]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 0207 	bic.w	r2, r3, #7
 8002116:	4965      	ldr	r1, [pc, #404]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	4313      	orrs	r3, r2
 800211c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800211e:	4b63      	ldr	r3, [pc, #396]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	f003 0307 	and.w	r3, r3, #7
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	429a      	cmp	r2, r3
 800212a:	d001      	beq.n	8002130 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0b8      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0302 	and.w	r3, r3, #2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d020      	beq.n	800217e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 0304 	and.w	r3, r3, #4
 8002144:	2b00      	cmp	r3, #0
 8002146:	d005      	beq.n	8002154 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002148:	4b59      	ldr	r3, [pc, #356]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	4a58      	ldr	r2, [pc, #352]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800214e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002152:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002160:	4b53      	ldr	r3, [pc, #332]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	4a52      	ldr	r2, [pc, #328]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800216a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800216c:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	689b      	ldr	r3, [r3, #8]
 8002178:	494d      	ldr	r1, [pc, #308]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d040      	beq.n	800220c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	2b01      	cmp	r3, #1
 8002190:	d107      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002192:	4b47      	ldr	r3, [pc, #284]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219a:	2b00      	cmp	r3, #0
 800219c:	d115      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e07f      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d107      	bne.n	80021ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021aa:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d109      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021b6:	2301      	movs	r3, #1
 80021b8:	e073      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ba:	4b3d      	ldr	r3, [pc, #244]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e06b      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021ca:	4b39      	ldr	r3, [pc, #228]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f023 0203 	bic.w	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	4936      	ldr	r1, [pc, #216]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	4313      	orrs	r3, r2
 80021da:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80021dc:	f7fe fd88 	bl	8000cf0 <HAL_GetTick>
 80021e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021e2:	e00a      	b.n	80021fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e4:	f7fe fd84 	bl	8000cf0 <HAL_GetTick>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	1ad3      	subs	r3, r2, r3
 80021ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e053      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021fa:	4b2d      	ldr	r3, [pc, #180]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	f003 020c 	and.w	r2, r3, #12
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	429a      	cmp	r2, r3
 800220a:	d1eb      	bne.n	80021e4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800220c:	4b27      	ldr	r3, [pc, #156]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f003 0307 	and.w	r3, r3, #7
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	429a      	cmp	r2, r3
 8002218:	d210      	bcs.n	800223c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800221a:	4b24      	ldr	r3, [pc, #144]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f023 0207 	bic.w	r2, r3, #7
 8002222:	4922      	ldr	r1, [pc, #136]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	4313      	orrs	r3, r2
 8002228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b20      	ldr	r3, [pc, #128]	; (80022ac <HAL_RCC_ClockConfig+0x1c0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e032      	b.n	80022a2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0304 	and.w	r3, r3, #4
 8002244:	2b00      	cmp	r3, #0
 8002246:	d008      	beq.n	800225a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002248:	4b19      	ldr	r3, [pc, #100]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4916      	ldr	r1, [pc, #88]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002256:	4313      	orrs	r3, r2
 8002258:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0308 	and.w	r3, r3, #8
 8002262:	2b00      	cmp	r3, #0
 8002264:	d009      	beq.n	800227a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002266:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	691b      	ldr	r3, [r3, #16]
 8002272:	00db      	lsls	r3, r3, #3
 8002274:	490e      	ldr	r1, [pc, #56]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	4313      	orrs	r3, r2
 8002278:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800227a:	f000 f821 	bl	80022c0 <HAL_RCC_GetSysClockFreq>
 800227e:	4601      	mov	r1, r0
 8002280:	4b0b      	ldr	r3, [pc, #44]	; (80022b0 <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	091b      	lsrs	r3, r3, #4
 8002286:	f003 030f 	and.w	r3, r3, #15
 800228a:	4a0a      	ldr	r2, [pc, #40]	; (80022b4 <HAL_RCC_ClockConfig+0x1c8>)
 800228c:	5cd3      	ldrb	r3, [r2, r3]
 800228e:	fa21 f303 	lsr.w	r3, r1, r3
 8002292:	4a09      	ldr	r2, [pc, #36]	; (80022b8 <HAL_RCC_ClockConfig+0x1cc>)
 8002294:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002296:	4b09      	ldr	r3, [pc, #36]	; (80022bc <HAL_RCC_ClockConfig+0x1d0>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4618      	mov	r0, r3
 800229c:	f7fe fce6 	bl	8000c6c <HAL_InitTick>

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3710      	adds	r7, #16
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	40022000 	.word	0x40022000
 80022b0:	40021000 	.word	0x40021000
 80022b4:	080024bc 	.word	0x080024bc
 80022b8:	20000000 	.word	0x20000000
 80022bc:	20000004 	.word	0x20000004

080022c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022c2:	b091      	sub	sp, #68	; 0x44
 80022c4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 80022c6:	4b56      	ldr	r3, [pc, #344]	; (8002420 <HAL_RCC_GetSysClockFreq+0x160>)
 80022c8:	f107 0414 	add.w	r4, r7, #20
 80022cc:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022ce:	c407      	stmia	r4!, {r0, r1, r2}
 80022d0:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80022d2:	4b54      	ldr	r3, [pc, #336]	; (8002424 <HAL_RCC_GetSysClockFreq+0x164>)
 80022d4:	1d3c      	adds	r4, r7, #4
 80022d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80022d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022dc:	2300      	movs	r3, #0
 80022de:	637b      	str	r3, [r7, #52]	; 0x34
 80022e0:	2300      	movs	r3, #0
 80022e2:	633b      	str	r3, [r7, #48]	; 0x30
 80022e4:	2300      	movs	r3, #0
 80022e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80022e8:	2300      	movs	r3, #0
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80022f0:	2300      	movs	r3, #0
 80022f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80022f4:	2300      	movs	r3, #0
 80022f6:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80022f8:	4b4b      	ldr	r3, [pc, #300]	; (8002428 <HAL_RCC_GetSysClockFreq+0x168>)
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002300:	f003 030c 	and.w	r3, r3, #12
 8002304:	2b04      	cmp	r3, #4
 8002306:	d002      	beq.n	800230e <HAL_RCC_GetSysClockFreq+0x4e>
 8002308:	2b08      	cmp	r3, #8
 800230a:	d003      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0x54>
 800230c:	e07f      	b.n	800240e <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800230e:	4b47      	ldr	r3, [pc, #284]	; (800242c <HAL_RCC_GetSysClockFreq+0x16c>)
 8002310:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002312:	e07f      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002316:	0c9b      	lsrs	r3, r3, #18
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8002320:	4413      	add	r3, r2
 8002322:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 8002326:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800232a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d065      	beq.n	80023fe <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8002332:	4b3d      	ldr	r3, [pc, #244]	; (8002428 <HAL_RCC_GetSysClockFreq+0x168>)
 8002334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800233e:	4413      	add	r3, r2
 8002340:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8002344:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8002346:	4b38      	ldr	r3, [pc, #224]	; (8002428 <HAL_RCC_GetSysClockFreq+0x168>)
 8002348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d043      	beq.n	80023da <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8002352:	4b35      	ldr	r3, [pc, #212]	; (8002428 <HAL_RCC_GetSysClockFreq+0x168>)
 8002354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	f003 030f 	and.w	r3, r3, #15
 800235c:	3301      	adds	r3, #1
 800235e:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8002360:	4b31      	ldr	r3, [pc, #196]	; (8002428 <HAL_RCC_GetSysClockFreq+0x168>)
 8002362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002364:	0a1b      	lsrs	r3, r3, #8
 8002366:	f003 030f 	and.w	r3, r3, #15
 800236a:	3302      	adds	r3, #2
 800236c:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800236e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002370:	4619      	mov	r1, r3
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002378:	f04f 0400 	mov.w	r4, #0
 800237c:	fb03 f502 	mul.w	r5, r3, r2
 8002380:	fb01 f004 	mul.w	r0, r1, r4
 8002384:	4428      	add	r0, r5
 8002386:	fba1 3403 	umull	r3, r4, r1, r3
 800238a:	1902      	adds	r2, r0, r4
 800238c:	4614      	mov	r4, r2
 800238e:	4a27      	ldr	r2, [pc, #156]	; (800242c <HAL_RCC_GetSysClockFreq+0x16c>)
 8002390:	fb02 f104 	mul.w	r1, r2, r4
 8002394:	2200      	movs	r2, #0
 8002396:	fb02 f203 	mul.w	r2, r2, r3
 800239a:	440a      	add	r2, r1
 800239c:	4923      	ldr	r1, [pc, #140]	; (800242c <HAL_RCC_GetSysClockFreq+0x16c>)
 800239e:	fba3 5601 	umull	r5, r6, r3, r1
 80023a2:	1993      	adds	r3, r2, r6
 80023a4:	461e      	mov	r6, r3
 80023a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a8:	4619      	mov	r1, r3
 80023aa:	f04f 0200 	mov.w	r2, #0
 80023ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023b0:	f04f 0400 	mov.w	r4, #0
 80023b4:	fb03 fc02 	mul.w	ip, r3, r2
 80023b8:	fb01 f004 	mul.w	r0, r1, r4
 80023bc:	4460      	add	r0, ip
 80023be:	fba1 3403 	umull	r3, r4, r1, r3
 80023c2:	1902      	adds	r2, r0, r4
 80023c4:	4614      	mov	r4, r2
 80023c6:	461a      	mov	r2, r3
 80023c8:	4623      	mov	r3, r4
 80023ca:	4628      	mov	r0, r5
 80023cc:	4631      	mov	r1, r6
 80023ce:	f7fd ff29 	bl	8000224 <__aeabi_uldivmod>
 80023d2:	4603      	mov	r3, r0
 80023d4:	460c      	mov	r4, r1
 80023d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d8:	e007      	b.n	80023ea <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80023da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023dc:	4a13      	ldr	r2, [pc, #76]	; (800242c <HAL_RCC_GetSysClockFreq+0x16c>)
 80023de:	fb02 f203 	mul.w	r2, r2, r3
 80023e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80023ea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80023ee:	461a      	mov	r2, r3
 80023f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d108      	bne.n	8002408 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 80023f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023f8:	085b      	lsrs	r3, r3, #1
 80023fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023fc:	e004      	b.n	8002408 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80023fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002400:	4a0b      	ldr	r2, [pc, #44]	; (8002430 <HAL_RCC_GetSysClockFreq+0x170>)
 8002402:	fb02 f303 	mul.w	r3, r2, r3
 8002406:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 8002408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800240a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800240c:	e002      	b.n	8002414 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800240e:	4b09      	ldr	r3, [pc, #36]	; (8002434 <HAL_RCC_GetSysClockFreq+0x174>)
 8002410:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002412:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002416:	4618      	mov	r0, r3
 8002418:	3744      	adds	r7, #68	; 0x44
 800241a:	46bd      	mov	sp, r7
 800241c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800241e:	bf00      	nop
 8002420:	0800249c 	.word	0x0800249c
 8002424:	080024ac 	.word	0x080024ac
 8002428:	40021000 	.word	0x40021000
 800242c:	017d7840 	.word	0x017d7840
 8002430:	003d0900 	.word	0x003d0900
 8002434:	007a1200 	.word	0x007a1200

08002438 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002438:	b480      	push	{r7}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <RCC_Delay+0x34>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a0a      	ldr	r2, [pc, #40]	; (8002470 <RCC_Delay+0x38>)
 8002446:	fba2 2303 	umull	r2, r3, r2, r3
 800244a:	0a5b      	lsrs	r3, r3, #9
 800244c:	687a      	ldr	r2, [r7, #4]
 800244e:	fb02 f303 	mul.w	r3, r2, r3
 8002452:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002454:	bf00      	nop
  }
  while (Delay --);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	1e5a      	subs	r2, r3, #1
 800245a:	60fa      	str	r2, [r7, #12]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1f9      	bne.n	8002454 <RCC_Delay+0x1c>
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	bc80      	pop	{r7}
 8002468:	4770      	bx	lr
 800246a:	bf00      	nop
 800246c:	20000000 	.word	0x20000000
 8002470:	10624dd3 	.word	0x10624dd3

08002474 <memset>:
 8002474:	4603      	mov	r3, r0
 8002476:	4402      	add	r2, r0
 8002478:	4293      	cmp	r3, r2
 800247a:	d100      	bne.n	800247e <memset+0xa>
 800247c:	4770      	bx	lr
 800247e:	f803 1b01 	strb.w	r1, [r3], #1
 8002482:	e7f9      	b.n	8002478 <memset+0x4>

08002484 <_init>:
 8002484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002486:	bf00      	nop
 8002488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800248a:	bc08      	pop	{r3}
 800248c:	469e      	mov	lr, r3
 800248e:	4770      	bx	lr

08002490 <_fini>:
 8002490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002492:	bf00      	nop
 8002494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002496:	bc08      	pop	{r3}
 8002498:	469e      	mov	lr, r3
 800249a:	4770      	bx	lr
