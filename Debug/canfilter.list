
canfilter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003084  080001e8  080001e8  000101e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  0800326c  0800326c  0001326c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800329c  0800329c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800329c  0800329c  0001329c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080032a4  080032a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032a4  080032a4  000132a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080032a8  080032a8  000132a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080032ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  2000000c  080032b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000011c  080032b8  0002011c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006ada  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001444  00000000  00000000  00026b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000580  00000000  00000000  00027f58  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000004d8  00000000  00000000  000284d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a099  00000000  00000000  000289b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004e87  00000000  00000000  00042a49  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000924ad  00000000  00000000  000478d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d9d7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000015c8  00000000  00000000  000d9df8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e8 <__do_global_dtors_aux>:
 80001e8:	b510      	push	{r4, lr}
 80001ea:	4c05      	ldr	r4, [pc, #20]	; (8000200 <__do_global_dtors_aux+0x18>)
 80001ec:	7823      	ldrb	r3, [r4, #0]
 80001ee:	b933      	cbnz	r3, 80001fe <__do_global_dtors_aux+0x16>
 80001f0:	4b04      	ldr	r3, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x1c>)
 80001f2:	b113      	cbz	r3, 80001fa <__do_global_dtors_aux+0x12>
 80001f4:	4804      	ldr	r0, [pc, #16]	; (8000208 <__do_global_dtors_aux+0x20>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	2301      	movs	r3, #1
 80001fc:	7023      	strb	r3, [r4, #0]
 80001fe:	bd10      	pop	{r4, pc}
 8000200:	2000000c 	.word	0x2000000c
 8000204:	00000000 	.word	0x00000000
 8000208:	08003254 	.word	0x08003254

0800020c <frame_dummy>:
 800020c:	b508      	push	{r3, lr}
 800020e:	4b03      	ldr	r3, [pc, #12]	; (800021c <frame_dummy+0x10>)
 8000210:	b11b      	cbz	r3, 800021a <frame_dummy+0xe>
 8000212:	4903      	ldr	r1, [pc, #12]	; (8000220 <frame_dummy+0x14>)
 8000214:	4803      	ldr	r0, [pc, #12]	; (8000224 <frame_dummy+0x18>)
 8000216:	f3af 8000 	nop.w
 800021a:	bd08      	pop	{r3, pc}
 800021c:	00000000 	.word	0x00000000
 8000220:	20000010 	.word	0x20000010
 8000224:	08003254 	.word	0x08003254

08000228 <__aeabi_drsub>:
 8000228:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800022c:	e002      	b.n	8000234 <__adddf3>
 800022e:	bf00      	nop

08000230 <__aeabi_dsub>:
 8000230:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000234 <__adddf3>:
 8000234:	b530      	push	{r4, r5, lr}
 8000236:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800023a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800023e:	ea94 0f05 	teq	r4, r5
 8000242:	bf08      	it	eq
 8000244:	ea90 0f02 	teqeq	r0, r2
 8000248:	bf1f      	itttt	ne
 800024a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800024e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000252:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000256:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800025a:	f000 80e2 	beq.w	8000422 <__adddf3+0x1ee>
 800025e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000262:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000266:	bfb8      	it	lt
 8000268:	426d      	neglt	r5, r5
 800026a:	dd0c      	ble.n	8000286 <__adddf3+0x52>
 800026c:	442c      	add	r4, r5
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	ea82 0000 	eor.w	r0, r2, r0
 800027a:	ea83 0101 	eor.w	r1, r3, r1
 800027e:	ea80 0202 	eor.w	r2, r0, r2
 8000282:	ea81 0303 	eor.w	r3, r1, r3
 8000286:	2d36      	cmp	r5, #54	; 0x36
 8000288:	bf88      	it	hi
 800028a:	bd30      	pophi	{r4, r5, pc}
 800028c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000290:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000294:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000298:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800029c:	d002      	beq.n	80002a4 <__adddf3+0x70>
 800029e:	4240      	negs	r0, r0
 80002a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002b0:	d002      	beq.n	80002b8 <__adddf3+0x84>
 80002b2:	4252      	negs	r2, r2
 80002b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b8:	ea94 0f05 	teq	r4, r5
 80002bc:	f000 80a7 	beq.w	800040e <__adddf3+0x1da>
 80002c0:	f1a4 0401 	sub.w	r4, r4, #1
 80002c4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c8:	db0d      	blt.n	80002e6 <__adddf3+0xb2>
 80002ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ce:	fa22 f205 	lsr.w	r2, r2, r5
 80002d2:	1880      	adds	r0, r0, r2
 80002d4:	f141 0100 	adc.w	r1, r1, #0
 80002d8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002dc:	1880      	adds	r0, r0, r2
 80002de:	fa43 f305 	asr.w	r3, r3, r5
 80002e2:	4159      	adcs	r1, r3
 80002e4:	e00e      	b.n	8000304 <__adddf3+0xd0>
 80002e6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ea:	f10e 0e20 	add.w	lr, lr, #32
 80002ee:	2a01      	cmp	r2, #1
 80002f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002f4:	bf28      	it	cs
 80002f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002fa:	fa43 f305 	asr.w	r3, r3, r5
 80002fe:	18c0      	adds	r0, r0, r3
 8000300:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000304:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000308:	d507      	bpl.n	800031a <__adddf3+0xe6>
 800030a:	f04f 0e00 	mov.w	lr, #0
 800030e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000312:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000316:	eb6e 0101 	sbc.w	r1, lr, r1
 800031a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800031e:	d31b      	bcc.n	8000358 <__adddf3+0x124>
 8000320:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000324:	d30c      	bcc.n	8000340 <__adddf3+0x10c>
 8000326:	0849      	lsrs	r1, r1, #1
 8000328:	ea5f 0030 	movs.w	r0, r0, rrx
 800032c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000330:	f104 0401 	add.w	r4, r4, #1
 8000334:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000338:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800033c:	f080 809a 	bcs.w	8000474 <__adddf3+0x240>
 8000340:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000344:	bf08      	it	eq
 8000346:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800034a:	f150 0000 	adcs.w	r0, r0, #0
 800034e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000352:	ea41 0105 	orr.w	r1, r1, r5
 8000356:	bd30      	pop	{r4, r5, pc}
 8000358:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800035c:	4140      	adcs	r0, r0
 800035e:	eb41 0101 	adc.w	r1, r1, r1
 8000362:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000366:	f1a4 0401 	sub.w	r4, r4, #1
 800036a:	d1e9      	bne.n	8000340 <__adddf3+0x10c>
 800036c:	f091 0f00 	teq	r1, #0
 8000370:	bf04      	itt	eq
 8000372:	4601      	moveq	r1, r0
 8000374:	2000      	moveq	r0, #0
 8000376:	fab1 f381 	clz	r3, r1
 800037a:	bf08      	it	eq
 800037c:	3320      	addeq	r3, #32
 800037e:	f1a3 030b 	sub.w	r3, r3, #11
 8000382:	f1b3 0220 	subs.w	r2, r3, #32
 8000386:	da0c      	bge.n	80003a2 <__adddf3+0x16e>
 8000388:	320c      	adds	r2, #12
 800038a:	dd08      	ble.n	800039e <__adddf3+0x16a>
 800038c:	f102 0c14 	add.w	ip, r2, #20
 8000390:	f1c2 020c 	rsb	r2, r2, #12
 8000394:	fa01 f00c 	lsl.w	r0, r1, ip
 8000398:	fa21 f102 	lsr.w	r1, r1, r2
 800039c:	e00c      	b.n	80003b8 <__adddf3+0x184>
 800039e:	f102 0214 	add.w	r2, r2, #20
 80003a2:	bfd8      	it	le
 80003a4:	f1c2 0c20 	rsble	ip, r2, #32
 80003a8:	fa01 f102 	lsl.w	r1, r1, r2
 80003ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003b0:	bfdc      	itt	le
 80003b2:	ea41 010c 	orrle.w	r1, r1, ip
 80003b6:	4090      	lslle	r0, r2
 80003b8:	1ae4      	subs	r4, r4, r3
 80003ba:	bfa2      	ittt	ge
 80003bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003c0:	4329      	orrge	r1, r5
 80003c2:	bd30      	popge	{r4, r5, pc}
 80003c4:	ea6f 0404 	mvn.w	r4, r4
 80003c8:	3c1f      	subs	r4, #31
 80003ca:	da1c      	bge.n	8000406 <__adddf3+0x1d2>
 80003cc:	340c      	adds	r4, #12
 80003ce:	dc0e      	bgt.n	80003ee <__adddf3+0x1ba>
 80003d0:	f104 0414 	add.w	r4, r4, #20
 80003d4:	f1c4 0220 	rsb	r2, r4, #32
 80003d8:	fa20 f004 	lsr.w	r0, r0, r4
 80003dc:	fa01 f302 	lsl.w	r3, r1, r2
 80003e0:	ea40 0003 	orr.w	r0, r0, r3
 80003e4:	fa21 f304 	lsr.w	r3, r1, r4
 80003e8:	ea45 0103 	orr.w	r1, r5, r3
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f1c4 040c 	rsb	r4, r4, #12
 80003f2:	f1c4 0220 	rsb	r2, r4, #32
 80003f6:	fa20 f002 	lsr.w	r0, r0, r2
 80003fa:	fa01 f304 	lsl.w	r3, r1, r4
 80003fe:	ea40 0003 	orr.w	r0, r0, r3
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	fa21 f004 	lsr.w	r0, r1, r4
 800040a:	4629      	mov	r1, r5
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	f094 0f00 	teq	r4, #0
 8000412:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000416:	bf06      	itte	eq
 8000418:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800041c:	3401      	addeq	r4, #1
 800041e:	3d01      	subne	r5, #1
 8000420:	e74e      	b.n	80002c0 <__adddf3+0x8c>
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf18      	it	ne
 8000428:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042c:	d029      	beq.n	8000482 <__adddf3+0x24e>
 800042e:	ea94 0f05 	teq	r4, r5
 8000432:	bf08      	it	eq
 8000434:	ea90 0f02 	teqeq	r0, r2
 8000438:	d005      	beq.n	8000446 <__adddf3+0x212>
 800043a:	ea54 0c00 	orrs.w	ip, r4, r0
 800043e:	bf04      	itt	eq
 8000440:	4619      	moveq	r1, r3
 8000442:	4610      	moveq	r0, r2
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea91 0f03 	teq	r1, r3
 800044a:	bf1e      	ittt	ne
 800044c:	2100      	movne	r1, #0
 800044e:	2000      	movne	r0, #0
 8000450:	bd30      	popne	{r4, r5, pc}
 8000452:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000456:	d105      	bne.n	8000464 <__adddf3+0x230>
 8000458:	0040      	lsls	r0, r0, #1
 800045a:	4149      	adcs	r1, r1
 800045c:	bf28      	it	cs
 800045e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000462:	bd30      	pop	{r4, r5, pc}
 8000464:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000468:	bf3c      	itt	cc
 800046a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800046e:	bd30      	popcc	{r4, r5, pc}
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000478:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800047c:	f04f 0000 	mov.w	r0, #0
 8000480:	bd30      	pop	{r4, r5, pc}
 8000482:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000486:	bf1a      	itte	ne
 8000488:	4619      	movne	r1, r3
 800048a:	4610      	movne	r0, r2
 800048c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000490:	bf1c      	itt	ne
 8000492:	460b      	movne	r3, r1
 8000494:	4602      	movne	r2, r0
 8000496:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800049a:	bf06      	itte	eq
 800049c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004a0:	ea91 0f03 	teqeq	r1, r3
 80004a4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a8:	bd30      	pop	{r4, r5, pc}
 80004aa:	bf00      	nop

080004ac <__aeabi_ui2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f04f 0500 	mov.w	r5, #0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e750      	b.n	800036c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_i2d>:
 80004cc:	f090 0f00 	teq	r0, #0
 80004d0:	bf04      	itt	eq
 80004d2:	2100      	moveq	r1, #0
 80004d4:	4770      	bxeq	lr
 80004d6:	b530      	push	{r4, r5, lr}
 80004d8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004dc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004e0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004e4:	bf48      	it	mi
 80004e6:	4240      	negmi	r0, r0
 80004e8:	f04f 0100 	mov.w	r1, #0
 80004ec:	e73e      	b.n	800036c <__adddf3+0x138>
 80004ee:	bf00      	nop

080004f0 <__aeabi_f2d>:
 80004f0:	0042      	lsls	r2, r0, #1
 80004f2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004fa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004fe:	bf1f      	itttt	ne
 8000500:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000504:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000508:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800050c:	4770      	bxne	lr
 800050e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000512:	bf08      	it	eq
 8000514:	4770      	bxeq	lr
 8000516:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800051a:	bf04      	itt	eq
 800051c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000520:	4770      	bxeq	lr
 8000522:	b530      	push	{r4, r5, lr}
 8000524:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000530:	e71c      	b.n	800036c <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_ul2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f04f 0500 	mov.w	r5, #0
 8000542:	e00a      	b.n	800055a <__aeabi_l2d+0x16>

08000544 <__aeabi_l2d>:
 8000544:	ea50 0201 	orrs.w	r2, r0, r1
 8000548:	bf08      	it	eq
 800054a:	4770      	bxeq	lr
 800054c:	b530      	push	{r4, r5, lr}
 800054e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000552:	d502      	bpl.n	800055a <__aeabi_l2d+0x16>
 8000554:	4240      	negs	r0, r0
 8000556:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800055a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000562:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000566:	f43f aed8 	beq.w	800031a <__adddf3+0xe6>
 800056a:	f04f 0203 	mov.w	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800057a:	bf18      	it	ne
 800057c:	3203      	addne	r2, #3
 800057e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000582:	f1c2 0320 	rsb	r3, r2, #32
 8000586:	fa00 fc03 	lsl.w	ip, r0, r3
 800058a:	fa20 f002 	lsr.w	r0, r0, r2
 800058e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000592:	ea40 000e 	orr.w	r0, r0, lr
 8000596:	fa21 f102 	lsr.w	r1, r1, r2
 800059a:	4414      	add	r4, r2
 800059c:	e6bd      	b.n	800031a <__adddf3+0xe6>
 800059e:	bf00      	nop

080005a0 <__aeabi_dmul>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005a6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005aa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ae:	bf1d      	ittte	ne
 80005b0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005b4:	ea94 0f0c 	teqne	r4, ip
 80005b8:	ea95 0f0c 	teqne	r5, ip
 80005bc:	f000 f8de 	bleq	800077c <__aeabi_dmul+0x1dc>
 80005c0:	442c      	add	r4, r5
 80005c2:	ea81 0603 	eor.w	r6, r1, r3
 80005c6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ca:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ce:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005d2:	bf18      	it	ne
 80005d4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005e0:	d038      	beq.n	8000654 <__aeabi_dmul+0xb4>
 80005e2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ee:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005f2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005f6:	f04f 0600 	mov.w	r6, #0
 80005fa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005fe:	f09c 0f00 	teq	ip, #0
 8000602:	bf18      	it	ne
 8000604:	f04e 0e01 	orrne.w	lr, lr, #1
 8000608:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800060c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000610:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000614:	d204      	bcs.n	8000620 <__aeabi_dmul+0x80>
 8000616:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800061a:	416d      	adcs	r5, r5
 800061c:	eb46 0606 	adc.w	r6, r6, r6
 8000620:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000624:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000628:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800062c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000630:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000634:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000638:	bf88      	it	hi
 800063a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800063e:	d81e      	bhi.n	800067e <__aeabi_dmul+0xde>
 8000640:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000644:	bf08      	it	eq
 8000646:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800064a:	f150 0000 	adcs.w	r0, r0, #0
 800064e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000652:	bd70      	pop	{r4, r5, r6, pc}
 8000654:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000658:	ea46 0101 	orr.w	r1, r6, r1
 800065c:	ea40 0002 	orr.w	r0, r0, r2
 8000660:	ea81 0103 	eor.w	r1, r1, r3
 8000664:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000668:	bfc2      	ittt	gt
 800066a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800066e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000672:	bd70      	popgt	{r4, r5, r6, pc}
 8000674:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000678:	f04f 0e00 	mov.w	lr, #0
 800067c:	3c01      	subs	r4, #1
 800067e:	f300 80ab 	bgt.w	80007d8 <__aeabi_dmul+0x238>
 8000682:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000686:	bfde      	ittt	le
 8000688:	2000      	movle	r0, #0
 800068a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800068e:	bd70      	pople	{r4, r5, r6, pc}
 8000690:	f1c4 0400 	rsb	r4, r4, #0
 8000694:	3c20      	subs	r4, #32
 8000696:	da35      	bge.n	8000704 <__aeabi_dmul+0x164>
 8000698:	340c      	adds	r4, #12
 800069a:	dc1b      	bgt.n	80006d4 <__aeabi_dmul+0x134>
 800069c:	f104 0414 	add.w	r4, r4, #20
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f305 	lsl.w	r3, r0, r5
 80006a8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006c0:	fa21 f604 	lsr.w	r6, r1, r4
 80006c4:	eb42 0106 	adc.w	r1, r2, r6
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f1c4 040c 	rsb	r4, r4, #12
 80006d8:	f1c4 0520 	rsb	r5, r4, #32
 80006dc:	fa00 f304 	lsl.w	r3, r0, r4
 80006e0:	fa20 f005 	lsr.w	r0, r0, r5
 80006e4:	fa01 f204 	lsl.w	r2, r1, r4
 80006e8:	ea40 0002 	orr.w	r0, r0, r2
 80006ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006f0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006f4:	f141 0100 	adc.w	r1, r1, #0
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f1c4 0520 	rsb	r5, r4, #32
 8000708:	fa00 f205 	lsl.w	r2, r0, r5
 800070c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000710:	fa20 f304 	lsr.w	r3, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea43 0302 	orr.w	r3, r3, r2
 800071c:	fa21 f004 	lsr.w	r0, r1, r4
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	fa21 f204 	lsr.w	r2, r1, r4
 8000728:	ea20 0002 	bic.w	r0, r0, r2
 800072c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f094 0f00 	teq	r4, #0
 8000740:	d10f      	bne.n	8000762 <__aeabi_dmul+0x1c2>
 8000742:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000746:	0040      	lsls	r0, r0, #1
 8000748:	eb41 0101 	adc.w	r1, r1, r1
 800074c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3c01      	subeq	r4, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1a6>
 8000756:	ea41 0106 	orr.w	r1, r1, r6
 800075a:	f095 0f00 	teq	r5, #0
 800075e:	bf18      	it	ne
 8000760:	4770      	bxne	lr
 8000762:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000766:	0052      	lsls	r2, r2, #1
 8000768:	eb43 0303 	adc.w	r3, r3, r3
 800076c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000770:	bf08      	it	eq
 8000772:	3d01      	subeq	r5, #1
 8000774:	d0f7      	beq.n	8000766 <__aeabi_dmul+0x1c6>
 8000776:	ea43 0306 	orr.w	r3, r3, r6
 800077a:	4770      	bx	lr
 800077c:	ea94 0f0c 	teq	r4, ip
 8000780:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000784:	bf18      	it	ne
 8000786:	ea95 0f0c 	teqne	r5, ip
 800078a:	d00c      	beq.n	80007a6 <__aeabi_dmul+0x206>
 800078c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000790:	bf18      	it	ne
 8000792:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000796:	d1d1      	bne.n	800073c <__aeabi_dmul+0x19c>
 8000798:	ea81 0103 	eor.w	r1, r1, r3
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	f04f 0000 	mov.w	r0, #0
 80007a4:	bd70      	pop	{r4, r5, r6, pc}
 80007a6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007aa:	bf06      	itte	eq
 80007ac:	4610      	moveq	r0, r2
 80007ae:	4619      	moveq	r1, r3
 80007b0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007b4:	d019      	beq.n	80007ea <__aeabi_dmul+0x24a>
 80007b6:	ea94 0f0c 	teq	r4, ip
 80007ba:	d102      	bne.n	80007c2 <__aeabi_dmul+0x222>
 80007bc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007c0:	d113      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007c2:	ea95 0f0c 	teq	r5, ip
 80007c6:	d105      	bne.n	80007d4 <__aeabi_dmul+0x234>
 80007c8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007cc:	bf1c      	itt	ne
 80007ce:	4610      	movne	r0, r2
 80007d0:	4619      	movne	r1, r3
 80007d2:	d10a      	bne.n	80007ea <__aeabi_dmul+0x24a>
 80007d4:	ea81 0103 	eor.w	r1, r1, r3
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007e4:	f04f 0000 	mov.w	r0, #0
 80007e8:	bd70      	pop	{r4, r5, r6, pc}
 80007ea:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ee:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007f2:	bd70      	pop	{r4, r5, r6, pc}

080007f4 <__aeabi_ddiv>:
 80007f4:	b570      	push	{r4, r5, r6, lr}
 80007f6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007fa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007fe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000802:	bf1d      	ittte	ne
 8000804:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000808:	ea94 0f0c 	teqne	r4, ip
 800080c:	ea95 0f0c 	teqne	r5, ip
 8000810:	f000 f8a7 	bleq	8000962 <__aeabi_ddiv+0x16e>
 8000814:	eba4 0405 	sub.w	r4, r4, r5
 8000818:	ea81 0e03 	eor.w	lr, r1, r3
 800081c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000820:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000824:	f000 8088 	beq.w	8000938 <__aeabi_ddiv+0x144>
 8000828:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800082c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000830:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000834:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000838:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800083c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000840:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000844:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000848:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800084c:	429d      	cmp	r5, r3
 800084e:	bf08      	it	eq
 8000850:	4296      	cmpeq	r6, r2
 8000852:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000856:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800085a:	d202      	bcs.n	8000862 <__aeabi_ddiv+0x6e>
 800085c:	085b      	lsrs	r3, r3, #1
 800085e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000862:	1ab6      	subs	r6, r6, r2
 8000864:	eb65 0503 	sbc.w	r5, r5, r3
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000872:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 000c 	orrcs.w	r0, r0, ip
 8000888:	085b      	lsrs	r3, r3, #1
 800088a:	ea4f 0232 	mov.w	r2, r2, rrx
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008d0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008d4:	d018      	beq.n	8000908 <__aeabi_ddiv+0x114>
 80008d6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008da:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008de:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008e2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008e6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ea:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ee:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008f2:	d1c0      	bne.n	8000876 <__aeabi_ddiv+0x82>
 80008f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f8:	d10b      	bne.n	8000912 <__aeabi_ddiv+0x11e>
 80008fa:	ea41 0100 	orr.w	r1, r1, r0
 80008fe:	f04f 0000 	mov.w	r0, #0
 8000902:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000906:	e7b6      	b.n	8000876 <__aeabi_ddiv+0x82>
 8000908:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800090c:	bf04      	itt	eq
 800090e:	4301      	orreq	r1, r0
 8000910:	2000      	moveq	r0, #0
 8000912:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000916:	bf88      	it	hi
 8000918:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800091c:	f63f aeaf 	bhi.w	800067e <__aeabi_dmul+0xde>
 8000920:	ebb5 0c03 	subs.w	ip, r5, r3
 8000924:	bf04      	itt	eq
 8000926:	ebb6 0c02 	subseq.w	ip, r6, r2
 800092a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800092e:	f150 0000 	adcs.w	r0, r0, #0
 8000932:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000936:	bd70      	pop	{r4, r5, r6, pc}
 8000938:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800093c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000940:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000944:	bfc2      	ittt	gt
 8000946:	ebd4 050c 	rsbsgt	r5, r4, ip
 800094a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800094e:	bd70      	popgt	{r4, r5, r6, pc}
 8000950:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000954:	f04f 0e00 	mov.w	lr, #0
 8000958:	3c01      	subs	r4, #1
 800095a:	e690      	b.n	800067e <__aeabi_dmul+0xde>
 800095c:	ea45 0e06 	orr.w	lr, r5, r6
 8000960:	e68d      	b.n	800067e <__aeabi_dmul+0xde>
 8000962:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000966:	ea94 0f0c 	teq	r4, ip
 800096a:	bf08      	it	eq
 800096c:	ea95 0f0c 	teqeq	r5, ip
 8000970:	f43f af3b 	beq.w	80007ea <__aeabi_dmul+0x24a>
 8000974:	ea94 0f0c 	teq	r4, ip
 8000978:	d10a      	bne.n	8000990 <__aeabi_ddiv+0x19c>
 800097a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800097e:	f47f af34 	bne.w	80007ea <__aeabi_dmul+0x24a>
 8000982:	ea95 0f0c 	teq	r5, ip
 8000986:	f47f af25 	bne.w	80007d4 <__aeabi_dmul+0x234>
 800098a:	4610      	mov	r0, r2
 800098c:	4619      	mov	r1, r3
 800098e:	e72c      	b.n	80007ea <__aeabi_dmul+0x24a>
 8000990:	ea95 0f0c 	teq	r5, ip
 8000994:	d106      	bne.n	80009a4 <__aeabi_ddiv+0x1b0>
 8000996:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800099a:	f43f aefd 	beq.w	8000798 <__aeabi_dmul+0x1f8>
 800099e:	4610      	mov	r0, r2
 80009a0:	4619      	mov	r1, r3
 80009a2:	e722      	b.n	80007ea <__aeabi_dmul+0x24a>
 80009a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a8:	bf18      	it	ne
 80009aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ae:	f47f aec5 	bne.w	800073c <__aeabi_dmul+0x19c>
 80009b2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009b6:	f47f af0d 	bne.w	80007d4 <__aeabi_dmul+0x234>
 80009ba:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009be:	f47f aeeb 	bne.w	8000798 <__aeabi_dmul+0x1f8>
 80009c2:	e712      	b.n	80007ea <__aeabi_dmul+0x24a>

080009c4 <__aeabi_d2uiz>:
 80009c4:	004a      	lsls	r2, r1, #1
 80009c6:	d211      	bcs.n	80009ec <__aeabi_d2uiz+0x28>
 80009c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009cc:	d211      	bcs.n	80009f2 <__aeabi_d2uiz+0x2e>
 80009ce:	d50d      	bpl.n	80009ec <__aeabi_d2uiz+0x28>
 80009d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009d8:	d40e      	bmi.n	80009f8 <__aeabi_d2uiz+0x34>
 80009da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009e6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009f6:	d102      	bne.n	80009fe <__aeabi_d2uiz+0x3a>
 80009f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80009fc:	4770      	bx	lr
 80009fe:	f04f 0000 	mov.w	r0, #0
 8000a02:	4770      	bx	lr

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000a18:	f000 b974 	b.w	8000d04 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	468c      	mov	ip, r1
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	9e08      	ldr	r6, [sp, #32]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d14b      	bne.n	8000ada <__udivmoddi4+0xa6>
 8000a42:	428a      	cmp	r2, r1
 8000a44:	4615      	mov	r5, r2
 8000a46:	d967      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000a48:	fab2 f282 	clz	r2, r2
 8000a4c:	b14a      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a4e:	f1c2 0720 	rsb	r7, r2, #32
 8000a52:	fa01 f302 	lsl.w	r3, r1, r2
 8000a56:	fa20 f707 	lsr.w	r7, r0, r7
 8000a5a:	4095      	lsls	r5, r2
 8000a5c:	ea47 0c03 	orr.w	ip, r7, r3
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000a66:	fbbc f7fe 	udiv	r7, ip, lr
 8000a6a:	fa1f f885 	uxth.w	r8, r5
 8000a6e:	fb0e c317 	mls	r3, lr, r7, ip
 8000a72:	fb07 f908 	mul.w	r9, r7, r8
 8000a76:	0c21      	lsrs	r1, r4, #16
 8000a78:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a7c:	4599      	cmp	r9, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18eb      	adds	r3, r5, r3
 8000a82:	f107 31ff 	add.w	r1, r7, #4294967295	; 0xffffffff
 8000a86:	f080 811c 	bcs.w	8000cc2 <__udivmoddi4+0x28e>
 8000a8a:	4599      	cmp	r9, r3
 8000a8c:	f240 8119 	bls.w	8000cc2 <__udivmoddi4+0x28e>
 8000a90:	3f02      	subs	r7, #2
 8000a92:	442b      	add	r3, r5
 8000a94:	eba3 0309 	sub.w	r3, r3, r9
 8000a98:	fbb3 f0fe 	udiv	r0, r3, lr
 8000a9c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000aa0:	fb00 f108 	mul.w	r1, r0, r8
 8000aa4:	b2a4      	uxth	r4, r4
 8000aa6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aaa:	42a1      	cmp	r1, r4
 8000aac:	d909      	bls.n	8000ac2 <__udivmoddi4+0x8e>
 8000aae:	192c      	adds	r4, r5, r4
 8000ab0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ab4:	f080 8107 	bcs.w	8000cc6 <__udivmoddi4+0x292>
 8000ab8:	42a1      	cmp	r1, r4
 8000aba:	f240 8104 	bls.w	8000cc6 <__udivmoddi4+0x292>
 8000abe:	3802      	subs	r0, #2
 8000ac0:	442c      	add	r4, r5
 8000ac2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000ac6:	2700      	movs	r7, #0
 8000ac8:	1a64      	subs	r4, r4, r1
 8000aca:	b11e      	cbz	r6, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	2300      	movs	r3, #0
 8000ace:	40d4      	lsrs	r4, r2
 8000ad0:	e9c6 4300 	strd	r4, r3, [r6]
 8000ad4:	4639      	mov	r1, r7
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	428b      	cmp	r3, r1
 8000adc:	d909      	bls.n	8000af2 <__udivmoddi4+0xbe>
 8000ade:	2e00      	cmp	r6, #0
 8000ae0:	f000 80ec 	beq.w	8000cbc <__udivmoddi4+0x288>
 8000ae4:	2700      	movs	r7, #0
 8000ae6:	e9c6 0100 	strd	r0, r1, [r6]
 8000aea:	4638      	mov	r0, r7
 8000aec:	4639      	mov	r1, r7
 8000aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000af2:	fab3 f783 	clz	r7, r3
 8000af6:	2f00      	cmp	r7, #0
 8000af8:	d148      	bne.n	8000b8c <__udivmoddi4+0x158>
 8000afa:	428b      	cmp	r3, r1
 8000afc:	d302      	bcc.n	8000b04 <__udivmoddi4+0xd0>
 8000afe:	4282      	cmp	r2, r0
 8000b00:	f200 80fb 	bhi.w	8000cfa <__udivmoddi4+0x2c6>
 8000b04:	1a84      	subs	r4, r0, r2
 8000b06:	eb61 0303 	sbc.w	r3, r1, r3
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	469c      	mov	ip, r3
 8000b0e:	2e00      	cmp	r6, #0
 8000b10:	d0e0      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b12:	e9c6 4c00 	strd	r4, ip, [r6]
 8000b16:	e7dd      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b18:	b902      	cbnz	r2, 8000b1c <__udivmoddi4+0xe8>
 8000b1a:	deff      	udf	#255	; 0xff
 8000b1c:	fab2 f282 	clz	r2, r2
 8000b20:	2a00      	cmp	r2, #0
 8000b22:	f040 808f 	bne.w	8000c44 <__udivmoddi4+0x210>
 8000b26:	2701      	movs	r7, #1
 8000b28:	1b49      	subs	r1, r1, r5
 8000b2a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000b2e:	fa1f f985 	uxth.w	r9, r5
 8000b32:	fbb1 fef8 	udiv	lr, r1, r8
 8000b36:	fb08 111e 	mls	r1, r8, lr, r1
 8000b3a:	fb09 f00e 	mul.w	r0, r9, lr
 8000b3e:	ea4f 4c14 	mov.w	ip, r4, lsr #16
 8000b42:	ea4c 4301 	orr.w	r3, ip, r1, lsl #16
 8000b46:	4298      	cmp	r0, r3
 8000b48:	d907      	bls.n	8000b5a <__udivmoddi4+0x126>
 8000b4a:	18eb      	adds	r3, r5, r3
 8000b4c:	f10e 31ff 	add.w	r1, lr, #4294967295	; 0xffffffff
 8000b50:	d202      	bcs.n	8000b58 <__udivmoddi4+0x124>
 8000b52:	4298      	cmp	r0, r3
 8000b54:	f200 80cd 	bhi.w	8000cf2 <__udivmoddi4+0x2be>
 8000b58:	468e      	mov	lr, r1
 8000b5a:	1a1b      	subs	r3, r3, r0
 8000b5c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b60:	fb08 3310 	mls	r3, r8, r0, r3
 8000b64:	fb09 f900 	mul.w	r9, r9, r0
 8000b68:	b2a4      	uxth	r4, r4
 8000b6a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b6e:	45a1      	cmp	r9, r4
 8000b70:	d907      	bls.n	8000b82 <__udivmoddi4+0x14e>
 8000b72:	192c      	adds	r4, r5, r4
 8000b74:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000b78:	d202      	bcs.n	8000b80 <__udivmoddi4+0x14c>
 8000b7a:	45a1      	cmp	r9, r4
 8000b7c:	f200 80b6 	bhi.w	8000cec <__udivmoddi4+0x2b8>
 8000b80:	4618      	mov	r0, r3
 8000b82:	eba4 0409 	sub.w	r4, r4, r9
 8000b86:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000b8a:	e79e      	b.n	8000aca <__udivmoddi4+0x96>
 8000b8c:	f1c7 0520 	rsb	r5, r7, #32
 8000b90:	40bb      	lsls	r3, r7
 8000b92:	fa22 fc05 	lsr.w	ip, r2, r5
 8000b96:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b9a:	fa21 f405 	lsr.w	r4, r1, r5
 8000b9e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ba2:	fbb4 f9fe 	udiv	r9, r4, lr
 8000ba6:	fa1f f88c 	uxth.w	r8, ip
 8000baa:	fb0e 4419 	mls	r4, lr, r9, r4
 8000bae:	fa20 f305 	lsr.w	r3, r0, r5
 8000bb2:	40b9      	lsls	r1, r7
 8000bb4:	fb09 fa08 	mul.w	sl, r9, r8
 8000bb8:	4319      	orrs	r1, r3
 8000bba:	0c0b      	lsrs	r3, r1, #16
 8000bbc:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bc0:	45a2      	cmp	sl, r4
 8000bc2:	fa02 f207 	lsl.w	r2, r2, r7
 8000bc6:	fa00 f307 	lsl.w	r3, r0, r7
 8000bca:	d90b      	bls.n	8000be4 <__udivmoddi4+0x1b0>
 8000bcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000bd0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000bd4:	f080 8088 	bcs.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bd8:	45a2      	cmp	sl, r4
 8000bda:	f240 8085 	bls.w	8000ce8 <__udivmoddi4+0x2b4>
 8000bde:	f1a9 0902 	sub.w	r9, r9, #2
 8000be2:	4464      	add	r4, ip
 8000be4:	eba4 040a 	sub.w	r4, r4, sl
 8000be8:	fbb4 f0fe 	udiv	r0, r4, lr
 8000bec:	fb0e 4410 	mls	r4, lr, r0, r4
 8000bf0:	fb00 fa08 	mul.w	sl, r0, r8
 8000bf4:	b289      	uxth	r1, r1
 8000bf6:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8000bfa:	45a2      	cmp	sl, r4
 8000bfc:	d908      	bls.n	8000c10 <__udivmoddi4+0x1dc>
 8000bfe:	eb1c 0404 	adds.w	r4, ip, r4
 8000c02:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000c06:	d26b      	bcs.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c08:	45a2      	cmp	sl, r4
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0x2ac>
 8000c0c:	3802      	subs	r0, #2
 8000c0e:	4464      	add	r4, ip
 8000c10:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c14:	fba0 8902 	umull	r8, r9, r0, r2
 8000c18:	eba4 040a 	sub.w	r4, r4, sl
 8000c1c:	454c      	cmp	r4, r9
 8000c1e:	4641      	mov	r1, r8
 8000c20:	46ce      	mov	lr, r9
 8000c22:	d354      	bcc.n	8000cce <__udivmoddi4+0x29a>
 8000c24:	d051      	beq.n	8000cca <__udivmoddi4+0x296>
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d069      	beq.n	8000cfe <__udivmoddi4+0x2ca>
 8000c2a:	1a5a      	subs	r2, r3, r1
 8000c2c:	eb64 040e 	sbc.w	r4, r4, lr
 8000c30:	fa04 f505 	lsl.w	r5, r4, r5
 8000c34:	fa22 f307 	lsr.w	r3, r2, r7
 8000c38:	40fc      	lsrs	r4, r7
 8000c3a:	431d      	orrs	r5, r3
 8000c3c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c40:	2700      	movs	r7, #0
 8000c42:	e747      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000c44:	4095      	lsls	r5, r2
 8000c46:	f1c2 0320 	rsb	r3, r2, #32
 8000c4a:	fa21 f003 	lsr.w	r0, r1, r3
 8000c4e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8000c52:	fbb0 f7f8 	udiv	r7, r0, r8
 8000c56:	fa1f f985 	uxth.w	r9, r5
 8000c5a:	fb08 0017 	mls	r0, r8, r7, r0
 8000c5e:	fa24 f303 	lsr.w	r3, r4, r3
 8000c62:	4091      	lsls	r1, r2
 8000c64:	fb07 fc09 	mul.w	ip, r7, r9
 8000c68:	430b      	orrs	r3, r1
 8000c6a:	0c19      	lsrs	r1, r3, #16
 8000c6c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c70:	458c      	cmp	ip, r1
 8000c72:	fa04 f402 	lsl.w	r4, r4, r2
 8000c76:	d907      	bls.n	8000c88 <__udivmoddi4+0x254>
 8000c78:	1869      	adds	r1, r5, r1
 8000c7a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c7e:	d231      	bcs.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c80:	458c      	cmp	ip, r1
 8000c82:	d92f      	bls.n	8000ce4 <__udivmoddi4+0x2b0>
 8000c84:	3f02      	subs	r7, #2
 8000c86:	4429      	add	r1, r5
 8000c88:	eba1 010c 	sub.w	r1, r1, ip
 8000c8c:	fbb1 f0f8 	udiv	r0, r1, r8
 8000c90:	fb08 1c10 	mls	ip, r8, r0, r1
 8000c94:	fb00 fe09 	mul.w	lr, r0, r9
 8000c98:	b299      	uxth	r1, r3
 8000c9a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000c9e:	458e      	cmp	lr, r1
 8000ca0:	d907      	bls.n	8000cb2 <__udivmoddi4+0x27e>
 8000ca2:	1869      	adds	r1, r5, r1
 8000ca4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000ca8:	d218      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000caa:	458e      	cmp	lr, r1
 8000cac:	d916      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000cae:	3802      	subs	r0, #2
 8000cb0:	4429      	add	r1, r5
 8000cb2:	eba1 010e 	sub.w	r1, r1, lr
 8000cb6:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000cba:	e73a      	b.n	8000b32 <__udivmoddi4+0xfe>
 8000cbc:	4637      	mov	r7, r6
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	e708      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cc2:	460f      	mov	r7, r1
 8000cc4:	e6e6      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	e6fb      	b.n	8000ac2 <__udivmoddi4+0x8e>
 8000cca:	4543      	cmp	r3, r8
 8000ccc:	d2ab      	bcs.n	8000c26 <__udivmoddi4+0x1f2>
 8000cce:	ebb8 0102 	subs.w	r1, r8, r2
 8000cd2:	eb69 020c 	sbc.w	r2, r9, ip
 8000cd6:	3801      	subs	r0, #1
 8000cd8:	4696      	mov	lr, r2
 8000cda:	e7a4      	b.n	8000c26 <__udivmoddi4+0x1f2>
 8000cdc:	4618      	mov	r0, r3
 8000cde:	e7e8      	b.n	8000cb2 <__udivmoddi4+0x27e>
 8000ce0:	4608      	mov	r0, r1
 8000ce2:	e795      	b.n	8000c10 <__udivmoddi4+0x1dc>
 8000ce4:	4607      	mov	r7, r0
 8000ce6:	e7cf      	b.n	8000c88 <__udivmoddi4+0x254>
 8000ce8:	4681      	mov	r9, r0
 8000cea:	e77b      	b.n	8000be4 <__udivmoddi4+0x1b0>
 8000cec:	3802      	subs	r0, #2
 8000cee:	442c      	add	r4, r5
 8000cf0:	e747      	b.n	8000b82 <__udivmoddi4+0x14e>
 8000cf2:	f1ae 0e02 	sub.w	lr, lr, #2
 8000cf6:	442b      	add	r3, r5
 8000cf8:	e72f      	b.n	8000b5a <__udivmoddi4+0x126>
 8000cfa:	4638      	mov	r0, r7
 8000cfc:	e707      	b.n	8000b0e <__udivmoddi4+0xda>
 8000cfe:	4637      	mov	r7, r6
 8000d00:	e6e8      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000d02:	bf00      	nop

08000d04 <__aeabi_idiv0>:
 8000d04:	4770      	bx	lr
 8000d06:	bf00      	nop

08000d08 <copyData>:

		}

	}
}
void copyData() {
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
	memcpy(TxData, RxData, 8);
 8000d0c:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <copyData+0x40>)
 8000d0e:	4a0f      	ldr	r2, [pc, #60]	; (8000d4c <copyData+0x44>)
 8000d10:	6811      	ldr	r1, [r2, #0]
 8000d12:	6852      	ldr	r2, [r2, #4]
 8000d14:	6019      	str	r1, [r3, #0]
 8000d16:	605a      	str	r2, [r3, #4]
	TxHeader.DLC = RxHeader.DLC;
 8000d18:	4b0d      	ldr	r3, [pc, #52]	; (8000d50 <copyData+0x48>)
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	4a0d      	ldr	r2, [pc, #52]	; (8000d54 <copyData+0x4c>)
 8000d1e:	6113      	str	r3, [r2, #16]
	TxHeader.StdId = RxHeader.StdId;
 8000d20:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <copyData+0x48>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	4a0b      	ldr	r2, [pc, #44]	; (8000d54 <copyData+0x4c>)
 8000d26:	6013      	str	r3, [r2, #0]
	TxHeader.RTR = CAN_RTR_DATA;
 8000d28:	4b0a      	ldr	r3, [pc, #40]	; (8000d54 <copyData+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
	TxHeader.IDE = CAN_ID_STD;
 8000d2e:	4b09      	ldr	r3, [pc, #36]	; (8000d54 <copyData+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	609a      	str	r2, [r3, #8]
	TxHeader.TransmitGlobalTime = 0;
 8000d34:	4b07      	ldr	r3, [pc, #28]	; (8000d54 <copyData+0x4c>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	751a      	strb	r2, [r3, #20]
	filtercan(RxHeader.StdId);
 8000d3a:	4b05      	ldr	r3, [pc, #20]	; (8000d50 <copyData+0x48>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f000 f80a 	bl	8000d58 <filtercan>

}
 8000d44:	bf00      	nop
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	20000058 	.word	0x20000058
 8000d4c:	20000064 	.word	0x20000064
 8000d50:	20000084 	.word	0x20000084
 8000d54:	2000006c 	.word	0x2000006c

08000d58 <filtercan>:
void filtercan(int airbid) {
 8000d58:	b590      	push	{r4, r7, lr}
 8000d5a:	b087      	sub	sp, #28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
	if (airbid == 0x316) {
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f240 3216 	movw	r2, #790	; 0x316
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d123      	bne.n	8000db2 <filtercan+0x5a>
		// Calculate and store RPM
		uint8_t d1 = TxData[2];
 8000d6a:	4b33      	ldr	r3, [pc, #204]	; (8000e38 <filtercan+0xe0>)
 8000d6c:	789b      	ldrb	r3, [r3, #2]
 8000d6e:	74fb      	strb	r3, [r7, #19]
		uint8_t d2 = TxData[3];
 8000d70:	4b31      	ldr	r3, [pc, #196]	; (8000e38 <filtercan+0xe0>)
 8000d72:	78db      	ldrb	r3, [r3, #3]
 8000d74:	74bb      	strb	r3, [r7, #18]
		rpm = ((uint16_t) d2 << 8) | d1;
 8000d76:	7cbb      	ldrb	r3, [r7, #18]
 8000d78:	021b      	lsls	r3, r3, #8
 8000d7a:	b21a      	sxth	r2, r3
 8000d7c:	7cfb      	ldrb	r3, [r7, #19]
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b21b      	sxth	r3, r3
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	4b2d      	ldr	r3, [pc, #180]	; (8000e3c <filtercan+0xe4>)
 8000d88:	801a      	strh	r2, [r3, #0]
		rpm = rpm / 6.4;
 8000d8a:	4b2c      	ldr	r3, [pc, #176]	; (8000e3c <filtercan+0xe4>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f7ff fb9c 	bl	80004cc <__aeabi_i2d>
 8000d94:	a326      	add	r3, pc, #152	; (adr r3, 8000e30 <filtercan+0xd8>)
 8000d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d9a:	f7ff fd2b 	bl	80007f4 <__aeabi_ddiv>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	460c      	mov	r4, r1
 8000da2:	4618      	mov	r0, r3
 8000da4:	4621      	mov	r1, r4
 8000da6:	f7ff fe0d 	bl	80009c4 <__aeabi_d2uiz>
 8000daa:	4603      	mov	r3, r0
 8000dac:	b29a      	uxth	r2, r3
 8000dae:	4b23      	ldr	r3, [pc, #140]	; (8000e3c <filtercan+0xe4>)
 8000db0:	801a      	strh	r2, [r3, #0]
	}
	if(airbid == 0x545){
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f240 5245 	movw	r2, #1349	; 0x545
 8000db8:	4293      	cmp	r3, r2
 8000dba:	d132      	bne.n	8000e22 <filtercan+0xca>
		// Put RPM into the bytes:
		//rpm = 7000;
		int number = rpm / 1000;
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <filtercan+0xe4>)
 8000dbe:	881b      	ldrh	r3, [r3, #0]
 8000dc0:	4a1f      	ldr	r2, [pc, #124]	; (8000e40 <filtercan+0xe8>)
 8000dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000dc6:	099b      	lsrs	r3, r3, #6
 8000dc8:	b29b      	uxth	r3, r3
 8000dca:	60fb      	str	r3, [r7, #12]
		number = number * 16;
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	011b      	lsls	r3, r3, #4
 8000dd0:	60fb      	str	r3, [r7, #12]
		// Set Bits according to Bitmap
		for(int n = 4; n < 7; n++){
 8000dd2:	2304      	movs	r3, #4
 8000dd4:	617b      	str	r3, [r7, #20]
 8000dd6:	e021      	b.n	8000e1c <filtercan+0xc4>
			int bit = (number >> n) & 1U;
 8000dd8:	68fa      	ldr	r2, [r7, #12]
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	fa42 f303 	asr.w	r3, r2, r3
 8000de0:	f003 0301 	and.w	r3, r3, #1
 8000de4:	60bb      	str	r3, [r7, #8]
			TxData[3] ^= (-bit ^ TxData[3]) & (1UL << n);
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <filtercan+0xe0>)
 8000de8:	78da      	ldrb	r2, [r3, #3]
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	425b      	negs	r3, r3
 8000df0:	b2db      	uxtb	r3, r3
 8000df2:	b259      	sxtb	r1, r3
 8000df4:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <filtercan+0xe0>)
 8000df6:	78db      	ldrb	r3, [r3, #3]
 8000df8:	b25b      	sxtb	r3, r3
 8000dfa:	404b      	eors	r3, r1
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	b2d9      	uxtb	r1, r3
 8000e00:	2001      	movs	r0, #1
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	fa00 f303 	lsl.w	r3, r0, r3
 8000e08:	b2db      	uxtb	r3, r3
 8000e0a:	400b      	ands	r3, r1
 8000e0c:	b2db      	uxtb	r3, r3
 8000e0e:	4053      	eors	r3, r2
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b09      	ldr	r3, [pc, #36]	; (8000e38 <filtercan+0xe0>)
 8000e14:	70da      	strb	r2, [r3, #3]
		for(int n = 4; n < 7; n++){
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	3301      	adds	r3, #1
 8000e1a:	617b      	str	r3, [r7, #20]
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	2b06      	cmp	r3, #6
 8000e20:	ddda      	ble.n	8000dd8 <filtercan+0x80>

		//TxData[3] = TxData[3] + number;


	}
}
 8000e22:	bf00      	nop
 8000e24:	371c      	adds	r7, #28
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd90      	pop	{r4, r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	f3af 8000 	nop.w
 8000e30:	9999999a 	.word	0x9999999a
 8000e34:	40199999 	.word	0x40199999
 8000e38:	20000058 	.word	0x20000058
 8000e3c:	20000054 	.word	0x20000054
 8000e40:	10624dd3 	.word	0x10624dd3

08000e44 <transferCan>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void transferCan(CAN_HandleTypeDef *hcan) {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
	CAN_HandleTypeDef *targetCan;
	uint32_t fifo;
	if (hcan->Instance == CAN2) {
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	4a17      	ldr	r2, [pc, #92]	; (8000eb0 <transferCan+0x6c>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d104      	bne.n	8000e60 <transferCan+0x1c>
		targetCan = &hcan1;
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <transferCan+0x70>)
 8000e58:	60fb      	str	r3, [r7, #12]
		fifo = CAN_RX_FIFO1;
 8000e5a:	2301      	movs	r3, #1
 8000e5c:	60bb      	str	r3, [r7, #8]
 8000e5e:	e003      	b.n	8000e68 <transferCan+0x24>
	} else {
		targetCan = &hcan2;
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <transferCan+0x74>)
 8000e62:	60fb      	str	r3, [r7, #12]
		fifo = CAN_RX_FIFO0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
	}
	if (HAL_CAN_GetRxMessage(hcan, fifo, &RxHeader, RxData) != HAL_OK) {
 8000e68:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <transferCan+0x78>)
 8000e6a:	4a15      	ldr	r2, [pc, #84]	; (8000ec0 <transferCan+0x7c>)
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	6878      	ldr	r0, [r7, #4]
 8000e70:	f000 ff22 	bl	8001cb8 <HAL_CAN_GetRxMessage>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <transferCan+0x3a>
		/* Reception Error */
		Error_Handler();
 8000e7a:	f000 f9cb 	bl	8001214 <Error_Handler>
	}
	copyData();
 8000e7e:	f7ff ff43 	bl	8000d08 <copyData>
	if (HAL_CAN_GetTxMailboxesFreeLevel(targetCan) != 0) {
 8000e82:	68f8      	ldr	r0, [r7, #12]
 8000e84:	f000 fee4 	bl	8001c50 <HAL_CAN_GetTxMailboxesFreeLevel>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d00b      	beq.n	8000ea6 <transferCan+0x62>
		if (HAL_CAN_AddTxMessage(targetCan, &TxHeader, TxData, &TxMailbox)
 8000e8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ec4 <transferCan+0x80>)
 8000e90:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <transferCan+0x84>)
 8000e92:	490e      	ldr	r1, [pc, #56]	; (8000ecc <transferCan+0x88>)
 8000e94:	68f8      	ldr	r0, [r7, #12]
 8000e96:	f000 fe01 	bl	8001a9c <HAL_CAN_AddTxMessage>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d002      	beq.n	8000ea6 <transferCan+0x62>
				!= HAL_OK) {
			/* Transmission request Error */
			HAL_CAN_ResetError(targetCan);
 8000ea0:	68f8      	ldr	r0, [r7, #12]
 8000ea2:	f001 fa53 	bl	800234c <HAL_CAN_ResetError>
			//Error_Handler();
		}
	}

}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	40006800 	.word	0x40006800
 8000eb4:	200000f0 	.word	0x200000f0
 8000eb8:	200000c8 	.word	0x200000c8
 8000ebc:	20000064 	.word	0x20000064
 8000ec0:	20000084 	.word	0x20000084
 8000ec4:	20000060 	.word	0x20000060
 8000ec8:	20000058 	.word	0x20000058
 8000ecc:	2000006c 	.word	0x2000006c

08000ed0 <HAL_CAN_RxFifo0MsgPendingCallback>:
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)

{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	transferCan(hcan);
 8000ed8:	6878      	ldr	r0, [r7, #4]
 8000eda:	f7ff ffb3 	bl	8000e44 <transferCan>
}
 8000ede:	bf00      	nop
 8000ee0:	3708      	adds	r7, #8
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)

{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
	transferCan(hcan);
 8000eee:	6878      	ldr	r0, [r7, #4]
 8000ef0:	f7ff ffa8 	bl	8000e44 <transferCan>
}
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000efc:	b580      	push	{r7, lr}
 8000efe:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f00:	f000 fb28 	bl	8001554 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f04:	f000 f85e 	bl	8000fc4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f08:	f000 f92c 	bl	8001164 <MX_GPIO_Init>
	MX_CAN1_Init();
 8000f0c:	f000 f8ae 	bl	800106c <MX_CAN1_Init>
	MX_CAN2_Init();
 8000f10:	f000 f8ea 	bl	80010e8 <MX_CAN2_Init>
	/* USER CODE BEGIN 2 */

	sFilterConfig1.FilterBank = 0;
 8000f14:	4b27      	ldr	r3, [pc, #156]	; (8000fb4 <main+0xb8>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	615a      	str	r2, [r3, #20]
	sFilterConfig1.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f1a:	4b26      	ldr	r3, [pc, #152]	; (8000fb4 <main+0xb8>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	619a      	str	r2, [r3, #24]
	sFilterConfig1.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f20:	4b24      	ldr	r3, [pc, #144]	; (8000fb4 <main+0xb8>)
 8000f22:	2201      	movs	r2, #1
 8000f24:	61da      	str	r2, [r3, #28]
	sFilterConfig1.FilterIdHigh = 0x0000;
 8000f26:	4b23      	ldr	r3, [pc, #140]	; (8000fb4 <main+0xb8>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
	sFilterConfig1.FilterIdLow = 0x0000;
 8000f2c:	4b21      	ldr	r3, [pc, #132]	; (8000fb4 <main+0xb8>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	605a      	str	r2, [r3, #4]
	sFilterConfig1.FilterMaskIdHigh = 0x0000;
 8000f32:	4b20      	ldr	r3, [pc, #128]	; (8000fb4 <main+0xb8>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	609a      	str	r2, [r3, #8]
	sFilterConfig1.FilterMaskIdLow = 0x0000;
 8000f38:	4b1e      	ldr	r3, [pc, #120]	; (8000fb4 <main+0xb8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	60da      	str	r2, [r3, #12]
	sFilterConfig1.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f3e:	4b1d      	ldr	r3, [pc, #116]	; (8000fb4 <main+0xb8>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	611a      	str	r2, [r3, #16]
	sFilterConfig1.FilterActivation = ENABLE;
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <main+0xb8>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	621a      	str	r2, [r3, #32]
	sFilterConfig1.SlaveStartFilterBank = 14;
 8000f4a:	4b1a      	ldr	r3, [pc, #104]	; (8000fb4 <main+0xb8>)
 8000f4c:	220e      	movs	r2, #14
 8000f4e:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig1);
 8000f50:	4918      	ldr	r1, [pc, #96]	; (8000fb4 <main+0xb8>)
 8000f52:	4819      	ldr	r0, [pc, #100]	; (8000fb8 <main+0xbc>)
 8000f54:	f000 fc7e 	bl	8001854 <HAL_CAN_ConfigFilter>

	sFilterConfig2.FilterBank = 14;
 8000f58:	4b18      	ldr	r3, [pc, #96]	; (8000fbc <main+0xc0>)
 8000f5a:	220e      	movs	r2, #14
 8000f5c:	615a      	str	r2, [r3, #20]
	sFilterConfig2.FilterMode = CAN_FILTERMODE_IDMASK;
 8000f5e:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <main+0xc0>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	619a      	str	r2, [r3, #24]
	sFilterConfig2.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f64:	4b15      	ldr	r3, [pc, #84]	; (8000fbc <main+0xc0>)
 8000f66:	2201      	movs	r2, #1
 8000f68:	61da      	str	r2, [r3, #28]
	sFilterConfig2.FilterIdHigh = 0x0000;
 8000f6a:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <main+0xc0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
	sFilterConfig2.FilterIdLow = 0x0000;
 8000f70:	4b12      	ldr	r3, [pc, #72]	; (8000fbc <main+0xc0>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	605a      	str	r2, [r3, #4]
	sFilterConfig2.FilterMaskIdHigh = 0x0000;
 8000f76:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <main+0xc0>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
	sFilterConfig2.FilterMaskIdLow = 0x0000;
 8000f7c:	4b0f      	ldr	r3, [pc, #60]	; (8000fbc <main+0xc0>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	60da      	str	r2, [r3, #12]
	sFilterConfig2.FilterFIFOAssignment = CAN_RX_FIFO1;
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <main+0xc0>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	611a      	str	r2, [r3, #16]
	sFilterConfig2.FilterActivation = ENABLE;
 8000f88:	4b0c      	ldr	r3, [pc, #48]	; (8000fbc <main+0xc0>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	621a      	str	r2, [r3, #32]
	sFilterConfig2.SlaveStartFilterBank = 14;
 8000f8e:	4b0b      	ldr	r3, [pc, #44]	; (8000fbc <main+0xc0>)
 8000f90:	220e      	movs	r2, #14
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_CAN_ConfigFilter(&hcan2, &sFilterConfig2);
 8000f94:	4909      	ldr	r1, [pc, #36]	; (8000fbc <main+0xc0>)
 8000f96:	480a      	ldr	r0, [pc, #40]	; (8000fc0 <main+0xc4>)
 8000f98:	f000 fc5c 	bl	8001854 <HAL_CAN_ConfigFilter>

	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f9c:	2102      	movs	r1, #2
 8000f9e:	4806      	ldr	r0, [pc, #24]	; (8000fb8 <main+0xbc>)
 8000fa0:	f000 ff9b 	bl	8001eda <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
 8000fa4:	2110      	movs	r1, #16
 8000fa6:	4806      	ldr	r0, [pc, #24]	; (8000fc0 <main+0xc4>)
 8000fa8:	f000 ff97 	bl	8001eda <HAL_CAN_ActivateNotification>

	//HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO1_MSG_PENDING);
	//canloop(&hcan1, &hcan2);
	while (1) {
		HAL_Delay(100);
 8000fac:	2064      	movs	r0, #100	; 0x64
 8000fae:	f000 fb33 	bl	8001618 <HAL_Delay>
 8000fb2:	e7fb      	b.n	8000fac <main+0xb0>
 8000fb4:	2000002c 	.word	0x2000002c
 8000fb8:	200000f0 	.word	0x200000f0
 8000fbc:	200000a0 	.word	0x200000a0
 8000fc0:	200000c8 	.word	0x200000c8

08000fc4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b094      	sub	sp, #80	; 0x50
 8000fc8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000fca:	f107 0318 	add.w	r3, r7, #24
 8000fce:	2238      	movs	r2, #56	; 0x38
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f002 f936 	bl	8003244 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fee:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV5;
 8000ff0:	2304      	movs	r3, #4
 8000ff2:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.Prediv1Source = RCC_PREDIV1_SOURCE_PLL2;
 8000ff8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ffc:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffe:	2302      	movs	r3, #2
 8001000:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001002:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001006:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001008:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800100c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL2.PLL2State = RCC_PLL2_ON;
 800100e:	2302      	movs	r3, #2
 8001010:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL2.PLL2MUL = RCC_PLL2_MUL8;
 8001012:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001016:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL2.HSEPrediv2Value = RCC_HSE_PREDIV2_DIV5;
 8001018:	2340      	movs	r3, #64	; 0x40
 800101a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800101c:	f107 0318 	add.w	r3, r7, #24
 8001020:	4618      	mov	r0, r3
 8001022:	f001 fc35 	bl	8002890 <HAL_RCC_OscConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0x6c>
		Error_Handler();
 800102c:	f000 f8f2 	bl	8001214 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001030:	230f      	movs	r3, #15
 8001032:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001034:	2302      	movs	r3, #2
 8001036:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001038:	2300      	movs	r3, #0
 800103a:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800103c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001040:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2102      	movs	r1, #2
 800104a:	4618      	mov	r0, r3
 800104c:	f001 ff36 	bl	8002ebc <HAL_RCC_ClockConfig>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0x96>
		Error_Handler();
 8001056:	f000 f8dd 	bl	8001214 <Error_Handler>
	}
	/** Configure the Systick interrupt time
	 */
	__HAL_RCC_PLLI2S_ENABLE();
 800105a:	4b03      	ldr	r3, [pc, #12]	; (8001068 <SystemClock_Config+0xa4>)
 800105c:	2201      	movs	r2, #1
 800105e:	601a      	str	r2, [r3, #0]
}
 8001060:	bf00      	nop
 8001062:	3750      	adds	r7, #80	; 0x50
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	42420070 	.word	0x42420070

0800106c <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
// Konfig taken from: https://www.elektronik-keller.de/index.php/projekte/stm32/29-stm32cubemx-stm32-can
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */
	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8001070:	4b1b      	ldr	r3, [pc, #108]	; (80010e0 <MX_CAN1_Init+0x74>)
 8001072:	4a1c      	ldr	r2, [pc, #112]	; (80010e4 <MX_CAN1_Init+0x78>)
 8001074:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 6;
 8001076:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <MX_CAN1_Init+0x74>)
 8001078:	2206      	movs	r2, #6
 800107a:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 800107c:	4b18      	ldr	r3, [pc, #96]	; (80010e0 <MX_CAN1_Init+0x74>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001082:	4b17      	ldr	r3, [pc, #92]	; (80010e0 <MX_CAN1_Init+0x74>)
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_8TQ;
 8001088:	4b15      	ldr	r3, [pc, #84]	; (80010e0 <MX_CAN1_Init+0x74>)
 800108a:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800108e:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <MX_CAN1_Init+0x74>)
 8001092:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001096:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <MX_CAN1_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <MX_CAN1_Init+0x74>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 80010a4:	4b0e      	ldr	r3, [pc, #56]	; (80010e0 <MX_CAN1_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <MX_CAN1_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 80010b0:	4b0b      	ldr	r3, [pc, #44]	; (80010e0 <MX_CAN1_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 80010b6:	4b0a      	ldr	r3, [pc, #40]	; (80010e0 <MX_CAN1_Init+0x74>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 80010bc:	4808      	ldr	r0, [pc, #32]	; (80010e0 <MX_CAN1_Init+0x74>)
 80010be:	f000 facd 	bl	800165c <HAL_CAN_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_CAN1_Init+0x60>
		Error_Handler();
 80010c8:	f000 f8a4 	bl	8001214 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */
	if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80010cc:	4804      	ldr	r0, [pc, #16]	; (80010e0 <MX_CAN1_Init+0x74>)
 80010ce:	f000 fca1 	bl	8001a14 <HAL_CAN_Start>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_CAN1_Init+0x70>
		/* Start Error */
		Error_Handler();
 80010d8:	f000 f89c 	bl	8001214 <Error_Handler>
	}
	/* USER CODE END CAN1_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200000f0 	.word	0x200000f0
 80010e4:	40006400 	.word	0x40006400

080010e8 <MX_CAN2_Init>:
/**
 * @brief CAN2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN2_Init(void) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	; (800115c <MX_CAN2_Init+0x74>)
 80010ee:	4a1c      	ldr	r2, [pc, #112]	; (8001160 <MX_CAN2_Init+0x78>)
 80010f0:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 6;
 80010f2:	4b1a      	ldr	r3, [pc, #104]	; (800115c <MX_CAN2_Init+0x74>)
 80010f4:	2206      	movs	r2, #6
 80010f6:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 80010f8:	4b18      	ldr	r3, [pc, #96]	; (800115c <MX_CAN2_Init+0x74>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80010fe:	4b17      	ldr	r3, [pc, #92]	; (800115c <MX_CAN2_Init+0x74>)
 8001100:	2200      	movs	r2, #0
 8001102:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_8TQ;
 8001104:	4b15      	ldr	r3, [pc, #84]	; (800115c <MX_CAN2_Init+0x74>)
 8001106:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 800110a:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 800110c:	4b13      	ldr	r3, [pc, #76]	; (800115c <MX_CAN2_Init+0x74>)
 800110e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001112:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <MX_CAN2_Init+0x74>)
 8001116:	2200      	movs	r2, #0
 8001118:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 800111a:	4b10      	ldr	r3, [pc, #64]	; (800115c <MX_CAN2_Init+0x74>)
 800111c:	2200      	movs	r2, #0
 800111e:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 8001120:	4b0e      	ldr	r3, [pc, #56]	; (800115c <MX_CAN2_Init+0x74>)
 8001122:	2200      	movs	r2, #0
 8001124:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = DISABLE;
 8001126:	4b0d      	ldr	r3, [pc, #52]	; (800115c <MX_CAN2_Init+0x74>)
 8001128:	2200      	movs	r2, #0
 800112a:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 800112c:	4b0b      	ldr	r3, [pc, #44]	; (800115c <MX_CAN2_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <MX_CAN2_Init+0x74>)
 8001134:	2200      	movs	r2, #0
 8001136:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK) {
 8001138:	4808      	ldr	r0, [pc, #32]	; (800115c <MX_CAN2_Init+0x74>)
 800113a:	f000 fa8f 	bl	800165c <HAL_CAN_Init>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_CAN2_Init+0x60>
		Error_Handler();
 8001144:	f000 f866 	bl	8001214 <Error_Handler>
	}
	/* USER CODE BEGIN CAN2_Init 2 */
	if (HAL_CAN_Start(&hcan2) != HAL_OK) {
 8001148:	4804      	ldr	r0, [pc, #16]	; (800115c <MX_CAN2_Init+0x74>)
 800114a:	f000 fc63 	bl	8001a14 <HAL_CAN_Start>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_CAN2_Init+0x70>
		/* Start Error */
		Error_Handler();
 8001154:	f000 f85e 	bl	8001214 <Error_Handler>
	}
	/* USER CODE END CAN2_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	bd80      	pop	{r7, pc}
 800115c:	200000c8 	.word	0x200000c8
 8001160:	40006800 	.word	0x40006800

08001164 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b088      	sub	sp, #32
 8001168:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800116a:	f107 0310 	add.w	r3, r7, #16
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001178:	4b24      	ldr	r3, [pc, #144]	; (800120c <MX_GPIO_Init+0xa8>)
 800117a:	699b      	ldr	r3, [r3, #24]
 800117c:	4a23      	ldr	r2, [pc, #140]	; (800120c <MX_GPIO_Init+0xa8>)
 800117e:	f043 0320 	orr.w	r3, r3, #32
 8001182:	6193      	str	r3, [r2, #24]
 8001184:	4b21      	ldr	r3, [pc, #132]	; (800120c <MX_GPIO_Init+0xa8>)
 8001186:	699b      	ldr	r3, [r3, #24]
 8001188:	f003 0320 	and.w	r3, r3, #32
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001190:	4b1e      	ldr	r3, [pc, #120]	; (800120c <MX_GPIO_Init+0xa8>)
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	4a1d      	ldr	r2, [pc, #116]	; (800120c <MX_GPIO_Init+0xa8>)
 8001196:	f043 0304 	orr.w	r3, r3, #4
 800119a:	6193      	str	r3, [r2, #24]
 800119c:	4b1b      	ldr	r3, [pc, #108]	; (800120c <MX_GPIO_Init+0xa8>)
 800119e:	699b      	ldr	r3, [r3, #24]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	60bb      	str	r3, [r7, #8]
 80011a6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80011a8:	4b18      	ldr	r3, [pc, #96]	; (800120c <MX_GPIO_Init+0xa8>)
 80011aa:	699b      	ldr	r3, [r3, #24]
 80011ac:	4a17      	ldr	r2, [pc, #92]	; (800120c <MX_GPIO_Init+0xa8>)
 80011ae:	f043 0310 	orr.w	r3, r3, #16
 80011b2:	6193      	str	r3, [r2, #24]
 80011b4:	4b15      	ldr	r3, [pc, #84]	; (800120c <MX_GPIO_Init+0xa8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	f003 0310 	and.w	r3, r3, #16
 80011bc:	607b      	str	r3, [r7, #4]
 80011be:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80011c0:	4b12      	ldr	r3, [pc, #72]	; (800120c <MX_GPIO_Init+0xa8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	4a11      	ldr	r2, [pc, #68]	; (800120c <MX_GPIO_Init+0xa8>)
 80011c6:	f043 0308 	orr.w	r3, r3, #8
 80011ca:	6193      	str	r3, [r2, #24]
 80011cc:	4b0f      	ldr	r3, [pc, #60]	; (800120c <MX_GPIO_Init+0xa8>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f003 0308 	and.w	r3, r3, #8
 80011d4:	603b      	str	r3, [r7, #0]
 80011d6:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80011d8:	2201      	movs	r2, #1
 80011da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011de:	480c      	ldr	r0, [pc, #48]	; (8001210 <MX_GPIO_Init+0xac>)
 80011e0:	f001 fb3e 	bl	8002860 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC10 */
	GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011e8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ea:	2301      	movs	r3, #1
 80011ec:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ee:	2300      	movs	r3, #0
 80011f0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f2:	2302      	movs	r3, #2
 80011f4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f6:	f107 0310 	add.w	r3, r7, #16
 80011fa:	4619      	mov	r1, r3
 80011fc:	4804      	ldr	r0, [pc, #16]	; (8001210 <MX_GPIO_Init+0xac>)
 80011fe:	f001 f9d5 	bl	80025ac <HAL_GPIO_Init>

}
 8001202:	bf00      	nop
 8001204:	3720      	adds	r7, #32
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40021000 	.word	0x40021000
 8001210:	40011000 	.word	0x40011000

08001214 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
	//HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_10);
	//HAL_Delay(300);
	/* USER CODE BEGIN 3 */
	//}
	/* USER CODE END Error_Handler_Debug */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <HAL_MspInit+0x60>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	4a15      	ldr	r2, [pc, #84]	; (8001280 <HAL_MspInit+0x60>)
 800122c:	f043 0301 	orr.w	r3, r3, #1
 8001230:	6193      	str	r3, [r2, #24]
 8001232:	4b13      	ldr	r3, [pc, #76]	; (8001280 <HAL_MspInit+0x60>)
 8001234:	699b      	ldr	r3, [r3, #24]
 8001236:	f003 0301 	and.w	r3, r3, #1
 800123a:	60bb      	str	r3, [r7, #8]
 800123c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800123e:	4b10      	ldr	r3, [pc, #64]	; (8001280 <HAL_MspInit+0x60>)
 8001240:	69db      	ldr	r3, [r3, #28]
 8001242:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <HAL_MspInit+0x60>)
 8001244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001248:	61d3      	str	r3, [r2, #28]
 800124a:	4b0d      	ldr	r3, [pc, #52]	; (8001280 <HAL_MspInit+0x60>)
 800124c:	69db      	ldr	r3, [r3, #28]
 800124e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001252:	607b      	str	r3, [r7, #4]
 8001254:	687b      	ldr	r3, [r7, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001256:	2007      	movs	r0, #7
 8001258:	f001 f966 	bl	8002528 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <HAL_MspInit+0x64>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	60fb      	str	r3, [r7, #12]
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	4a04      	ldr	r2, [pc, #16]	; (8001284 <HAL_MspInit+0x64>)
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	40021000 	.word	0x40021000
 8001284:	40010000 	.word	0x40010000

08001288 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	; 0x30
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001290:	f107 031c 	add.w	r3, r7, #28
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
 800129a:	609a      	str	r2, [r3, #8]
 800129c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a55      	ldr	r2, [pc, #340]	; (80013f8 <HAL_CAN_MspInit+0x170>)
 80012a4:	4293      	cmp	r3, r2
 80012a6:	d143      	bne.n	8001330 <HAL_CAN_MspInit+0xa8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80012a8:	4b54      	ldr	r3, [pc, #336]	; (80013fc <HAL_CAN_MspInit+0x174>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	4a53      	ldr	r2, [pc, #332]	; (80013fc <HAL_CAN_MspInit+0x174>)
 80012b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80012b2:	4b52      	ldr	r3, [pc, #328]	; (80013fc <HAL_CAN_MspInit+0x174>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d10b      	bne.n	80012d2 <HAL_CAN_MspInit+0x4a>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80012ba:	4b51      	ldr	r3, [pc, #324]	; (8001400 <HAL_CAN_MspInit+0x178>)
 80012bc:	69db      	ldr	r3, [r3, #28]
 80012be:	4a50      	ldr	r2, [pc, #320]	; (8001400 <HAL_CAN_MspInit+0x178>)
 80012c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012c4:	61d3      	str	r3, [r2, #28]
 80012c6:	4b4e      	ldr	r3, [pc, #312]	; (8001400 <HAL_CAN_MspInit+0x178>)
 80012c8:	69db      	ldr	r3, [r3, #28]
 80012ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012ce:	61bb      	str	r3, [r7, #24]
 80012d0:	69bb      	ldr	r3, [r7, #24]
    }
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b4b      	ldr	r3, [pc, #300]	; (8001400 <HAL_CAN_MspInit+0x178>)
 80012d4:	699b      	ldr	r3, [r3, #24]
 80012d6:	4a4a      	ldr	r2, [pc, #296]	; (8001400 <HAL_CAN_MspInit+0x178>)
 80012d8:	f043 0304 	orr.w	r3, r3, #4
 80012dc:	6193      	str	r3, [r2, #24]
 80012de:	4b48      	ldr	r3, [pc, #288]	; (8001400 <HAL_CAN_MspInit+0x178>)
 80012e0:	699b      	ldr	r3, [r3, #24]
 80012e2:	f003 0304 	and.w	r3, r3, #4
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration    
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f8:	f107 031c 	add.w	r3, r7, #28
 80012fc:	4619      	mov	r1, r3
 80012fe:	4841      	ldr	r0, [pc, #260]	; (8001404 <HAL_CAN_MspInit+0x17c>)
 8001300:	f001 f954 	bl	80025ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001304:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001308:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130a:	2302      	movs	r3, #2
 800130c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800130e:	2303      	movs	r3, #3
 8001310:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 031c 	add.w	r3, r7, #28
 8001316:	4619      	mov	r1, r3
 8001318:	483a      	ldr	r0, [pc, #232]	; (8001404 <HAL_CAN_MspInit+0x17c>)
 800131a:	f001 f947 	bl	80025ac <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	2014      	movs	r0, #20
 8001324:	f001 f90b 	bl	800253e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001328:	2014      	movs	r0, #20
 800132a:	f001 f924 	bl	8002576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800132e:	e05f      	b.n	80013f0 <HAL_CAN_MspInit+0x168>
  else if(hcan->Instance==CAN2)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a34      	ldr	r2, [pc, #208]	; (8001408 <HAL_CAN_MspInit+0x180>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d15a      	bne.n	80013f0 <HAL_CAN_MspInit+0x168>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800133a:	4b31      	ldr	r3, [pc, #196]	; (8001400 <HAL_CAN_MspInit+0x178>)
 800133c:	69db      	ldr	r3, [r3, #28]
 800133e:	4a30      	ldr	r2, [pc, #192]	; (8001400 <HAL_CAN_MspInit+0x178>)
 8001340:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001344:	61d3      	str	r3, [r2, #28]
 8001346:	4b2e      	ldr	r3, [pc, #184]	; (8001400 <HAL_CAN_MspInit+0x178>)
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001352:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <HAL_CAN_MspInit+0x174>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	3301      	adds	r3, #1
 8001358:	4a28      	ldr	r2, [pc, #160]	; (80013fc <HAL_CAN_MspInit+0x174>)
 800135a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800135c:	4b27      	ldr	r3, [pc, #156]	; (80013fc <HAL_CAN_MspInit+0x174>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d10b      	bne.n	800137c <HAL_CAN_MspInit+0xf4>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001364:	4b26      	ldr	r3, [pc, #152]	; (8001400 <HAL_CAN_MspInit+0x178>)
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	4a25      	ldr	r2, [pc, #148]	; (8001400 <HAL_CAN_MspInit+0x178>)
 800136a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800136e:	61d3      	str	r3, [r2, #28]
 8001370:	4b23      	ldr	r3, [pc, #140]	; (8001400 <HAL_CAN_MspInit+0x178>)
 8001372:	69db      	ldr	r3, [r3, #28]
 8001374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800137c:	4b20      	ldr	r3, [pc, #128]	; (8001400 <HAL_CAN_MspInit+0x178>)
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	4a1f      	ldr	r2, [pc, #124]	; (8001400 <HAL_CAN_MspInit+0x178>)
 8001382:	f043 0308 	orr.w	r3, r3, #8
 8001386:	6193      	str	r3, [r2, #24]
 8001388:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <HAL_CAN_MspInit+0x178>)
 800138a:	699b      	ldr	r3, [r3, #24]
 800138c:	f003 0308 	and.w	r3, r3, #8
 8001390:	60bb      	str	r3, [r7, #8]
 8001392:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001394:	2320      	movs	r3, #32
 8001396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001398:	2300      	movs	r3, #0
 800139a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a0:	f107 031c 	add.w	r3, r7, #28
 80013a4:	4619      	mov	r1, r3
 80013a6:	4819      	ldr	r0, [pc, #100]	; (800140c <HAL_CAN_MspInit+0x184>)
 80013a8:	f001 f900 	bl	80025ac <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013ac:	2340      	movs	r3, #64	; 0x40
 80013ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013b0:	2302      	movs	r3, #2
 80013b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013b4:	2303      	movs	r3, #3
 80013b6:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	4813      	ldr	r0, [pc, #76]	; (800140c <HAL_CAN_MspInit+0x184>)
 80013c0:	f001 f8f4 	bl	80025ac <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_CAN2_ENABLE();
 80013c4:	4b12      	ldr	r3, [pc, #72]	; (8001410 <HAL_CAN_MspInit+0x188>)
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013cc:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013da:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <HAL_CAN_MspInit+0x188>)
 80013dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013de:	6053      	str	r3, [r2, #4]
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 0, 0);
 80013e0:	2200      	movs	r2, #0
 80013e2:	2100      	movs	r1, #0
 80013e4:	2041      	movs	r0, #65	; 0x41
 80013e6:	f001 f8aa 	bl	800253e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80013ea:	2041      	movs	r0, #65	; 0x41
 80013ec:	f001 f8c3 	bl	8002576 <HAL_NVIC_EnableIRQ>
}
 80013f0:	bf00      	nop
 80013f2:	3730      	adds	r7, #48	; 0x30
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40006400 	.word	0x40006400
 80013fc:	20000028 	.word	0x20000028
 8001400:	40021000 	.word	0x40021000
 8001404:	40010800 	.word	0x40010800
 8001408:	40006800 	.word	0x40006800
 800140c:	40010c00 	.word	0x40010c00
 8001410:	40010000 	.word	0x40010000

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	bc80      	pop	{r7}
 800141e:	4770      	bx	lr

08001420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001424:	e7fe      	b.n	8001424 <HardFault_Handler+0x4>

08001426 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001426:	b480      	push	{r7}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142a:	e7fe      	b.n	800142a <MemManage_Handler+0x4>

0800142c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <BusFault_Handler+0x4>

08001432 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <UsageFault_Handler+0x4>

08001438 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	46bd      	mov	sp, r7
 800144c:	bc80      	pop	{r7}
 800144e:	4770      	bx	lr

08001450 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr

0800145c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001460:	f000 f8be 	bl	80015e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001464:	bf00      	nop
 8001466:	bd80      	pop	{r7, pc}

08001468 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800146c:	4802      	ldr	r0, [pc, #8]	; (8001478 <CAN1_RX0_IRQHandler+0x10>)
 800146e:	f000 fd59 	bl	8001f24 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	200000f0 	.word	0x200000f0

0800147c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001480:	4802      	ldr	r0, [pc, #8]	; (800148c <CAN2_RX1_IRQHandler+0x10>)
 8001482:	f000 fd4f 	bl	8001f24 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	200000c8 	.word	0x200000c8

08001490 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001494:	4b1a      	ldr	r3, [pc, #104]	; (8001500 <SystemInit+0x70>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a19      	ldr	r2, [pc, #100]	; (8001500 <SystemInit+0x70>)
 800149a:	f043 0301 	orr.w	r3, r3, #1
 800149e:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
#else
  RCC->CFGR &= 0xF0FF0000U;
 80014a0:	4b17      	ldr	r3, [pc, #92]	; (8001500 <SystemInit+0x70>)
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	4916      	ldr	r1, [pc, #88]	; (8001500 <SystemInit+0x70>)
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <SystemInit+0x74>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80014ac:	4b14      	ldr	r3, [pc, #80]	; (8001500 <SystemInit+0x70>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	4a13      	ldr	r2, [pc, #76]	; (8001500 <SystemInit+0x70>)
 80014b2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80014b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ba:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80014bc:	4b10      	ldr	r3, [pc, #64]	; (8001500 <SystemInit+0x70>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0f      	ldr	r2, [pc, #60]	; (8001500 <SystemInit+0x70>)
 80014c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014c6:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80014c8:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <SystemInit+0x70>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	4a0c      	ldr	r2, [pc, #48]	; (8001500 <SystemInit+0x70>)
 80014ce:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80014d2:	6053      	str	r3, [r2, #4]

#if defined(STM32F105xC) || defined(STM32F107xC)
  /* Reset PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEBFFFFFFU;
 80014d4:	4b0a      	ldr	r3, [pc, #40]	; (8001500 <SystemInit+0x70>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4a09      	ldr	r2, [pc, #36]	; (8001500 <SystemInit+0x70>)
 80014da:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 80014de:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x00FF0000U;
 80014e0:	4b07      	ldr	r3, [pc, #28]	; (8001500 <SystemInit+0x70>)
 80014e2:	f44f 027f 	mov.w	r2, #16711680	; 0xff0000
 80014e6:	609a      	str	r2, [r3, #8]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <SystemInit+0x70>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	62da      	str	r2, [r3, #44]	; 0x2c
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80014ee:	4b06      	ldr	r3, [pc, #24]	; (8001508 <SystemInit+0x78>)
 80014f0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80014f4:	609a      	str	r2, [r3, #8]
#endif 
}
 80014f6:	bf00      	nop
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40021000 	.word	0x40021000
 8001504:	f0ff0000 	.word	0xf0ff0000
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800150c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800150e:	e003      	b.n	8001518 <LoopCopyDataInit>

08001510 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001510:	4b0a      	ldr	r3, [pc, #40]	; (800153c <LoopFillZerobss+0x10>)
  ldr r3, [r3, r1]
 8001512:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001514:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001516:	3104      	adds	r1, #4

08001518 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001518:	4809      	ldr	r0, [pc, #36]	; (8001540 <LoopFillZerobss+0x14>)
  ldr r3, =_edata
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <LoopFillZerobss+0x18>)
  adds r2, r0, r1
 800151c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800151e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001520:	d3f6      	bcc.n	8001510 <CopyDataInit>
  ldr r2, =_sbss
 8001522:	4a09      	ldr	r2, [pc, #36]	; (8001548 <LoopFillZerobss+0x1c>)
  b LoopFillZerobss
 8001524:	e002      	b.n	800152c <LoopFillZerobss>

08001526 <FillZerobss>:

/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001528:	f842 3b04 	str.w	r3, [r2], #4

0800152c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <LoopFillZerobss+0x20>)
  cmp r2, r3
 800152e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001530:	d3f9      	bcc.n	8001526 <FillZerobss>
/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001532:	f7ff ffad 	bl	8001490 <SystemInit>
/* Call the application's entry point.*/
  bl main
 8001536:	f7ff fce1 	bl	8000efc <main>
  bx lr
 800153a:	4770      	bx	lr
  ldr r3, =_sidata
 800153c:	080032ac 	.word	0x080032ac
  ldr r0, =_sdata
 8001540:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001544:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001548:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800154c:	2000011c 	.word	0x2000011c

08001550 <ADC1_2_IRQHandler>:
 * @retval None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001550:	e7fe      	b.n	8001550 <ADC1_2_IRQHandler>
	...

08001554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001558:	4b08      	ldr	r3, [pc, #32]	; (800157c <HAL_Init+0x28>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a07      	ldr	r2, [pc, #28]	; (800157c <HAL_Init+0x28>)
 800155e:	f043 0310 	orr.w	r3, r3, #16
 8001562:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001564:	2003      	movs	r0, #3
 8001566:	f000 ffdf 	bl	8002528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800156a:	2000      	movs	r0, #0
 800156c:	f000 f808 	bl	8001580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001570:	f7ff fe56 	bl	8001220 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40022000 	.word	0x40022000

08001580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_InitTick+0x54>)
 800158a:	681a      	ldr	r2, [r3, #0]
 800158c:	4b12      	ldr	r3, [pc, #72]	; (80015d8 <HAL_InitTick+0x58>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001596:	fbb3 f3f1 	udiv	r3, r3, r1
 800159a:	fbb2 f3f3 	udiv	r3, r2, r3
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fff7 	bl	8002592 <HAL_SYSTICK_Config>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e00e      	b.n	80015cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d80a      	bhi.n	80015ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b4:	2200      	movs	r2, #0
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015bc:	f000 ffbf 	bl	800253e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015c0:	4a06      	ldr	r2, [pc, #24]	; (80015dc <HAL_InitTick+0x5c>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015c6:	2300      	movs	r3, #0
 80015c8:	e000      	b.n	80015cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3708      	adds	r7, #8
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000000 	.word	0x20000000
 80015d8:	20000008 	.word	0x20000008
 80015dc:	20000004 	.word	0x20000004

080015e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <HAL_IncTick+0x1c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b05      	ldr	r3, [pc, #20]	; (8001600 <HAL_IncTick+0x20>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a03      	ldr	r2, [pc, #12]	; (8001600 <HAL_IncTick+0x20>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr
 80015fc:	20000008 	.word	0x20000008
 8001600:	20000118 	.word	0x20000118

08001604 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return uwTick;
 8001608:	4b02      	ldr	r3, [pc, #8]	; (8001614 <HAL_GetTick+0x10>)
 800160a:	681b      	ldr	r3, [r3, #0]
}
 800160c:	4618      	mov	r0, r3
 800160e:	46bd      	mov	sp, r7
 8001610:	bc80      	pop	{r7}
 8001612:	4770      	bx	lr
 8001614:	20000118 	.word	0x20000118

08001618 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b084      	sub	sp, #16
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001620:	f7ff fff0 	bl	8001604 <HAL_GetTick>
 8001624:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001630:	d005      	beq.n	800163e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001632:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_Delay+0x40>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	461a      	mov	r2, r3
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	4413      	add	r3, r2
 800163c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800163e:	bf00      	nop
 8001640:	f7ff ffe0 	bl	8001604 <HAL_GetTick>
 8001644:	4602      	mov	r2, r0
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	1ad3      	subs	r3, r2, r3
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	429a      	cmp	r2, r3
 800164e:	d8f7      	bhi.n	8001640 <HAL_Delay+0x28>
  {
  }
}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000008 	.word	0x20000008

0800165c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d101      	bne.n	800166e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e0ed      	b.n	800184a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001674:	b2db      	uxtb	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d102      	bne.n	8001680 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800167a:	6878      	ldr	r0, [r7, #4]
 800167c:	f7ff fe04 	bl	8001288 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0202 	bic.w	r2, r2, #2
 800168e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001690:	f7ff ffb8 	bl	8001604 <HAL_GetTick>
 8001694:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001696:	e012      	b.n	80016be <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001698:	f7ff ffb4 	bl	8001604 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	2b0a      	cmp	r3, #10
 80016a4:	d90b      	bls.n	80016be <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2205      	movs	r2, #5
 80016b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80016ba:	2301      	movs	r3, #1
 80016bc:	e0c5      	b.n	800184a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f003 0302 	and.w	r3, r3, #2
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d1e5      	bne.n	8001698 <HAL_CAN_Init+0x3c>
    }
  }

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f042 0201 	orr.w	r2, r2, #1
 80016da:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80016dc:	f7ff ff92 	bl	8001604 <HAL_GetTick>
 80016e0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80016e2:	e012      	b.n	800170a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80016e4:	f7ff ff8e 	bl	8001604 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b0a      	cmp	r3, #10
 80016f0:	d90b      	bls.n	800170a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2205      	movs	r2, #5
 8001702:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e09f      	b.n	800184a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b00      	cmp	r3, #0
 8001716:	d0e5      	beq.n	80016e4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	7e1b      	ldrb	r3, [r3, #24]
 800171c:	2b01      	cmp	r3, #1
 800171e:	d108      	bne.n	8001732 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800172e:	601a      	str	r2, [r3, #0]
 8001730:	e007      	b.n	8001742 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001740:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	7e5b      	ldrb	r3, [r3, #25]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d108      	bne.n	800175c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	e007      	b.n	800176c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800176a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	7e9b      	ldrb	r3, [r3, #26]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d108      	bne.n	8001786 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f042 0220 	orr.w	r2, r2, #32
 8001782:	601a      	str	r2, [r3, #0]
 8001784:	e007      	b.n	8001796 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0220 	bic.w	r2, r2, #32
 8001794:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7edb      	ldrb	r3, [r3, #27]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d108      	bne.n	80017b0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	681a      	ldr	r2, [r3, #0]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f022 0210 	bic.w	r2, r2, #16
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	e007      	b.n	80017c0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f042 0210 	orr.w	r2, r2, #16
 80017be:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	7f1b      	ldrb	r3, [r3, #28]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d108      	bne.n	80017da <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f042 0208 	orr.w	r2, r2, #8
 80017d6:	601a      	str	r2, [r3, #0]
 80017d8:	e007      	b.n	80017ea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f022 0208 	bic.w	r2, r2, #8
 80017e8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	7f5b      	ldrb	r3, [r3, #29]
 80017ee:	2b01      	cmp	r3, #1
 80017f0:	d108      	bne.n	8001804 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	f042 0204 	orr.w	r2, r2, #4
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	e007      	b.n	8001814 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f022 0204 	bic.w	r2, r2, #4
 8001812:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	431a      	orrs	r2, r3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	695b      	ldr	r3, [r3, #20]
 8001828:	ea42 0103 	orr.w	r1, r2, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	1e5a      	subs	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001848:	2300      	movs	r3, #0
}
 800184a:	4618      	mov	r0, r3
 800184c:	3710      	adds	r7, #16
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}
	...

08001854 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001854:	b480      	push	{r7}
 8001856:	b087      	sub	sp, #28
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f893 3020 	ldrb.w	r3, [r3, #32]
 800186a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800186c:	7cfb      	ldrb	r3, [r7, #19]
 800186e:	2b01      	cmp	r3, #1
 8001870:	d003      	beq.n	800187a <HAL_CAN_ConfigFilter+0x26>
 8001872:	7cfb      	ldrb	r3, [r7, #19]
 8001874:	2b02      	cmp	r3, #2
 8001876:	f040 80be 	bne.w	80019f6 <HAL_CAN_ConfigFilter+0x1a2>
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if   defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800187a:	4b65      	ldr	r3, [pc, #404]	; (8001a10 <HAL_CAN_ConfigFilter+0x1bc>)
 800187c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001884:	f043 0201 	orr.w	r2, r3, #1
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if   defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800188e:	697b      	ldr	r3, [r7, #20]
 8001890:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001894:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a8:	021b      	lsls	r3, r3, #8
 80018aa:	431a      	orrs	r2, r3
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	695b      	ldr	r3, [r3, #20]
 80018b6:	f003 031f 	and.w	r3, r3, #31
 80018ba:	2201      	movs	r2, #1
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	401a      	ands	r2, r3
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	69db      	ldr	r3, [r3, #28]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d123      	bne.n	8001924 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	401a      	ands	r2, r3
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80018fe:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	3248      	adds	r2, #72	; 0x48
 8001904:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001918:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800191a:	6979      	ldr	r1, [r7, #20]
 800191c:	3348      	adds	r3, #72	; 0x48
 800191e:	00db      	lsls	r3, r3, #3
 8001920:	440b      	add	r3, r1
 8001922:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	69db      	ldr	r3, [r3, #28]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d122      	bne.n	8001972 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	431a      	orrs	r2, r3
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001942:	683b      	ldr	r3, [r7, #0]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001948:	683a      	ldr	r2, [r7, #0]
 800194a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800194c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	3248      	adds	r2, #72	; 0x48
 8001952:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001966:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001968:	6979      	ldr	r1, [r7, #20]
 800196a:	3348      	adds	r3, #72	; 0x48
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	440b      	add	r3, r1
 8001970:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	699b      	ldr	r3, [r3, #24]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	43db      	mvns	r3, r3
 8001984:	401a      	ands	r2, r3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800198c:	e007      	b.n	800199e <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	431a      	orrs	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	691b      	ldr	r3, [r3, #16]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d109      	bne.n	80019ba <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	401a      	ands	r2, r3
 80019b2:	697b      	ldr	r3, [r7, #20]
 80019b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80019b8:	e007      	b.n	80019ca <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80019ba:	697b      	ldr	r3, [r7, #20]
 80019bc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	431a      	orrs	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	6a1b      	ldr	r3, [r3, #32]
 80019ce:	2b01      	cmp	r3, #1
 80019d0:	d107      	bne.n	80019e2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	431a      	orrs	r2, r3
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80019e2:	697b      	ldr	r3, [r7, #20]
 80019e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80019e8:	f023 0201 	bic.w	r2, r3, #1
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 80019f2:	2300      	movs	r3, #0
 80019f4:	e006      	b.n	8001a04 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
  }
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40006400 	.word	0x40006400

08001a14 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b01      	cmp	r3, #1
 8001a26:	d12e      	bne.n	8001a86 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f022 0201 	bic.w	r2, r2, #1
 8001a3e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001a40:	f7ff fde0 	bl	8001604 <HAL_GetTick>
 8001a44:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a46:	e012      	b.n	8001a6e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001a48:	f7ff fddc 	bl	8001604 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b0a      	cmp	r3, #10
 8001a54:	d90b      	bls.n	8001a6e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a5a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2205      	movs	r2, #5
 8001a66:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e012      	b.n	8001a94 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1e5      	bne.n	8001a48 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e006      	b.n	8001a94 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
  }
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3710      	adds	r7, #16
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}

08001a9c <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b089      	sub	sp, #36	; 0x24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
 8001aa8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ab0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001aba:	7ffb      	ldrb	r3, [r7, #31]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d003      	beq.n	8001ac8 <HAL_CAN_AddTxMessage+0x2c>
 8001ac0:	7ffb      	ldrb	r3, [r7, #31]
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	f040 80b8 	bne.w	8001c38 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d10a      	bne.n	8001ae8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d105      	bne.n	8001ae8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	f000 80a0 	beq.w	8001c28 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001ae8:	69bb      	ldr	r3, [r7, #24]
 8001aea:	0e1b      	lsrs	r3, r3, #24
 8001aec:	f003 0303 	and.w	r3, r3, #3
 8001af0:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d907      	bls.n	8001b08 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001afc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e09e      	b.n	8001c46 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001b08:	2201      	movs	r2, #1
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	409a      	lsls	r2, r3
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001b12:	68bb      	ldr	r3, [r7, #8]
 8001b14:	689b      	ldr	r3, [r3, #8]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d10d      	bne.n	8001b36 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001b24:	68f9      	ldr	r1, [r7, #12]
 8001b26:	6809      	ldr	r1, [r1, #0]
 8001b28:	431a      	orrs	r2, r3
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	3318      	adds	r3, #24
 8001b2e:	011b      	lsls	r3, r3, #4
 8001b30:	440b      	add	r3, r1
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	e00f      	b.n	8001b56 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b40:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b46:	68f9      	ldr	r1, [r7, #12]
 8001b48:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001b4a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	3318      	adds	r3, #24
 8001b50:	011b      	lsls	r3, r3, #4
 8001b52:	440b      	add	r3, r1
 8001b54:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6819      	ldr	r1, [r3, #0]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
 8001b5c:	691a      	ldr	r2, [r3, #16]
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	3318      	adds	r3, #24
 8001b62:	011b      	lsls	r3, r3, #4
 8001b64:	440b      	add	r3, r1
 8001b66:	3304      	adds	r3, #4
 8001b68:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	7d1b      	ldrb	r3, [r3, #20]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d111      	bne.n	8001b96 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	3318      	adds	r3, #24
 8001b7a:	011b      	lsls	r3, r3, #4
 8001b7c:	4413      	add	r3, r2
 8001b7e:	3304      	adds	r3, #4
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	68fa      	ldr	r2, [r7, #12]
 8001b84:	6811      	ldr	r1, [r2, #0]
 8001b86:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3318      	adds	r3, #24
 8001b8e:	011b      	lsls	r3, r3, #4
 8001b90:	440b      	add	r3, r1
 8001b92:	3304      	adds	r3, #4
 8001b94:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	3307      	adds	r3, #7
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	061a      	lsls	r2, r3, #24
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	3306      	adds	r3, #6
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	041b      	lsls	r3, r3, #16
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3305      	adds	r3, #5
 8001bac:	781b      	ldrb	r3, [r3, #0]
 8001bae:	021b      	lsls	r3, r3, #8
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	3204      	adds	r2, #4
 8001bb6:	7812      	ldrb	r2, [r2, #0]
 8001bb8:	4610      	mov	r0, r2
 8001bba:	68fa      	ldr	r2, [r7, #12]
 8001bbc:	6811      	ldr	r1, [r2, #0]
 8001bbe:	ea43 0200 	orr.w	r2, r3, r0
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	011b      	lsls	r3, r3, #4
 8001bc6:	440b      	add	r3, r1
 8001bc8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001bcc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3303      	adds	r3, #3
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	061a      	lsls	r2, r3, #24
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	3302      	adds	r3, #2
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	041b      	lsls	r3, r3, #16
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3301      	adds	r3, #1
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	021b      	lsls	r3, r3, #8
 8001be8:	4313      	orrs	r3, r2
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	7812      	ldrb	r2, [r2, #0]
 8001bee:	4610      	mov	r0, r2
 8001bf0:	68fa      	ldr	r2, [r7, #12]
 8001bf2:	6811      	ldr	r1, [r2, #0]
 8001bf4:	ea43 0200 	orr.w	r2, r3, r0
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	011b      	lsls	r3, r3, #4
 8001bfc:	440b      	add	r3, r1
 8001bfe:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001c02:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	3318      	adds	r3, #24
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	4413      	add	r3, r2
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	6811      	ldr	r1, [r2, #0]
 8001c16:	f043 0201 	orr.w	r2, r3, #1
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	3318      	adds	r3, #24
 8001c1e:	011b      	lsls	r3, r3, #4
 8001c20:	440b      	add	r3, r1
 8001c22:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001c24:	2300      	movs	r3, #0
 8001c26:	e00e      	b.n	8001c46 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e006      	b.n	8001c46 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c3c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
  }
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	; 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b085      	sub	sp, #20
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c62:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8001c64:	7afb      	ldrb	r3, [r7, #11]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d002      	beq.n	8001c70 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8001c6a:	7afb      	ldrb	r3, [r7, #11]
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d11d      	bne.n	8001cac <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	689b      	ldr	r3, [r3, #8]
 8001c76:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d002      	beq.n	8001c84 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3301      	adds	r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d002      	beq.n	8001c98 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	3301      	adds	r3, #1
 8001c96:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8001cac:	68fb      	ldr	r3, [r7, #12]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b087      	sub	sp, #28
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	60f8      	str	r0, [r7, #12]
 8001cc0:	60b9      	str	r1, [r7, #8]
 8001cc2:	607a      	str	r2, [r7, #4]
 8001cc4:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ccc:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8001cce:	7dfb      	ldrb	r3, [r7, #23]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d003      	beq.n	8001cdc <HAL_CAN_GetRxMessage+0x24>
 8001cd4:	7dfb      	ldrb	r3, [r7, #23]
 8001cd6:	2b02      	cmp	r3, #2
 8001cd8:	f040 80f3 	bne.w	8001ec2 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10e      	bne.n	8001d00 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	68db      	ldr	r3, [r3, #12]
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d116      	bne.n	8001d1e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0e7      	b.n	8001ed0 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d107      	bne.n	8001d1e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e0d8      	b.n	8001ed0 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	331b      	adds	r3, #27
 8001d26:	011b      	lsls	r3, r3, #4
 8001d28:	4413      	add	r3, r2
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0204 	and.w	r2, r3, #4
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d10c      	bne.n	8001d56 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	331b      	adds	r3, #27
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	4413      	add	r3, r2
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	0d5b      	lsrs	r3, r3, #21
 8001d4c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	601a      	str	r2, [r3, #0]
 8001d54:	e00b      	b.n	8001d6e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	331b      	adds	r3, #27
 8001d5e:	011b      	lsls	r3, r3, #4
 8001d60:	4413      	add	r3, r2
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	08db      	lsrs	r3, r3, #3
 8001d66:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	331b      	adds	r3, #27
 8001d76:	011b      	lsls	r3, r3, #4
 8001d78:	4413      	add	r3, r2
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f003 0202 	and.w	r2, r3, #2
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	331b      	adds	r3, #27
 8001d8c:	011b      	lsls	r3, r3, #4
 8001d8e:	4413      	add	r3, r2
 8001d90:	3304      	adds	r3, #4
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 020f 	and.w	r2, r3, #15
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	331b      	adds	r3, #27
 8001da4:	011b      	lsls	r3, r3, #4
 8001da6:	4413      	add	r3, r2
 8001da8:	3304      	adds	r3, #4
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	0a1b      	lsrs	r3, r3, #8
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	331b      	adds	r3, #27
 8001dbc:	011b      	lsls	r3, r3, #4
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	0c1b      	lsrs	r3, r3, #16
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	011b      	lsls	r3, r3, #4
 8001dd4:	4413      	add	r3, r2
 8001dd6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	011b      	lsls	r3, r3, #4
 8001dea:	4413      	add	r3, r2
 8001dec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	0a1a      	lsrs	r2, r3, #8
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	3301      	adds	r3, #1
 8001df8:	b2d2      	uxtb	r2, r2
 8001dfa:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	011b      	lsls	r3, r3, #4
 8001e04:	4413      	add	r3, r2
 8001e06:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	0c1a      	lsrs	r2, r3, #16
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	3302      	adds	r3, #2
 8001e12:	b2d2      	uxtb	r2, r2
 8001e14:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	68bb      	ldr	r3, [r7, #8]
 8001e1c:	011b      	lsls	r3, r3, #4
 8001e1e:	4413      	add	r3, r2
 8001e20:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	0e1a      	lsrs	r2, r3, #24
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	3303      	adds	r3, #3
 8001e2c:	b2d2      	uxtb	r2, r2
 8001e2e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	011b      	lsls	r3, r3, #4
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	3304      	adds	r3, #4
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	011b      	lsls	r3, r3, #4
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	0a1a      	lsrs	r2, r3, #8
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	3305      	adds	r3, #5
 8001e5e:	b2d2      	uxtb	r2, r2
 8001e60:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	68bb      	ldr	r3, [r7, #8]
 8001e68:	011b      	lsls	r3, r3, #4
 8001e6a:	4413      	add	r3, r2
 8001e6c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	0c1a      	lsrs	r2, r3, #16
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	3306      	adds	r3, #6
 8001e78:	b2d2      	uxtb	r2, r2
 8001e7a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	011b      	lsls	r3, r3, #4
 8001e84:	4413      	add	r3, r2
 8001e86:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	0e1a      	lsrs	r2, r3, #24
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	3307      	adds	r3, #7
 8001e92:	b2d2      	uxtb	r2, r2
 8001e94:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d108      	bne.n	8001eae <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f042 0220 	orr.w	r2, r2, #32
 8001eaa:	60da      	str	r2, [r3, #12]
 8001eac:	e007      	b.n	8001ebe <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	691a      	ldr	r2, [r3, #16]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f042 0220 	orr.w	r2, r2, #32
 8001ebc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	e006      	b.n	8001ed0 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
  }
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	371c      	adds	r7, #28
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc80      	pop	{r7}
 8001ed8:	4770      	bx	lr

08001eda <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b085      	sub	sp, #20
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001eea:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d002      	beq.n	8001ef8 <HAL_CAN_ActivateNotification+0x1e>
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d109      	bne.n	8001f0c <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6959      	ldr	r1, [r3, #20]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	430a      	orrs	r2, r1
 8001f06:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	e006      	b.n	8001f1a <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f10:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
  }
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3714      	adds	r7, #20
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bc80      	pop	{r7}
 8001f22:	4770      	bx	lr

08001f24 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08a      	sub	sp, #40	; 0x28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	695b      	ldr	r3, [r3, #20]
 8001f36:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8001f60:	6a3b      	ldr	r3, [r7, #32]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d07c      	beq.n	8002064 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8001f6a:	69bb      	ldr	r3, [r7, #24]
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d023      	beq.n	8001fbc <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d003      	beq.n	8001f8e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f97d 	bl	8002286 <HAL_CAN_TxMailbox0CompleteCallback>
 8001f8c:	e016      	b.n	8001fbc <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8001f8e:	69bb      	ldr	r3, [r7, #24]
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d004      	beq.n	8001fa2 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8001fa0:	e00c      	b.n	8001fbc <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	f003 0308 	and.w	r3, r3, #8
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d004      	beq.n	8001fb6 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8001fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fae:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001fb2:	627b      	str	r3, [r7, #36]	; 0x24
 8001fb4:	e002      	b.n	8001fbc <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f000 f980 	bl	80022bc <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8001fbc:	69bb      	ldr	r3, [r7, #24]
 8001fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d024      	beq.n	8002010 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f95c 	bl	8002298 <HAL_CAN_TxMailbox1CompleteCallback>
 8001fe0:	e016      	b.n	8002010 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d004      	beq.n	8001ff6 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8001fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ff4:	e00c      	b.n	8002010 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d004      	beq.n	800200a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
 8002008:	e002      	b.n	8002010 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800200a:	6878      	ldr	r0, [r7, #4]
 800200c:	f000 f95f 	bl	80022ce <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d024      	beq.n	8002064 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002022:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002024:	69bb      	ldr	r3, [r7, #24]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f000 f93b 	bl	80022aa <HAL_CAN_TxMailbox2CompleteCallback>
 8002034:	e016      	b.n	8002064 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002036:	69bb      	ldr	r3, [r7, #24]
 8002038:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d004      	beq.n	800204a <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002042:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002046:	627b      	str	r3, [r7, #36]	; 0x24
 8002048:	e00c      	b.n	8002064 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800204a:	69bb      	ldr	r3, [r7, #24]
 800204c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002050:	2b00      	cmp	r3, #0
 8002052:	d004      	beq.n	800205e <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205a:	627b      	str	r3, [r7, #36]	; 0x24
 800205c:	e002      	b.n	8002064 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 f93e 	bl	80022e0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002064:	6a3b      	ldr	r3, [r7, #32]
 8002066:	f003 0308 	and.w	r3, r3, #8
 800206a:	2b00      	cmp	r3, #0
 800206c:	d00c      	beq.n	8002088 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800206e:	697b      	ldr	r3, [r7, #20]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	2b00      	cmp	r3, #0
 8002076:	d007      	beq.n	8002088 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800207e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2210      	movs	r2, #16
 8002086:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002088:	6a3b      	ldr	r3, [r7, #32]
 800208a:	f003 0304 	and.w	r3, r3, #4
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00b      	beq.n	80020aa <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	f003 0308 	and.w	r3, r3, #8
 8002098:	2b00      	cmp	r3, #0
 800209a:	d006      	beq.n	80020aa <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2208      	movs	r2, #8
 80020a2:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80020a4:	6878      	ldr	r0, [r7, #4]
 80020a6:	f000 f924 	bl	80022f2 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80020aa:	6a3b      	ldr	r3, [r7, #32]
 80020ac:	f003 0302 	and.w	r3, r3, #2
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d009      	beq.n	80020c8 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d002      	beq.n	80020c8 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f7fe ff04 	bl	8000ed0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80020c8:	6a3b      	ldr	r3, [r7, #32]
 80020ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00c      	beq.n	80020ec <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	f003 0310 	and.w	r3, r3, #16
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d007      	beq.n	80020ec <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	2210      	movs	r2, #16
 80020ea:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80020ec:	6a3b      	ldr	r3, [r7, #32]
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00b      	beq.n	800210e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d006      	beq.n	800210e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	2208      	movs	r2, #8
 8002106:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f000 f8fb 	bl	8002304 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800210e:	6a3b      	ldr	r3, [r7, #32]
 8002110:	f003 0310 	and.w	r3, r3, #16
 8002114:	2b00      	cmp	r3, #0
 8002116:	d009      	beq.n	800212c <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	691b      	ldr	r3, [r3, #16]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b00      	cmp	r3, #0
 8002124:	d002      	beq.n	800212c <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7fe fedd 	bl	8000ee6 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800212c:	6a3b      	ldr	r3, [r7, #32]
 800212e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002132:	2b00      	cmp	r3, #0
 8002134:	d00b      	beq.n	800214e <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	f003 0310 	and.w	r3, r3, #16
 800213c:	2b00      	cmp	r3, #0
 800213e:	d006      	beq.n	800214e <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2210      	movs	r2, #16
 8002146:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f000 f8e4 	bl	8002316 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800214e:	6a3b      	ldr	r3, [r7, #32]
 8002150:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d00b      	beq.n	8002170 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d006      	beq.n	8002170 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2208      	movs	r2, #8
 8002168:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f8dc 	bl	8002328 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d075      	beq.n	8002266 <HAL_CAN_IRQHandler+0x342>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800217a:	69fb      	ldr	r3, [r7, #28]
 800217c:	f003 0304 	and.w	r3, r3, #4
 8002180:	2b00      	cmp	r3, #0
 8002182:	d06c      	beq.n	800225e <HAL_CAN_IRQHandler+0x33a>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002184:	6a3b      	ldr	r3, [r7, #32]
 8002186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218a:	2b00      	cmp	r3, #0
 800218c:	d008      	beq.n	80021a0 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002194:	2b00      	cmp	r3, #0
 8002196:	d003      	beq.n	80021a0 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021a0:	6a3b      	ldr	r3, [r7, #32]
 80021a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d008      	beq.n	80021bc <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d003      	beq.n	80021bc <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80021b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b6:	f043 0302 	orr.w	r3, r3, #2
 80021ba:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021bc:	6a3b      	ldr	r3, [r7, #32]
 80021be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d008      	beq.n	80021d8 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d003      	beq.n	80021d8 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	f043 0304 	orr.w	r3, r3, #4
 80021d6:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d03d      	beq.n	800225e <HAL_CAN_IRQHandler+0x33a>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d038      	beq.n	800225e <HAL_CAN_IRQHandler+0x33a>
      {
        switch (esrflags & CAN_ESR_LEC)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80021f2:	2b30      	cmp	r3, #48	; 0x30
 80021f4:	d017      	beq.n	8002226 <HAL_CAN_IRQHandler+0x302>
 80021f6:	2b30      	cmp	r3, #48	; 0x30
 80021f8:	d804      	bhi.n	8002204 <HAL_CAN_IRQHandler+0x2e0>
 80021fa:	2b10      	cmp	r3, #16
 80021fc:	d009      	beq.n	8002212 <HAL_CAN_IRQHandler+0x2ee>
 80021fe:	2b20      	cmp	r3, #32
 8002200:	d00c      	beq.n	800221c <HAL_CAN_IRQHandler+0x2f8>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002202:	e024      	b.n	800224e <HAL_CAN_IRQHandler+0x32a>
        switch (esrflags & CAN_ESR_LEC)
 8002204:	2b50      	cmp	r3, #80	; 0x50
 8002206:	d018      	beq.n	800223a <HAL_CAN_IRQHandler+0x316>
 8002208:	2b60      	cmp	r3, #96	; 0x60
 800220a:	d01b      	beq.n	8002244 <HAL_CAN_IRQHandler+0x320>
 800220c:	2b40      	cmp	r3, #64	; 0x40
 800220e:	d00f      	beq.n	8002230 <HAL_CAN_IRQHandler+0x30c>
            break;
 8002210:	e01d      	b.n	800224e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_STF;
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	f043 0308 	orr.w	r3, r3, #8
 8002218:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800221a:	e018      	b.n	800224e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_FOR;
 800221c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221e:	f043 0310 	orr.w	r3, r3, #16
 8002222:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002224:	e013      	b.n	800224e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002228:	f043 0320 	orr.w	r3, r3, #32
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800222e:	e00e      	b.n	800224e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BR;
 8002230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002236:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002238:	e009      	b.n	800224e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_BD;
 800223a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800223c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002242:	e004      	b.n	800224e <HAL_CAN_IRQHandler+0x32a>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800224a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800224c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	699a      	ldr	r2, [r3, #24]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800225c:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2204      	movs	r2, #4
 8002264:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002268:	2b00      	cmp	r3, #0
 800226a:	d008      	beq.n	800227e <HAL_CAN_IRQHandler+0x35a>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	431a      	orrs	r2, r3
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f000 f85e 	bl	800233a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800227e:	bf00      	nop
 8002280:	3728      	adds	r7, #40	; 0x28
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr

08002298 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bc80      	pop	{r7}
 80022a8:	4770      	bx	lr

080022aa <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80022aa:	b480      	push	{r7}
 80022ac:	b083      	sub	sp, #12
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80022b2:	bf00      	nop
 80022b4:	370c      	adds	r7, #12
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80022c4:	bf00      	nop
 80022c6:	370c      	adds	r7, #12
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bc80      	pop	{r7}
 80022cc:	4770      	bx	lr

080022ce <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	bc80      	pop	{r7}
 80022de:	4770      	bx	lr

080022e0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80022e0:	b480      	push	{r7}
 80022e2:	b083      	sub	sp, #12
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80022fa:	bf00      	nop
 80022fc:	370c      	adds	r7, #12
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr

08002304 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	bc80      	pop	{r7}
 8002314:	4770      	bx	lr

08002316 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002316:	b480      	push	{r7}
 8002318:	b083      	sub	sp, #12
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002330:	bf00      	nop
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	bc80      	pop	{r7}
 8002338:	4770      	bx	lr

0800233a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	bc80      	pop	{r7}
 800234a:	4770      	bx	lr

0800234c <HAL_CAN_ResetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ResetError(CAN_HandleTypeDef *hcan)
{
 800234c:	b480      	push	{r7}
 800234e:	b085      	sub	sp, #20
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	73fb      	strb	r3, [r7, #15]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800235e:	73bb      	strb	r3, [r7, #14]

  if ((state == HAL_CAN_STATE_READY) ||
 8002360:	7bbb      	ldrb	r3, [r7, #14]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d002      	beq.n	800236c <HAL_CAN_ResetError+0x20>
 8002366:	7bbb      	ldrb	r3, [r7, #14]
 8002368:	2b02      	cmp	r3, #2
 800236a:	d103      	bne.n	8002374 <HAL_CAN_ResetError+0x28>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Reset CAN error code */
    hcan->ErrorCode = 0U;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	625a      	str	r2, [r3, #36]	; 0x24
 8002372:	e007      	b.n	8002384 <HAL_CAN_ResetError+0x38>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002378:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	625a      	str	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	73fb      	strb	r3, [r7, #15]
  }

  /* Return the status */
  return status;
 8002384:	7bfb      	ldrb	r3, [r7, #15]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002390:	b480      	push	{r7}
 8002392:	b085      	sub	sp, #20
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <__NVIC_SetPriorityGrouping+0x44>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a6:	68ba      	ldr	r2, [r7, #8]
 80023a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023ac:	4013      	ands	r3, r2
 80023ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023c2:	4a04      	ldr	r2, [pc, #16]	; (80023d4 <__NVIC_SetPriorityGrouping+0x44>)
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	60d3      	str	r3, [r2, #12]
}
 80023c8:	bf00      	nop
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bc80      	pop	{r7}
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d8:	b480      	push	{r7}
 80023da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023dc:	4b04      	ldr	r3, [pc, #16]	; (80023f0 <__NVIC_GetPriorityGrouping+0x18>)
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	0a1b      	lsrs	r3, r3, #8
 80023e2:	f003 0307 	and.w	r3, r3, #7
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bc80      	pop	{r7}
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	4603      	mov	r3, r0
 80023fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002402:	2b00      	cmp	r3, #0
 8002404:	db0b      	blt.n	800241e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002406:	79fb      	ldrb	r3, [r7, #7]
 8002408:	f003 021f 	and.w	r2, r3, #31
 800240c:	4906      	ldr	r1, [pc, #24]	; (8002428 <__NVIC_EnableIRQ+0x34>)
 800240e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002412:	095b      	lsrs	r3, r3, #5
 8002414:	2001      	movs	r0, #1
 8002416:	fa00 f202 	lsl.w	r2, r0, r2
 800241a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800241e:	bf00      	nop
 8002420:	370c      	adds	r7, #12
 8002422:	46bd      	mov	sp, r7
 8002424:	bc80      	pop	{r7}
 8002426:	4770      	bx	lr
 8002428:	e000e100 	.word	0xe000e100

0800242c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	2b00      	cmp	r3, #0
 800243e:	db0a      	blt.n	8002456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	b2da      	uxtb	r2, r3
 8002444:	490c      	ldr	r1, [pc, #48]	; (8002478 <__NVIC_SetPriority+0x4c>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	0112      	lsls	r2, r2, #4
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	440b      	add	r3, r1
 8002450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002454:	e00a      	b.n	800246c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4908      	ldr	r1, [pc, #32]	; (800247c <__NVIC_SetPriority+0x50>)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	3b04      	subs	r3, #4
 8002464:	0112      	lsls	r2, r2, #4
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	440b      	add	r3, r1
 800246a:	761a      	strb	r2, [r3, #24]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	bc80      	pop	{r7}
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	e000e100 	.word	0xe000e100
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	; 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f1c3 0307 	rsb	r3, r3, #7
 800249a:	2b04      	cmp	r3, #4
 800249c:	bf28      	it	cs
 800249e:	2304      	movcs	r3, #4
 80024a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3304      	adds	r3, #4
 80024a6:	2b06      	cmp	r3, #6
 80024a8:	d902      	bls.n	80024b0 <NVIC_EncodePriority+0x30>
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3b03      	subs	r3, #3
 80024ae:	e000      	b.n	80024b2 <NVIC_EncodePriority+0x32>
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43da      	mvns	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	401a      	ands	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	43d9      	mvns	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	4313      	orrs	r3, r2
         );
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3724      	adds	r7, #36	; 0x24
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr

080024e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024f4:	d301      	bcc.n	80024fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024f6:	2301      	movs	r3, #1
 80024f8:	e00f      	b.n	800251a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fa:	4a0a      	ldr	r2, [pc, #40]	; (8002524 <SysTick_Config+0x40>)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002502:	210f      	movs	r1, #15
 8002504:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002508:	f7ff ff90 	bl	800242c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <SysTick_Config+0x40>)
 800250e:	2200      	movs	r2, #0
 8002510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002512:	4b04      	ldr	r3, [pc, #16]	; (8002524 <SysTick_Config+0x40>)
 8002514:	2207      	movs	r2, #7
 8002516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002518:	2300      	movs	r3, #0
}
 800251a:	4618      	mov	r0, r3
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	e000e010 	.word	0xe000e010

08002528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ff2d 	bl	8002390 <__NVIC_SetPriorityGrouping>
}
 8002536:	bf00      	nop
 8002538:	3708      	adds	r7, #8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}

0800253e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800253e:	b580      	push	{r7, lr}
 8002540:	b086      	sub	sp, #24
 8002542:	af00      	add	r7, sp, #0
 8002544:	4603      	mov	r3, r0
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
 800254a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800254c:	2300      	movs	r3, #0
 800254e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002550:	f7ff ff42 	bl	80023d8 <__NVIC_GetPriorityGrouping>
 8002554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68b9      	ldr	r1, [r7, #8]
 800255a:	6978      	ldr	r0, [r7, #20]
 800255c:	f7ff ff90 	bl	8002480 <NVIC_EncodePriority>
 8002560:	4602      	mov	r2, r0
 8002562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002566:	4611      	mov	r1, r2
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff5f 	bl	800242c <__NVIC_SetPriority>
}
 800256e:	bf00      	nop
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	4603      	mov	r3, r0
 800257e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff ff35 	bl	80023f4 <__NVIC_EnableIRQ>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002592:	b580      	push	{r7, lr}
 8002594:	b082      	sub	sp, #8
 8002596:	af00      	add	r7, sp, #0
 8002598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f7ff ffa2 	bl	80024e4 <SysTick_Config>
 80025a0:	4603      	mov	r3, r0
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
	...

080025ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b08b      	sub	sp, #44	; 0x2c
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025b6:	2300      	movs	r3, #0
 80025b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025ba:	2300      	movs	r3, #0
 80025bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025be:	e127      	b.n	8002810 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025c0:	2201      	movs	r2, #1
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	fa02 f303 	lsl.w	r3, r2, r3
 80025c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	69fa      	ldr	r2, [r7, #28]
 80025d0:	4013      	ands	r3, r2
 80025d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	429a      	cmp	r2, r3
 80025da:	f040 8116 	bne.w	800280a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b12      	cmp	r3, #18
 80025e4:	d034      	beq.n	8002650 <HAL_GPIO_Init+0xa4>
 80025e6:	2b12      	cmp	r3, #18
 80025e8:	d80d      	bhi.n	8002606 <HAL_GPIO_Init+0x5a>
 80025ea:	2b02      	cmp	r3, #2
 80025ec:	d02b      	beq.n	8002646 <HAL_GPIO_Init+0x9a>
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d804      	bhi.n	80025fc <HAL_GPIO_Init+0x50>
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d031      	beq.n	800265a <HAL_GPIO_Init+0xae>
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d01c      	beq.n	8002634 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80025fa:	e048      	b.n	800268e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d043      	beq.n	8002688 <HAL_GPIO_Init+0xdc>
 8002600:	2b11      	cmp	r3, #17
 8002602:	d01b      	beq.n	800263c <HAL_GPIO_Init+0x90>
          break;
 8002604:	e043      	b.n	800268e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002606:	4a89      	ldr	r2, [pc, #548]	; (800282c <HAL_GPIO_Init+0x280>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d026      	beq.n	800265a <HAL_GPIO_Init+0xae>
 800260c:	4a87      	ldr	r2, [pc, #540]	; (800282c <HAL_GPIO_Init+0x280>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d806      	bhi.n	8002620 <HAL_GPIO_Init+0x74>
 8002612:	4a87      	ldr	r2, [pc, #540]	; (8002830 <HAL_GPIO_Init+0x284>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d020      	beq.n	800265a <HAL_GPIO_Init+0xae>
 8002618:	4a86      	ldr	r2, [pc, #536]	; (8002834 <HAL_GPIO_Init+0x288>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d01d      	beq.n	800265a <HAL_GPIO_Init+0xae>
          break;
 800261e:	e036      	b.n	800268e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8002620:	4a85      	ldr	r2, [pc, #532]	; (8002838 <HAL_GPIO_Init+0x28c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d019      	beq.n	800265a <HAL_GPIO_Init+0xae>
 8002626:	4a85      	ldr	r2, [pc, #532]	; (800283c <HAL_GPIO_Init+0x290>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d016      	beq.n	800265a <HAL_GPIO_Init+0xae>
 800262c:	4a84      	ldr	r2, [pc, #528]	; (8002840 <HAL_GPIO_Init+0x294>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d013      	beq.n	800265a <HAL_GPIO_Init+0xae>
          break;
 8002632:	e02c      	b.n	800268e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	623b      	str	r3, [r7, #32]
          break;
 800263a:	e028      	b.n	800268e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	3304      	adds	r3, #4
 8002642:	623b      	str	r3, [r7, #32]
          break;
 8002644:	e023      	b.n	800268e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	3308      	adds	r3, #8
 800264c:	623b      	str	r3, [r7, #32]
          break;
 800264e:	e01e      	b.n	800268e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	330c      	adds	r3, #12
 8002656:	623b      	str	r3, [r7, #32]
          break;
 8002658:	e019      	b.n	800268e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d102      	bne.n	8002668 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002662:	2304      	movs	r3, #4
 8002664:	623b      	str	r3, [r7, #32]
          break;
 8002666:	e012      	b.n	800268e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d105      	bne.n	800267c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002670:	2308      	movs	r3, #8
 8002672:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	69fa      	ldr	r2, [r7, #28]
 8002678:	611a      	str	r2, [r3, #16]
          break;
 800267a:	e008      	b.n	800268e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800267c:	2308      	movs	r3, #8
 800267e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	69fa      	ldr	r2, [r7, #28]
 8002684:	615a      	str	r2, [r3, #20]
          break;
 8002686:	e002      	b.n	800268e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002688:	2300      	movs	r3, #0
 800268a:	623b      	str	r3, [r7, #32]
          break;
 800268c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	2bff      	cmp	r3, #255	; 0xff
 8002692:	d801      	bhi.n	8002698 <HAL_GPIO_Init+0xec>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	e001      	b.n	800269c <HAL_GPIO_Init+0xf0>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	3304      	adds	r3, #4
 800269c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800269e:	69bb      	ldr	r3, [r7, #24]
 80026a0:	2bff      	cmp	r3, #255	; 0xff
 80026a2:	d802      	bhi.n	80026aa <HAL_GPIO_Init+0xfe>
 80026a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	e002      	b.n	80026b0 <HAL_GPIO_Init+0x104>
 80026aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ac:	3b08      	subs	r3, #8
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026b2:	697b      	ldr	r3, [r7, #20]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	210f      	movs	r1, #15
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	fa01 f303 	lsl.w	r3, r1, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	401a      	ands	r2, r3
 80026c2:	6a39      	ldr	r1, [r7, #32]
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ca:	431a      	orrs	r2, r3
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 8096 	beq.w	800280a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80026de:	4b59      	ldr	r3, [pc, #356]	; (8002844 <HAL_GPIO_Init+0x298>)
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	4a58      	ldr	r2, [pc, #352]	; (8002844 <HAL_GPIO_Init+0x298>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6193      	str	r3, [r2, #24]
 80026ea:	4b56      	ldr	r3, [pc, #344]	; (8002844 <HAL_GPIO_Init+0x298>)
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	60bb      	str	r3, [r7, #8]
 80026f4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80026f6:	4a54      	ldr	r2, [pc, #336]	; (8002848 <HAL_GPIO_Init+0x29c>)
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	3302      	adds	r3, #2
 80026fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002702:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	220f      	movs	r2, #15
 800270e:	fa02 f303 	lsl.w	r3, r2, r3
 8002712:	43db      	mvns	r3, r3
 8002714:	68fa      	ldr	r2, [r7, #12]
 8002716:	4013      	ands	r3, r2
 8002718:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	4a4b      	ldr	r2, [pc, #300]	; (800284c <HAL_GPIO_Init+0x2a0>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d013      	beq.n	800274a <HAL_GPIO_Init+0x19e>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	4a4a      	ldr	r2, [pc, #296]	; (8002850 <HAL_GPIO_Init+0x2a4>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d00d      	beq.n	8002746 <HAL_GPIO_Init+0x19a>
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	4a49      	ldr	r2, [pc, #292]	; (8002854 <HAL_GPIO_Init+0x2a8>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d007      	beq.n	8002742 <HAL_GPIO_Init+0x196>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a48      	ldr	r2, [pc, #288]	; (8002858 <HAL_GPIO_Init+0x2ac>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d101      	bne.n	800273e <HAL_GPIO_Init+0x192>
 800273a:	2303      	movs	r3, #3
 800273c:	e006      	b.n	800274c <HAL_GPIO_Init+0x1a0>
 800273e:	2304      	movs	r3, #4
 8002740:	e004      	b.n	800274c <HAL_GPIO_Init+0x1a0>
 8002742:	2302      	movs	r3, #2
 8002744:	e002      	b.n	800274c <HAL_GPIO_Init+0x1a0>
 8002746:	2301      	movs	r3, #1
 8002748:	e000      	b.n	800274c <HAL_GPIO_Init+0x1a0>
 800274a:	2300      	movs	r3, #0
 800274c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800274e:	f002 0203 	and.w	r2, r2, #3
 8002752:	0092      	lsls	r2, r2, #2
 8002754:	4093      	lsls	r3, r2
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4313      	orrs	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800275c:	493a      	ldr	r1, [pc, #232]	; (8002848 <HAL_GPIO_Init+0x29c>)
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	089b      	lsrs	r3, r3, #2
 8002762:	3302      	adds	r3, #2
 8002764:	68fa      	ldr	r2, [r7, #12]
 8002766:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d006      	beq.n	8002784 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002776:	4b39      	ldr	r3, [pc, #228]	; (800285c <HAL_GPIO_Init+0x2b0>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	4938      	ldr	r1, [pc, #224]	; (800285c <HAL_GPIO_Init+0x2b0>)
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]
 8002782:	e006      	b.n	8002792 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002784:	4b35      	ldr	r3, [pc, #212]	; (800285c <HAL_GPIO_Init+0x2b0>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	43db      	mvns	r3, r3
 800278c:	4933      	ldr	r1, [pc, #204]	; (800285c <HAL_GPIO_Init+0x2b0>)
 800278e:	4013      	ands	r3, r2
 8002790:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279a:	2b00      	cmp	r3, #0
 800279c:	d006      	beq.n	80027ac <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800279e:	4b2f      	ldr	r3, [pc, #188]	; (800285c <HAL_GPIO_Init+0x2b0>)
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	492e      	ldr	r1, [pc, #184]	; (800285c <HAL_GPIO_Init+0x2b0>)
 80027a4:	69bb      	ldr	r3, [r7, #24]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	604b      	str	r3, [r1, #4]
 80027aa:	e006      	b.n	80027ba <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80027ac:	4b2b      	ldr	r3, [pc, #172]	; (800285c <HAL_GPIO_Init+0x2b0>)
 80027ae:	685a      	ldr	r2, [r3, #4]
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	43db      	mvns	r3, r3
 80027b4:	4929      	ldr	r1, [pc, #164]	; (800285c <HAL_GPIO_Init+0x2b0>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d006      	beq.n	80027d4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027c6:	4b25      	ldr	r3, [pc, #148]	; (800285c <HAL_GPIO_Init+0x2b0>)
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	4924      	ldr	r1, [pc, #144]	; (800285c <HAL_GPIO_Init+0x2b0>)
 80027cc:	69bb      	ldr	r3, [r7, #24]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	608b      	str	r3, [r1, #8]
 80027d2:	e006      	b.n	80027e2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027d4:	4b21      	ldr	r3, [pc, #132]	; (800285c <HAL_GPIO_Init+0x2b0>)
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	43db      	mvns	r3, r3
 80027dc:	491f      	ldr	r1, [pc, #124]	; (800285c <HAL_GPIO_Init+0x2b0>)
 80027de:	4013      	ands	r3, r2
 80027e0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d006      	beq.n	80027fc <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027ee:	4b1b      	ldr	r3, [pc, #108]	; (800285c <HAL_GPIO_Init+0x2b0>)
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	491a      	ldr	r1, [pc, #104]	; (800285c <HAL_GPIO_Init+0x2b0>)
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60cb      	str	r3, [r1, #12]
 80027fa:	e006      	b.n	800280a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027fc:	4b17      	ldr	r3, [pc, #92]	; (800285c <HAL_GPIO_Init+0x2b0>)
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	43db      	mvns	r3, r3
 8002804:	4915      	ldr	r1, [pc, #84]	; (800285c <HAL_GPIO_Init+0x2b0>)
 8002806:	4013      	ands	r3, r2
 8002808:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800280c:	3301      	adds	r3, #1
 800280e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	fa22 f303 	lsr.w	r3, r2, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	f47f aed0 	bne.w	80025c0 <HAL_GPIO_Init+0x14>
  }
}
 8002820:	bf00      	nop
 8002822:	372c      	adds	r7, #44	; 0x2c
 8002824:	46bd      	mov	sp, r7
 8002826:	bc80      	pop	{r7}
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	10210000 	.word	0x10210000
 8002830:	10110000 	.word	0x10110000
 8002834:	10120000 	.word	0x10120000
 8002838:	10310000 	.word	0x10310000
 800283c:	10320000 	.word	0x10320000
 8002840:	10220000 	.word	0x10220000
 8002844:	40021000 	.word	0x40021000
 8002848:	40010000 	.word	0x40010000
 800284c:	40010800 	.word	0x40010800
 8002850:	40010c00 	.word	0x40010c00
 8002854:	40011000 	.word	0x40011000
 8002858:	40011400 	.word	0x40011400
 800285c:	40010400 	.word	0x40010400

08002860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	460b      	mov	r3, r1
 800286a:	807b      	strh	r3, [r7, #2]
 800286c:	4613      	mov	r3, r2
 800286e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002870:	787b      	ldrb	r3, [r7, #1]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d003      	beq.n	800287e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002876:	887a      	ldrh	r2, [r7, #2]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800287c:	e003      	b.n	8002886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800287e:	887b      	ldrh	r3, [r7, #2]
 8002880:	041a      	lsls	r2, r3, #16
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	611a      	str	r2, [r3, #16]
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b086      	sub	sp, #24
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e304      	b.n	8002eac <HAL_RCC_OscConfig+0x61c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	f000 8087 	beq.w	80029be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028b0:	4b92      	ldr	r3, [pc, #584]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f003 030c 	and.w	r3, r3, #12
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d00c      	beq.n	80028d6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80028bc:	4b8f      	ldr	r3, [pc, #572]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	f003 030c 	and.w	r3, r3, #12
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d112      	bne.n	80028ee <HAL_RCC_OscConfig+0x5e>
 80028c8:	4b8c      	ldr	r3, [pc, #560]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028d4:	d10b      	bne.n	80028ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d6:	4b89      	ldr	r3, [pc, #548]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d06c      	beq.n	80029bc <HAL_RCC_OscConfig+0x12c>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d168      	bne.n	80029bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e2de      	b.n	8002eac <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f6:	d106      	bne.n	8002906 <HAL_RCC_OscConfig+0x76>
 80028f8:	4b80      	ldr	r3, [pc, #512]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a7f      	ldr	r2, [pc, #508]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80028fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002902:	6013      	str	r3, [r2, #0]
 8002904:	e02e      	b.n	8002964 <HAL_RCC_OscConfig+0xd4>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0x98>
 800290e:	4b7b      	ldr	r3, [pc, #492]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a7a      	ldr	r2, [pc, #488]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002914:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	4b78      	ldr	r3, [pc, #480]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a77      	ldr	r2, [pc, #476]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002920:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	e01d      	b.n	8002964 <HAL_RCC_OscConfig+0xd4>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002930:	d10c      	bne.n	800294c <HAL_RCC_OscConfig+0xbc>
 8002932:	4b72      	ldr	r3, [pc, #456]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a71      	ldr	r2, [pc, #452]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002938:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	4b6f      	ldr	r3, [pc, #444]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a6e      	ldr	r2, [pc, #440]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002944:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002948:	6013      	str	r3, [r2, #0]
 800294a:	e00b      	b.n	8002964 <HAL_RCC_OscConfig+0xd4>
 800294c:	4b6b      	ldr	r3, [pc, #428]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a6a      	ldr	r2, [pc, #424]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002956:	6013      	str	r3, [r2, #0]
 8002958:	4b68      	ldr	r3, [pc, #416]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a67      	ldr	r2, [pc, #412]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 800295e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002962:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d013      	beq.n	8002994 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800296c:	f7fe fe4a 	bl	8001604 <HAL_GetTick>
 8002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002974:	f7fe fe46 	bl	8001604 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b64      	cmp	r3, #100	; 0x64
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e292      	b.n	8002eac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002986:	4b5d      	ldr	r3, [pc, #372]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d0f0      	beq.n	8002974 <HAL_RCC_OscConfig+0xe4>
 8002992:	e014      	b.n	80029be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7fe fe36 	bl	8001604 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800299c:	f7fe fe32 	bl	8001604 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b64      	cmp	r3, #100	; 0x64
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e27e      	b.n	8002eac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029ae:	4b53      	ldr	r3, [pc, #332]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d1f0      	bne.n	800299c <HAL_RCC_OscConfig+0x10c>
 80029ba:	e000      	b.n	80029be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0302 	and.w	r3, r3, #2
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d063      	beq.n	8002a92 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029ca:	4b4c      	ldr	r3, [pc, #304]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f003 030c 	and.w	r3, r3, #12
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00b      	beq.n	80029ee <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80029d6:	4b49      	ldr	r3, [pc, #292]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 030c 	and.w	r3, r3, #12
 80029de:	2b08      	cmp	r3, #8
 80029e0:	d11c      	bne.n	8002a1c <HAL_RCC_OscConfig+0x18c>
 80029e2:	4b46      	ldr	r3, [pc, #280]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d116      	bne.n	8002a1c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ee:	4b43      	ldr	r3, [pc, #268]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d005      	beq.n	8002a06 <HAL_RCC_OscConfig+0x176>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	695b      	ldr	r3, [r3, #20]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d001      	beq.n	8002a06 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e252      	b.n	8002eac <HAL_RCC_OscConfig+0x61c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a06:	4b3d      	ldr	r3, [pc, #244]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4939      	ldr	r1, [pc, #228]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a1a:	e03a      	b.n	8002a92 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d020      	beq.n	8002a66 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a24:	4b36      	ldr	r3, [pc, #216]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a26:	2201      	movs	r2, #1
 8002a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a2a:	f7fe fdeb 	bl	8001604 <HAL_GetTick>
 8002a2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a30:	e008      	b.n	8002a44 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a32:	f7fe fde7 	bl	8001604 <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	693b      	ldr	r3, [r7, #16]
 8002a3a:	1ad3      	subs	r3, r2, r3
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	d901      	bls.n	8002a44 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002a40:	2303      	movs	r3, #3
 8002a42:	e233      	b.n	8002eac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a44:	4b2d      	ldr	r3, [pc, #180]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0302 	and.w	r3, r3, #2
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d0f0      	beq.n	8002a32 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a50:	4b2a      	ldr	r3, [pc, #168]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	00db      	lsls	r3, r3, #3
 8002a5e:	4927      	ldr	r1, [pc, #156]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002a60:	4313      	orrs	r3, r2
 8002a62:	600b      	str	r3, [r1, #0]
 8002a64:	e015      	b.n	8002a92 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a66:	4b26      	ldr	r3, [pc, #152]	; (8002b00 <HAL_RCC_OscConfig+0x270>)
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a6c:	f7fe fdca 	bl	8001604 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a74:	f7fe fdc6 	bl	8001604 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e212      	b.n	8002eac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a86:	4b1d      	ldr	r3, [pc, #116]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 0302 	and.w	r3, r3, #2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 0308 	and.w	r3, r3, #8
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d03a      	beq.n	8002b14 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	69db      	ldr	r3, [r3, #28]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d019      	beq.n	8002ada <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aa6:	4b17      	ldr	r3, [pc, #92]	; (8002b04 <HAL_RCC_OscConfig+0x274>)
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aac:	f7fe fdaa 	bl	8001604 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ab4:	f7fe fda6 	bl	8001604 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e1f2      	b.n	8002eac <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ac6:	4b0d      	ldr	r3, [pc, #52]	; (8002afc <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ad2:	2001      	movs	r0, #1
 8002ad4:	f000 fb98 	bl	8003208 <RCC_Delay>
 8002ad8:	e01c      	b.n	8002b14 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ada:	4b0a      	ldr	r3, [pc, #40]	; (8002b04 <HAL_RCC_OscConfig+0x274>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ae0:	f7fe fd90 	bl	8001604 <HAL_GetTick>
 8002ae4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ae6:	e00f      	b.n	8002b08 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ae8:	f7fe fd8c 	bl	8001604 <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d908      	bls.n	8002b08 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e1d8      	b.n	8002eac <HAL_RCC_OscConfig+0x61c>
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000
 8002b00:	42420000 	.word	0x42420000
 8002b04:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b08:	4b9b      	ldr	r3, [pc, #620]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1e9      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80a6 	beq.w	8002c6e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b22:	2300      	movs	r3, #0
 8002b24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b26:	4b94      	ldr	r3, [pc, #592]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d10d      	bne.n	8002b4e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b32:	4b91      	ldr	r3, [pc, #580]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	4a90      	ldr	r2, [pc, #576]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002b38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b3c:	61d3      	str	r3, [r2, #28]
 8002b3e:	4b8e      	ldr	r3, [pc, #568]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002b40:	69db      	ldr	r3, [r3, #28]
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4e:	4b8b      	ldr	r3, [pc, #556]	; (8002d7c <HAL_RCC_OscConfig+0x4ec>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d118      	bne.n	8002b8c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b5a:	4b88      	ldr	r3, [pc, #544]	; (8002d7c <HAL_RCC_OscConfig+0x4ec>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a87      	ldr	r2, [pc, #540]	; (8002d7c <HAL_RCC_OscConfig+0x4ec>)
 8002b60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b64:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b66:	f7fe fd4d 	bl	8001604 <HAL_GetTick>
 8002b6a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b6c:	e008      	b.n	8002b80 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b6e:	f7fe fd49 	bl	8001604 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b64      	cmp	r3, #100	; 0x64
 8002b7a:	d901      	bls.n	8002b80 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002b7c:	2303      	movs	r3, #3
 8002b7e:	e195      	b.n	8002eac <HAL_RCC_OscConfig+0x61c>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b80:	4b7e      	ldr	r3, [pc, #504]	; (8002d7c <HAL_RCC_OscConfig+0x4ec>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0f0      	beq.n	8002b6e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d106      	bne.n	8002ba2 <HAL_RCC_OscConfig+0x312>
 8002b94:	4b78      	ldr	r3, [pc, #480]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	4a77      	ldr	r2, [pc, #476]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002b9a:	f043 0301 	orr.w	r3, r3, #1
 8002b9e:	6213      	str	r3, [r2, #32]
 8002ba0:	e02d      	b.n	8002bfe <HAL_RCC_OscConfig+0x36e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x334>
 8002baa:	4b73      	ldr	r3, [pc, #460]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	4a72      	ldr	r2, [pc, #456]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002bb0:	f023 0301 	bic.w	r3, r3, #1
 8002bb4:	6213      	str	r3, [r2, #32]
 8002bb6:	4b70      	ldr	r3, [pc, #448]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	4a6f      	ldr	r2, [pc, #444]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002bbc:	f023 0304 	bic.w	r3, r3, #4
 8002bc0:	6213      	str	r3, [r2, #32]
 8002bc2:	e01c      	b.n	8002bfe <HAL_RCC_OscConfig+0x36e>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	2b05      	cmp	r3, #5
 8002bca:	d10c      	bne.n	8002be6 <HAL_RCC_OscConfig+0x356>
 8002bcc:	4b6a      	ldr	r3, [pc, #424]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002bce:	6a1b      	ldr	r3, [r3, #32]
 8002bd0:	4a69      	ldr	r2, [pc, #420]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002bd2:	f043 0304 	orr.w	r3, r3, #4
 8002bd6:	6213      	str	r3, [r2, #32]
 8002bd8:	4b67      	ldr	r3, [pc, #412]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	4a66      	ldr	r2, [pc, #408]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002bde:	f043 0301 	orr.w	r3, r3, #1
 8002be2:	6213      	str	r3, [r2, #32]
 8002be4:	e00b      	b.n	8002bfe <HAL_RCC_OscConfig+0x36e>
 8002be6:	4b64      	ldr	r3, [pc, #400]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002be8:	6a1b      	ldr	r3, [r3, #32]
 8002bea:	4a63      	ldr	r2, [pc, #396]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002bec:	f023 0301 	bic.w	r3, r3, #1
 8002bf0:	6213      	str	r3, [r2, #32]
 8002bf2:	4b61      	ldr	r3, [pc, #388]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002bf4:	6a1b      	ldr	r3, [r3, #32]
 8002bf6:	4a60      	ldr	r2, [pc, #384]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002bf8:	f023 0304 	bic.w	r3, r3, #4
 8002bfc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	691b      	ldr	r3, [r3, #16]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d015      	beq.n	8002c32 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c06:	f7fe fcfd 	bl	8001604 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c0e:	f7fe fcf9 	bl	8001604 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d901      	bls.n	8002c24 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002c20:	2303      	movs	r3, #3
 8002c22:	e143      	b.n	8002eac <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c24:	4b54      	ldr	r3, [pc, #336]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002c26:	6a1b      	ldr	r3, [r3, #32]
 8002c28:	f003 0302 	and.w	r3, r3, #2
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d0ee      	beq.n	8002c0e <HAL_RCC_OscConfig+0x37e>
 8002c30:	e014      	b.n	8002c5c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c32:	f7fe fce7 	bl	8001604 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c38:	e00a      	b.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c3a:	f7fe fce3 	bl	8001604 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e12d      	b.n	8002eac <HAL_RCC_OscConfig+0x61c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c50:	4b49      	ldr	r3, [pc, #292]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002c52:	6a1b      	ldr	r3, [r3, #32]
 8002c54:	f003 0302 	and.w	r3, r3, #2
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d1ee      	bne.n	8002c3a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002c5c:	7dfb      	ldrb	r3, [r7, #23]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d105      	bne.n	8002c6e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c62:	4b45      	ldr	r3, [pc, #276]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002c64:	69db      	ldr	r3, [r3, #28]
 8002c66:	4a44      	ldr	r2, [pc, #272]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002c68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	61d3      	str	r3, [r2, #28]

#if defined(RCC_CR_PLL2ON)
  /*-------------------------------- PLL2 Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL2(RCC_OscInitStruct->PLL2.PLL2State));
  if ((RCC_OscInitStruct->PLL2.PLL2State) != RCC_PLL2_NONE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	f000 808c 	beq.w	8002d90 <HAL_RCC_OscConfig+0x500>
  {
    /* This bit can not be cleared if the PLL2 clock is used indirectly as system
      clock (i.e. it is used as PLL clock entry that is used as system clock). */
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002c78:	4b3f      	ldr	r3, [pc, #252]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c84:	d10e      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x414>
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002c86:	4b3c      	ldr	r3, [pc, #240]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE) && \
 8002c8e:	2b08      	cmp	r3, #8
 8002c90:	d108      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x414>
        ((READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC)) == RCC_CFGR2_PREDIV1SRC_PLL2))
 8002c92:	4b39      	ldr	r3, [pc, #228]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
        (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && \
 8002c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x414>
    {
      return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e103      	b.n	8002eac <HAL_RCC_OscConfig+0x61c>
    }
    else
    {
      if ((RCC_OscInitStruct->PLL2.PLL2State) == RCC_PLL2_ON)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d14e      	bne.n	8002d4a <HAL_RCC_OscConfig+0x4ba>
        assert_param(IS_RCC_PLL2_MUL(RCC_OscInitStruct->PLL2.PLL2MUL));
        assert_param(IS_RCC_HSE_PREDIV2(RCC_OscInitStruct->PLL2.HSEPrediv2Value));

        /* Prediv2 can be written only when the PLLI2S is disabled. */
        /* Return an error only if new value is different from the programmed value */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002cac:	4b32      	ldr	r3, [pc, #200]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d009      	beq.n	8002ccc <HAL_RCC_OscConfig+0x43c>
            (__HAL_RCC_HSE_GET_PREDIV2() != RCC_OscInitStruct->PLL2.HSEPrediv2Value))
 8002cb8:	4b2f      	ldr	r3, [pc, #188]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3ON) && \
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_OscConfig+0x43c>
        {
          return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0ef      	b.n	8002eac <HAL_RCC_OscConfig+0x61c>
        }

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002ccc:	4b2c      	ldr	r3, [pc, #176]	; (8002d80 <HAL_RCC_OscConfig+0x4f0>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd2:	f7fe fc97 	bl	8001604 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x45c>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002cda:	f7fe fc93 	bl	8001604 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b64      	cmp	r3, #100	; 0x64
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e0df      	b.n	8002eac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != RESET)
 8002cec:	4b22      	ldr	r3, [pc, #136]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d1f0      	bne.n	8002cda <HAL_RCC_OscConfig+0x44a>
          }
        }

        /* Configure the HSE prediv2 factor --------------------------------*/
        __HAL_RCC_HSE_PREDIV2_CONFIG(RCC_OscInitStruct->PLL2.HSEPrediv2Value);
 8002cf8:	4b1f      	ldr	r3, [pc, #124]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d04:	491c      	ldr	r1, [pc, #112]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Configure the main PLL2 multiplication factors. */
        __HAL_RCC_PLL2_CONFIG(RCC_OscInitStruct->PLL2.PLL2MUL);
 8002d0a:	4b1b      	ldr	r3, [pc, #108]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002d0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	4918      	ldr	r1, [pc, #96]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable the main PLL2. */
        __HAL_RCC_PLL2_ENABLE();
 8002d1c:	4b18      	ldr	r3, [pc, #96]	; (8002d80 <HAL_RCC_OscConfig+0x4f0>)
 8002d1e:	2201      	movs	r2, #1
 8002d20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d22:	f7fe fc6f 	bl	8001604 <HAL_GetTick>
 8002d26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002d28:	e008      	b.n	8002d3c <HAL_RCC_OscConfig+0x4ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002d2a:	f7fe fc6b 	bl	8001604 <HAL_GetTick>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	2b64      	cmp	r3, #100	; 0x64
 8002d36:	d901      	bls.n	8002d3c <HAL_RCC_OscConfig+0x4ac>
          {
            return HAL_TIMEOUT;
 8002d38:	2303      	movs	r3, #3
 8002d3a:	e0b7      	b.n	8002eac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  == RESET)
 8002d3c:	4b0e      	ldr	r3, [pc, #56]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d0f0      	beq.n	8002d2a <HAL_RCC_OscConfig+0x49a>
 8002d48:	e022      	b.n	8002d90 <HAL_RCC_OscConfig+0x500>
        }
      }
      else
      {
        /* Set PREDIV1 source to HSE */
        CLEAR_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC);
 8002d4a:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d4e:	4a0a      	ldr	r2, [pc, #40]	; (8002d78 <HAL_RCC_OscConfig+0x4e8>)
 8002d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Disable the main PLL2. */
        __HAL_RCC_PLL2_DISABLE();
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <HAL_RCC_OscConfig+0x4f0>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d5c:	f7fe fc52 	bl	8001604 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL2 is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002d62:	e00f      	b.n	8002d84 <HAL_RCC_OscConfig+0x4f4>
        {
          if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8002d64:	f7fe fc4e 	bl	8001604 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b64      	cmp	r3, #100	; 0x64
 8002d70:	d908      	bls.n	8002d84 <HAL_RCC_OscConfig+0x4f4>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e09a      	b.n	8002eac <HAL_RCC_OscConfig+0x61c>
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	40007000 	.word	0x40007000
 8002d80:	42420068 	.word	0x42420068
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY)  != RESET)
 8002d84:	4b4b      	ldr	r3, [pc, #300]	; (8002eb4 <HAL_RCC_OscConfig+0x624>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d1e9      	bne.n	8002d64 <HAL_RCC_OscConfig+0x4d4>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a1b      	ldr	r3, [r3, #32]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 8088 	beq.w	8002eaa <HAL_RCC_OscConfig+0x61a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d9a:	4b46      	ldr	r3, [pc, #280]	; (8002eb4 <HAL_RCC_OscConfig+0x624>)
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	2b08      	cmp	r3, #8
 8002da4:	d068      	beq.n	8002e78 <HAL_RCC_OscConfig+0x5e8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6a1b      	ldr	r3, [r3, #32]
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d14d      	bne.n	8002e4a <HAL_RCC_OscConfig+0x5ba>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dae:	4b42      	ldr	r3, [pc, #264]	; (8002eb8 <HAL_RCC_OscConfig+0x628>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fe fc26 	bl	8001604 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x53e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dbc:	f7fe fc22 	bl	8001604 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x53e>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e06e      	b.n	8002eac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dce:	4b39      	ldr	r3, [pc, #228]	; (8002eb4 <HAL_RCC_OscConfig+0x624>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x52c>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002de2:	d10f      	bne.n	8002e04 <HAL_RCC_OscConfig+0x574>
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
#if defined(RCC_CFGR2_PREDIV1SRC)
          assert_param(IS_RCC_PREDIV1_SOURCE(RCC_OscInitStruct->Prediv1Source));

          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
 8002de4:	4b33      	ldr	r3, [pc, #204]	; (8002eb4 <HAL_RCC_OscConfig+0x624>)
 8002de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	4931      	ldr	r1, [pc, #196]	; (8002eb4 <HAL_RCC_OscConfig+0x624>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002df2:	4b30      	ldr	r3, [pc, #192]	; (8002eb4 <HAL_RCC_OscConfig+0x624>)
 8002df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002df6:	f023 020f 	bic.w	r2, r3, #15
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	492d      	ldr	r1, [pc, #180]	; (8002eb4 <HAL_RCC_OscConfig+0x624>)
 8002e00:	4313      	orrs	r3, r2
 8002e02:	62cb      	str	r3, [r1, #44]	; 0x2c
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e04:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <HAL_RCC_OscConfig+0x624>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	430b      	orrs	r3, r1
 8002e16:	4927      	ldr	r1, [pc, #156]	; (8002eb4 <HAL_RCC_OscConfig+0x624>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e1c:	4b26      	ldr	r3, [pc, #152]	; (8002eb8 <HAL_RCC_OscConfig+0x628>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e22:	f7fe fbef 	bl	8001604 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x5ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2a:	f7fe fbeb 	bl	8001604 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x5ac>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e037      	b.n	8002eac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e3c:	4b1d      	ldr	r3, [pc, #116]	; (8002eb4 <HAL_RCC_OscConfig+0x624>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x59a>
 8002e48:	e02f      	b.n	8002eaa <HAL_RCC_OscConfig+0x61a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4a:	4b1b      	ldr	r3, [pc, #108]	; (8002eb8 <HAL_RCC_OscConfig+0x628>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e50:	f7fe fbd8 	bl	8001604 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x5da>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e58:	f7fe fbd4 	bl	8001604 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x5da>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e020      	b.n	8002eac <HAL_RCC_OscConfig+0x61c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e6a:	4b12      	ldr	r3, [pc, #72]	; (8002eb4 <HAL_RCC_OscConfig+0x624>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x5c8>
 8002e76:	e018      	b.n	8002eaa <HAL_RCC_OscConfig+0x61a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d101      	bne.n	8002e84 <HAL_RCC_OscConfig+0x5f4>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e013      	b.n	8002eac <HAL_RCC_OscConfig+0x61c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e84:	4b0b      	ldr	r3, [pc, #44]	; (8002eb4 <HAL_RCC_OscConfig+0x624>)
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e94:	429a      	cmp	r2, r3
 8002e96:	d106      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x616>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCC_OscConfig+0x61a>
        {
          return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e000      	b.n	8002eac <HAL_RCC_OscConfig+0x61c>
        }
      }
    }
  }

  return HAL_OK;
 8002eaa:	2300      	movs	r3, #0
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3718      	adds	r7, #24
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	40021000 	.word	0x40021000
 8002eb8:	42420060 	.word	0x42420060

08002ebc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d101      	bne.n	8002ed0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e0d0      	b.n	8003072 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ed0:	4b6a      	ldr	r3, [pc, #424]	; (800307c <HAL_RCC_ClockConfig+0x1c0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0307 	and.w	r3, r3, #7
 8002ed8:	683a      	ldr	r2, [r7, #0]
 8002eda:	429a      	cmp	r2, r3
 8002edc:	d910      	bls.n	8002f00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ede:	4b67      	ldr	r3, [pc, #412]	; (800307c <HAL_RCC_ClockConfig+0x1c0>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f023 0207 	bic.w	r2, r3, #7
 8002ee6:	4965      	ldr	r1, [pc, #404]	; (800307c <HAL_RCC_ClockConfig+0x1c0>)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eee:	4b63      	ldr	r3, [pc, #396]	; (800307c <HAL_RCC_ClockConfig+0x1c0>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0307 	and.w	r3, r3, #7
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	429a      	cmp	r2, r3
 8002efa:	d001      	beq.n	8002f00 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002efc:	2301      	movs	r3, #1
 8002efe:	e0b8      	b.n	8003072 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d020      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d005      	beq.n	8002f24 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f18:	4b59      	ldr	r3, [pc, #356]	; (8003080 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	4a58      	ldr	r2, [pc, #352]	; (8003080 <HAL_RCC_ClockConfig+0x1c4>)
 8002f1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002f22:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0308 	and.w	r3, r3, #8
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d005      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f30:	4b53      	ldr	r3, [pc, #332]	; (8003080 <HAL_RCC_ClockConfig+0x1c4>)
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	4a52      	ldr	r2, [pc, #328]	; (8003080 <HAL_RCC_ClockConfig+0x1c4>)
 8002f36:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002f3a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f3c:	4b50      	ldr	r3, [pc, #320]	; (8003080 <HAL_RCC_ClockConfig+0x1c4>)
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	494d      	ldr	r1, [pc, #308]	; (8003080 <HAL_RCC_ClockConfig+0x1c4>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0301 	and.w	r3, r3, #1
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d040      	beq.n	8002fdc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	685b      	ldr	r3, [r3, #4]
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d107      	bne.n	8002f72 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f62:	4b47      	ldr	r3, [pc, #284]	; (8003080 <HAL_RCC_ClockConfig+0x1c4>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d115      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e07f      	b.n	8003072 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d107      	bne.n	8002f8a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7a:	4b41      	ldr	r3, [pc, #260]	; (8003080 <HAL_RCC_ClockConfig+0x1c4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d109      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e073      	b.n	8003072 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f8a:	4b3d      	ldr	r3, [pc, #244]	; (8003080 <HAL_RCC_ClockConfig+0x1c4>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 0302 	and.w	r3, r3, #2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e06b      	b.n	8003072 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f9a:	4b39      	ldr	r3, [pc, #228]	; (8003080 <HAL_RCC_ClockConfig+0x1c4>)
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	f023 0203 	bic.w	r2, r3, #3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4936      	ldr	r1, [pc, #216]	; (8003080 <HAL_RCC_ClockConfig+0x1c4>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fac:	f7fe fb2a 	bl	8001604 <HAL_GetTick>
 8002fb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb2:	e00a      	b.n	8002fca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb4:	f7fe fb26 	bl	8001604 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e053      	b.n	8003072 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fca:	4b2d      	ldr	r3, [pc, #180]	; (8003080 <HAL_RCC_ClockConfig+0x1c4>)
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 020c 	and.w	r2, r3, #12
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d1eb      	bne.n	8002fb4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b27      	ldr	r3, [pc, #156]	; (800307c <HAL_RCC_ClockConfig+0x1c0>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d210      	bcs.n	800300c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b24      	ldr	r3, [pc, #144]	; (800307c <HAL_RCC_ClockConfig+0x1c0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f023 0207 	bic.w	r2, r3, #7
 8002ff2:	4922      	ldr	r1, [pc, #136]	; (800307c <HAL_RCC_ClockConfig+0x1c0>)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ffa:	4b20      	ldr	r3, [pc, #128]	; (800307c <HAL_RCC_ClockConfig+0x1c0>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	683a      	ldr	r2, [r7, #0]
 8003004:	429a      	cmp	r2, r3
 8003006:	d001      	beq.n	800300c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e032      	b.n	8003072 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d008      	beq.n	800302a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003018:	4b19      	ldr	r3, [pc, #100]	; (8003080 <HAL_RCC_ClockConfig+0x1c4>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	68db      	ldr	r3, [r3, #12]
 8003024:	4916      	ldr	r1, [pc, #88]	; (8003080 <HAL_RCC_ClockConfig+0x1c4>)
 8003026:	4313      	orrs	r3, r2
 8003028:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f003 0308 	and.w	r3, r3, #8
 8003032:	2b00      	cmp	r3, #0
 8003034:	d009      	beq.n	800304a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003036:	4b12      	ldr	r3, [pc, #72]	; (8003080 <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	691b      	ldr	r3, [r3, #16]
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	490e      	ldr	r1, [pc, #56]	; (8003080 <HAL_RCC_ClockConfig+0x1c4>)
 8003046:	4313      	orrs	r3, r2
 8003048:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800304a:	f000 f821 	bl	8003090 <HAL_RCC_GetSysClockFreq>
 800304e:	4601      	mov	r1, r0
 8003050:	4b0b      	ldr	r3, [pc, #44]	; (8003080 <HAL_RCC_ClockConfig+0x1c4>)
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	091b      	lsrs	r3, r3, #4
 8003056:	f003 030f 	and.w	r3, r3, #15
 800305a:	4a0a      	ldr	r2, [pc, #40]	; (8003084 <HAL_RCC_ClockConfig+0x1c8>)
 800305c:	5cd3      	ldrb	r3, [r2, r3]
 800305e:	fa21 f303 	lsr.w	r3, r1, r3
 8003062:	4a09      	ldr	r2, [pc, #36]	; (8003088 <HAL_RCC_ClockConfig+0x1cc>)
 8003064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003066:	4b09      	ldr	r3, [pc, #36]	; (800308c <HAL_RCC_ClockConfig+0x1d0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7fe fa88 	bl	8001580 <HAL_InitTick>

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	40022000 	.word	0x40022000
 8003080:	40021000 	.word	0x40021000
 8003084:	0800328c 	.word	0x0800328c
 8003088:	20000000 	.word	0x20000000
 800308c:	20000004 	.word	0x20000004

08003090 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003090:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003092:	b091      	sub	sp, #68	; 0x44
 8003094:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
 8003096:	4b56      	ldr	r3, [pc, #344]	; (80031f0 <HAL_RCC_GetSysClockFreq+0x160>)
 8003098:	f107 0414 	add.w	r4, r7, #20
 800309c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800309e:	c407      	stmia	r4!, {r0, r1, r2}
 80030a0:	8023      	strh	r3, [r4, #0]
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
 80030a2:	4b54      	ldr	r3, [pc, #336]	; (80031f4 <HAL_RCC_GetSysClockFreq+0x164>)
 80030a4:	1d3c      	adds	r4, r7, #4
 80030a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030ac:	2300      	movs	r3, #0
 80030ae:	637b      	str	r3, [r7, #52]	; 0x34
 80030b0:	2300      	movs	r3, #0
 80030b2:	633b      	str	r3, [r7, #48]	; 0x30
 80030b4:	2300      	movs	r3, #0
 80030b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030b8:	2300      	movs	r3, #0
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t sysclockfreq = 0U;
 80030bc:	2300      	movs	r3, #0
 80030be:	63bb      	str	r3, [r7, #56]	; 0x38
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
 80030c0:	2300      	movs	r3, #0
 80030c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80030c4:	2300      	movs	r3, #0
 80030c6:	627b      	str	r3, [r7, #36]	; 0x24
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80030c8:	4b4b      	ldr	r3, [pc, #300]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x168>)
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	637b      	str	r3, [r7, #52]	; 0x34

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d002      	beq.n	80030de <HAL_RCC_GetSysClockFreq+0x4e>
 80030d8:	2b08      	cmp	r3, #8
 80030da:	d003      	beq.n	80030e4 <HAL_RCC_GetSysClockFreq+0x54>
 80030dc:	e07f      	b.n	80031de <HAL_RCC_GetSysClockFreq+0x14e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030de:	4b47      	ldr	r3, [pc, #284]	; (80031fc <HAL_RCC_GetSysClockFreq+0x16c>)
 80030e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80030e2:	e07f      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80030e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030e6:	0c9b      	lsrs	r3, r3, #18
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80030f0:	4413      	add	r3, r2
 80030f2:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 80030f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80030f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d065      	beq.n	80031ce <HAL_RCC_GetSysClockFreq+0x13e>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
 8003102:	4b3d      	ldr	r3, [pc, #244]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	f107 0240 	add.w	r2, r7, #64	; 0x40
 800310e:	4413      	add	r3, r2
 8003110:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 8003114:	633b      	str	r3, [r7, #48]	; 0x30
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
#endif /*RCC_CFGR2_PREDIV1*/
#if defined(RCC_CFGR2_PREDIV1SRC)

        if (HAL_IS_BIT_SET(RCC->CFGR2, RCC_CFGR2_PREDIV1SRC))
 8003116:	4b38      	ldr	r3, [pc, #224]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800311a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d043      	beq.n	80031aa <HAL_RCC_GetSysClockFreq+0x11a>
        {
          /* PLL2 selected as Prediv1 source */
          /* PLLCLK = PLL2CLK / PREDIV1 * PLLMUL with PLL2CLK = HSE/PREDIV2 * PLL2MUL */
          prediv2 = ((RCC->CFGR2 & RCC_CFGR2_PREDIV2) >> RCC_CFGR2_PREDIV2_Pos) + 1;
 8003122:	4b35      	ldr	r3, [pc, #212]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003126:	091b      	lsrs	r3, r3, #4
 8003128:	f003 030f 	and.w	r3, r3, #15
 800312c:	3301      	adds	r3, #1
 800312e:	62bb      	str	r3, [r7, #40]	; 0x28
          pll2mul = ((RCC->CFGR2 & RCC_CFGR2_PLL2MUL) >> RCC_CFGR2_PLL2MUL_Pos) + 2;
 8003130:	4b31      	ldr	r3, [pc, #196]	; (80031f8 <HAL_RCC_GetSysClockFreq+0x168>)
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	0a1b      	lsrs	r3, r3, #8
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	3302      	adds	r3, #2
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
          pllclk = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pll2mul * (uint64_t)pllmul) / ((uint64_t)prediv2 * (uint64_t)prediv));
 800313e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003140:	4619      	mov	r1, r3
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003148:	f04f 0400 	mov.w	r4, #0
 800314c:	fb03 f502 	mul.w	r5, r3, r2
 8003150:	fb01 f004 	mul.w	r0, r1, r4
 8003154:	4428      	add	r0, r5
 8003156:	fba1 3403 	umull	r3, r4, r1, r3
 800315a:	1902      	adds	r2, r0, r4
 800315c:	4614      	mov	r4, r2
 800315e:	4a27      	ldr	r2, [pc, #156]	; (80031fc <HAL_RCC_GetSysClockFreq+0x16c>)
 8003160:	fb02 f104 	mul.w	r1, r2, r4
 8003164:	2200      	movs	r2, #0
 8003166:	fb02 f203 	mul.w	r2, r2, r3
 800316a:	440a      	add	r2, r1
 800316c:	4923      	ldr	r1, [pc, #140]	; (80031fc <HAL_RCC_GetSysClockFreq+0x16c>)
 800316e:	fba3 5601 	umull	r5, r6, r3, r1
 8003172:	1993      	adds	r3, r2, r6
 8003174:	461e      	mov	r6, r3
 8003176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003178:	4619      	mov	r1, r3
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003180:	f04f 0400 	mov.w	r4, #0
 8003184:	fb03 fc02 	mul.w	ip, r3, r2
 8003188:	fb01 f004 	mul.w	r0, r1, r4
 800318c:	4460      	add	r0, ip
 800318e:	fba1 3403 	umull	r3, r4, r1, r3
 8003192:	1902      	adds	r2, r0, r4
 8003194:	4614      	mov	r4, r2
 8003196:	461a      	mov	r2, r3
 8003198:	4623      	mov	r3, r4
 800319a:	4628      	mov	r0, r5
 800319c:	4631      	mov	r1, r6
 800319e:	f7fd fc31 	bl	8000a04 <__aeabi_uldivmod>
 80031a2:	4603      	mov	r3, r0
 80031a4:	460c      	mov	r4, r1
 80031a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031a8:	e007      	b.n	80031ba <HAL_RCC_GetSysClockFreq+0x12a>
        }
        else
        {
          /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
          pllclk = (uint32_t)((HSE_VALUE * pllmul) / prediv);
 80031aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ac:	4a13      	ldr	r2, [pc, #76]	; (80031fc <HAL_RCC_GetSysClockFreq+0x16c>)
 80031ae:	fb02 f203 	mul.w	r2, r2, r3
 80031b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        /* If PLLMUL was set to 13 means that it was to cover the case PLLMUL 6.5 (avoid using float) */
        /* In this case need to divide pllclk by 2 */
        if (pllmul == aPLLMULFactorTable[(uint32_t)(RCC_CFGR_PLLMULL6_5) >> RCC_CFGR_PLLMULL_Pos])
 80031ba:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80031be:	461a      	mov	r2, r3
 80031c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d108      	bne.n	80031d8 <HAL_RCC_GetSysClockFreq+0x148>
        {
          pllclk = pllclk / 2;
 80031c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031c8:	085b      	lsrs	r3, r3, #1
 80031ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031cc:	e004      	b.n	80031d8 <HAL_RCC_GetSysClockFreq+0x148>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80031ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d0:	4a0b      	ldr	r2, [pc, #44]	; (8003200 <HAL_RCC_GetSysClockFreq+0x170>)
 80031d2:	fb02 f303 	mul.w	r3, r2, r3
 80031d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      sysclockfreq = pllclk;
 80031d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80031dc:	e002      	b.n	80031e4 <HAL_RCC_GetSysClockFreq+0x154>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <HAL_RCC_GetSysClockFreq+0x174>)
 80031e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80031e2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80031e6:	4618      	mov	r0, r3
 80031e8:	3744      	adds	r7, #68	; 0x44
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ee:	bf00      	nop
 80031f0:	0800326c 	.word	0x0800326c
 80031f4:	0800327c 	.word	0x0800327c
 80031f8:	40021000 	.word	0x40021000
 80031fc:	017d7840 	.word	0x017d7840
 8003200:	003d0900 	.word	0x003d0900
 8003204:	007a1200 	.word	0x007a1200

08003208 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003210:	4b0a      	ldr	r3, [pc, #40]	; (800323c <RCC_Delay+0x34>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <RCC_Delay+0x38>)
 8003216:	fba2 2303 	umull	r2, r3, r2, r3
 800321a:	0a5b      	lsrs	r3, r3, #9
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	fb02 f303 	mul.w	r3, r2, r3
 8003222:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003224:	bf00      	nop
  }
  while (Delay --);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	1e5a      	subs	r2, r3, #1
 800322a:	60fa      	str	r2, [r7, #12]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f9      	bne.n	8003224 <RCC_Delay+0x1c>
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	bc80      	pop	{r7}
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	20000000 	.word	0x20000000
 8003240:	10624dd3 	.word	0x10624dd3

08003244 <memset>:
 8003244:	4603      	mov	r3, r0
 8003246:	4402      	add	r2, r0
 8003248:	4293      	cmp	r3, r2
 800324a:	d100      	bne.n	800324e <memset+0xa>
 800324c:	4770      	bx	lr
 800324e:	f803 1b01 	strb.w	r1, [r3], #1
 8003252:	e7f9      	b.n	8003248 <memset+0x4>

08003254 <_init>:
 8003254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003256:	bf00      	nop
 8003258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800325a:	bc08      	pop	{r3}
 800325c:	469e      	mov	lr, r3
 800325e:	4770      	bx	lr

08003260 <_fini>:
 8003260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003262:	bf00      	nop
 8003264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003266:	bc08      	pop	{r3}
 8003268:	469e      	mov	lr, r3
 800326a:	4770      	bx	lr
